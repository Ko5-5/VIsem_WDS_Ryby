
WDS_RyBy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800ca10  0800ca10  0001ca10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb20  0800cb20  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb20  0800cb20  0001cb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb28  0800cb28  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb28  0800cb28  0001cb28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb2c  0800cb2c  0001cb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800cb30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  20000278  0800cda8  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  0800cda8  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e384  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f5c  00000000  00000000  0003e62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001598  00000000  00000000  00042588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  00043b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba56  00000000  00000000  00044ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000154ac  00000000  00000000  0006093e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096b3c  00000000  00000000  00075dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc0  00000000  00000000  0010c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c9f8 	.word	0x0800c9f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800c9f8 	.word	0x0800c9f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <MX_ADC1_Init+0xb8>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_ADC1_Init+0xbc>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000efa:	f001 f9d3 	bl	80022a4 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fb98 	bl	8001638 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f10:	2307      	movs	r3, #7
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f1a:	f001 faf9 	bl	8002510 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fb88 	bl	8001638 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f36:	f001 faeb 	bl	8002510 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f40:	f000 fb7a 	bl	8001638 <Error_Handler>
  }

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002c8 	.word	0x200002c8
 8000f50:	40012000 	.word	0x40012000
 8000f54:	0f000001 	.word	0x0f000001

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_ADC_MspInit+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d157      	bne.n	800102a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JOY_HORIZONTAL_Pin|JOY_VERTICAL_Pin;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <HAL_ADC_MspInit+0xe4>)
 8000fc6:	f002 fa03 	bl	80033d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001010:	f001 fe40 	bl	8002c94 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800101a:	f000 fb0d 	bl	8001638 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012000 	.word	0x40012000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	20000310 	.word	0x20000310
 8001044:	40026410 	.word	0x40026410

08001048 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_DMA_Init+0x3c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_DMA_Init+0x3c>)
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2038      	movs	r0, #56	; 0x38
 8001070:	f001 fdd9 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f001 fdf2 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a3c      	ldr	r2, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a35      	ldr	r2, [pc, #212]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <MX_GPIO_Init+0x12c>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <MX_GPIO_Init+0x12c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_LED_Pin|VIBROMOTOR_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f244 0102 	movw	r1, #16386	; 0x4002
 8001114:	4828      	ldr	r0, [pc, #160]	; (80011b8 <MX_GPIO_Init+0x130>)
 8001116:	f002 fadd 	bl	80036d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT_1_IT_Pin|BUT_2_IT_Pin;
 800111a:	2303      	movs	r3, #3
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_GPIO_Init+0x134>)
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4824      	ldr	r0, [pc, #144]	; (80011c0 <MX_GPIO_Init+0x138>)
 800112e:	f002 f94f 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|VIBROMOTOR_Pin;
 8001132:	f244 0302 	movw	r3, #16386	; 0x4002
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <MX_GPIO_Init+0x130>)
 800114c:	f002 f940 	bl	80033d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOY_BUT_IT_Pin|ROT_BUT_IT_Pin;
 8001150:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_GPIO_Init+0x134>)
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_GPIO_Init+0x130>)
 8001166:	f002 f933 	bl	80033d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2006      	movs	r0, #6
 8001170:	f001 fd59 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001174:	2006      	movs	r0, #6
 8001176:	f001 fd72 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2007      	movs	r0, #7
 8001180:	f001 fd51 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001184:	2007      	movs	r0, #7
 8001186:	f001 fd6a 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	200a      	movs	r0, #10
 8001190:	f001 fd49 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001194:	200a      	movs	r0, #10
 8001196:	f001 fd62 	bl	8002c5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 fd41 	bl	8002c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011a4:	2028      	movs	r0, #40	; 0x28
 80011a6:	f001 fd5a 	bl	8002c5e <HAL_NVIC_EnableIRQ>

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400
 80011bc:	10210000 	.word	0x10210000
 80011c0:	40020000 	.word	0x40020000

080011c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C1_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C1_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C1_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C1_Init+0x50>)
 8001202:	f002 fa99 	bl	8003738 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fa14 	bl	8001638 <Error_Handler>
  }

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000370 	.word	0x20000370
 8001218:	40005400 	.word	0x40005400
 800121c:	00061a80 	.word	0x00061a80

08001220 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_I2C_MspInit+0xa4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d13b      	bne.n	80012ba <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001262:	2312      	movs	r3, #18
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126e:	2304      	movs	r3, #4
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4814      	ldr	r0, [pc, #80]	; (80012cc <HAL_I2C_MspInit+0xac>)
 800127a:	f002 f8a9 	bl	80033d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_I2C_MspInit+0xa8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	201f      	movs	r0, #31
 80012a0:	f001 fcc1 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012a4:	201f      	movs	r0, #31
 80012a6:	f001 fcda 	bl	8002c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2020      	movs	r0, #32
 80012b0:	f001 fcb9 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80012b4:	2020      	movs	r0, #32
 80012b6:	f001 fcd2 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	b08f      	sub	sp, #60	; 0x3c
 80012d4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 ff51 	bl	800217c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f90b 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff fed3 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e2:	f7ff feb1 	bl	8001048 <MX_DMA_Init>
  MX_ADC1_Init();
 80012e6:	f7ff fdd7 	bl	8000e98 <MX_ADC1_Init>
  MX_I2C1_Init();
 80012ea:	f7ff ff6b 	bl	80011c4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012ee:	f000 fe5b 	bl	8001fa8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80012f2:	f009 fea9 	bl	800b048 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//---- Akcelerometr i żyroskop
	while (MPU6050_Init(&hi2c1) == 1);
 80012f6:	bf00      	nop
 80012f8:	486f      	ldr	r0, [pc, #444]	; (80014b8 <main+0x1e8>)
 80012fa:	f000 f9a4 	bl	8001646 <MPU6050_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b01      	cmp	r3, #1
 8001302:	d0f9      	beq.n	80012f8 <main+0x28>
	//MPU6050_Init(&hi2c1);

	//---- Joystick ciągły pomiar
	HAL_ADC_Start_DMA(&hadc1, Joystick, 2);
 8001304:	2202      	movs	r2, #2
 8001306:	496d      	ldr	r1, [pc, #436]	; (80014bc <main+0x1ec>)
 8001308:	486d      	ldr	r0, [pc, #436]	; (80014c0 <main+0x1f0>)
 800130a:	f001 f80f 	bl	800232c <HAL_ADC_Start_DMA>

	//---- Inicjalizacja enkodera
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800130e:	213c      	movs	r1, #60	; 0x3c
 8001310:	486c      	ldr	r0, [pc, #432]	; (80014c4 <main+0x1f4>)
 8001312:	f006 fcb7 	bl	8007c84 <HAL_TIM_Encoder_Start_IT>


	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8001316:	2201      	movs	r2, #1
 8001318:	2102      	movs	r1, #2
 800131a:	486b      	ldr	r0, [pc, #428]	; (80014c8 <main+0x1f8>)
 800131c:	f002 f9da 	bl	80036d4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		++MessageCounter;
 8001320:	4b6a      	ldr	r3, [pc, #424]	; (80014cc <main+0x1fc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <main+0x1fc>)
 800132a:	701a      	strb	r2, [r3, #0]
		Joystick[0] /= 40.96;
 800132c:	4b63      	ldr	r3, [pc, #396]	; (80014bc <main+0x1ec>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8f7 	bl	8000524 <__aeabi_i2d>
 8001336:	a35e      	add	r3, pc, #376	; (adr r3, 80014b0 <main+0x1e0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff fa86 	bl	800084c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc06 	bl	8000b58 <__aeabi_d2uiz>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <main+0x1ec>)
 8001352:	801a      	strh	r2, [r3, #0]
		Joystick[1] /= 40.96;
 8001354:	4b59      	ldr	r3, [pc, #356]	; (80014bc <main+0x1ec>)
 8001356:	885b      	ldrh	r3, [r3, #2]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8e3 	bl	8000524 <__aeabi_i2d>
 800135e:	a354      	add	r3, pc, #336	; (adr r3, 80014b0 <main+0x1e0>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fa72 	bl	800084c <__aeabi_ddiv>
 8001368:	4603      	mov	r3, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4618      	mov	r0, r3
 800136e:	4621      	mov	r1, r4
 8001370:	f7ff fbf2 	bl	8000b58 <__aeabi_d2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <main+0x1ec>)
 800137a:	805a      	strh	r2, [r3, #2]
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800137c:	4954      	ldr	r1, [pc, #336]	; (80014d0 <main+0x200>)
 800137e:	484e      	ldr	r0, [pc, #312]	; (80014b8 <main+0x1e8>)
 8001380:	f000 f9ba 	bl	80016f8 <MPU6050_Read_All>
		akcelerometr[0] = MPU6050.Ax;
 8001384:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <main+0x200>)
 8001386:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800138a:	4618      	mov	r0, r3
 800138c:	4621      	mov	r1, r4
 800138e:	f7ff fbe3 	bl	8000b58 <__aeabi_d2uiz>
 8001392:	4603      	mov	r3, r0
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <main+0x204>)
 8001398:	801a      	strh	r2, [r3, #0]
		akcelerometr[1] = MPU6050.Ay;
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <main+0x200>)
 800139c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80013a0:	4618      	mov	r0, r3
 80013a2:	4621      	mov	r1, r4
 80013a4:	f7ff fbd8 	bl	8000b58 <__aeabi_d2uiz>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <main+0x204>)
 80013ae:	805a      	strh	r2, [r3, #2]
		akcelerometr[2] = MPU6050.Az;
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <main+0x200>)
 80013b2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80013b6:	4618      	mov	r0, r3
 80013b8:	4621      	mov	r1, r4
 80013ba:	f7ff fbcd 	bl	8000b58 <__aeabi_d2uiz>
 80013be:	4603      	mov	r3, r0
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <main+0x204>)
 80013c4:	809a      	strh	r2, [r3, #4]
		zyroskop[0] = MPU6050.Gx;
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <main+0x200>)
 80013c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	f7ff fbc2 	bl	8000b58 <__aeabi_d2uiz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <main+0x208>)
 80013da:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gy;
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <main+0x200>)
 80013de:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80013e2:	4618      	mov	r0, r3
 80013e4:	4621      	mov	r1, r4
 80013e6:	f7ff fbb7 	bl	8000b58 <__aeabi_d2uiz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <main+0x208>)
 80013f0:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gz;
 80013f2:	4b37      	ldr	r3, [pc, #220]	; (80014d0 <main+0x200>)
 80013f4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80013f8:	4618      	mov	r0, r3
 80013fa:	4621      	mov	r1, r4
 80013fc:	f7ff fbac 	bl	8000b58 <__aeabi_d2uiz>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b34      	ldr	r3, [pc, #208]	; (80014d8 <main+0x208>)
 8001406:	801a      	strh	r2, [r3, #0]
		MessageLength = sprintf(DataToSend, "W %d %d %d %d %d %d %d %d %d %d %d %d \n\r", akcelerometr[0], akcelerometr[1], akcelerometr[2], zyroskop[0], zyroskop[0], zyroskop[0], przyciski[0], przyciski[1], Joystick[0], Joystick[1], JoyBut, count);
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <main+0x204>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	469c      	mov	ip, r3
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <main+0x204>)
 8001410:	885b      	ldrh	r3, [r3, #2]
 8001412:	469e      	mov	lr, r3
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <main+0x204>)
 8001416:	889b      	ldrh	r3, [r3, #4]
 8001418:	461a      	mov	r2, r3
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <main+0x208>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <main+0x208>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <main+0x208>)
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	461c      	mov	r4, r3
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <main+0x20c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461d      	mov	r5, r3
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <main+0x20c>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461e      	mov	r6, r3
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <main+0x1ec>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <main+0x1ec>)
 8001444:	885b      	ldrh	r3, [r3, #2]
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <main+0x210>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <main+0x214>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b21b      	sxth	r3, r3
 8001456:	9309      	str	r3, [sp, #36]	; 0x24
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	9308      	str	r3, [sp, #32]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	9307      	str	r3, [sp, #28]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	9306      	str	r3, [sp, #24]
 8001464:	9605      	str	r6, [sp, #20]
 8001466:	9504      	str	r5, [sp, #16]
 8001468:	9403      	str	r4, [sp, #12]
 800146a:	9002      	str	r0, [sp, #8]
 800146c:	9101      	str	r1, [sp, #4]
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	4673      	mov	r3, lr
 8001472:	4662      	mov	r2, ip
 8001474:	491c      	ldr	r1, [pc, #112]	; (80014e8 <main+0x218>)
 8001476:	481d      	ldr	r0, [pc, #116]	; (80014ec <main+0x21c>)
 8001478:	f00a fbd6 	bl	800bc28 <siprintf>
 800147c:	4603      	mov	r3, r0
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <main+0x220>)
 8001482:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(DataToSend, MessageLength);
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <main+0x220>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	4817      	ldr	r0, [pc, #92]	; (80014ec <main+0x21c>)
 800148e:	f009 fe99 	bl	800b1c4 <CDC_Transmit_FS>
		przyciski[0] = 0;
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <main+0x20c>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		przyciski[1] = 0;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <main+0x20c>)
 800149a:	2200      	movs	r2, #0
 800149c:	705a      	strb	r2, [r3, #1]
		JoyBut = 0;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <main+0x210>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(VIBROMOTOR_GPIO_Port, VIBROMOTOR_Pin);
		HAL_Delay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f000 feda 	bl	8002260 <HAL_Delay>
		++MessageCounter;
 80014ac:	e738      	b.n	8001320 <main+0x50>
 80014ae:	bf00      	nop
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	40447ae1 	.word	0x40447ae1
 80014b8:	20000370 	.word	0x20000370
 80014bc:	200002a8 	.word	0x200002a8
 80014c0:	200002c8 	.word	0x200002c8
 80014c4:	2000044c 	.word	0x2000044c
 80014c8:	40020400 	.word	0x40020400
 80014cc:	200002b6 	.word	0x200002b6
 80014d0:	200003c8 	.word	0x200003c8
 80014d4:	20000294 	.word	0x20000294
 80014d8:	2000029c 	.word	0x2000029c
 80014dc:	200002a4 	.word	0x200002a4
 80014e0:	200002ac 	.word	0x200002ac
 80014e4:	200002b4 	.word	0x200002b4
 80014e8:	0800ca10 	.word	0x0800ca10
 80014ec:	20000420 	.word	0x20000420
 80014f0:	200002b7 	.word	0x200002b7

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fad0 	bl	800baa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <SystemClock_Config+0xc8>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <SystemClock_Config+0xc8>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <SystemClock_Config+0xc8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <SystemClock_Config+0xcc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <SystemClock_Config+0xcc>)
 800153e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <SystemClock_Config+0xcc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001564:	2319      	movs	r3, #25
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4618      	mov	r0, r3
 800157a:	f005 fec9 	bl	8007310 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001584:	f000 f858 	bl	8001638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 f923 	bl	80077f0 <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015b0:	f000 f842 	bl	8001638 <Error_Handler>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3750      	adds	r7, #80	; 0x50
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x28>)
 80015d4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x28>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80015de:	801a      	strh	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	200002b0 	.word	0x200002b0
 80015f0:	200002b4 	.word	0x200002b4

080015f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == JOY_BUT_IT_Pin){
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001604:	d102      	bne.n	800160c <HAL_GPIO_EXTI_Callback+0x18>
		JoyBut = 1;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_1_IT_Pin){
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_GPIO_EXTI_Callback+0x24>
		przyciski[0] = 1;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_Callback+0x40>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_2_IT_Pin){
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d102      	bne.n	8001624 <HAL_GPIO_EXTI_Callback+0x30>
		przyciski[1] = 1;
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_Callback+0x40>)
 8001620:	2201      	movs	r2, #1
 8001622:	705a      	strb	r2, [r3, #1]
	}
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200002ac 	.word	0x200002ac
 8001634:	200002a4 	.word	0x200002a4

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b088      	sub	sp, #32
 800164a:	af04      	add	r7, sp, #16
 800164c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2301      	movs	r3, #1
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	f107 030f 	add.w	r3, r7, #15
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	2301      	movs	r3, #1
 800165e:	2275      	movs	r2, #117	; 0x75
 8001660:	21d0      	movs	r1, #208	; 0xd0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f002 fa9a 	bl	8003b9c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b68      	cmp	r3, #104	; 0x68
 800166c:	d13d      	bne.n	80016ea <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001672:	2364      	movs	r3, #100	; 0x64
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	2301      	movs	r3, #1
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	f107 030e 	add.w	r3, r7, #14
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2301      	movs	r3, #1
 8001682:	226b      	movs	r2, #107	; 0x6b
 8001684:	21d0      	movs	r1, #208	; 0xd0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f002 f98e 	bl	80039a8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800168c:	2307      	movs	r3, #7
 800168e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2301      	movs	r3, #1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	f107 030e 	add.w	r3, r7, #14
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2301      	movs	r3, #1
 80016a0:	2219      	movs	r2, #25
 80016a2:	21d0      	movs	r1, #208	; 0xd0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f002 f97f 	bl	80039a8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80016ae:	2364      	movs	r3, #100	; 0x64
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2301      	movs	r3, #1
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	f107 030e 	add.w	r3, r7, #14
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	221c      	movs	r2, #28
 80016c0:	21d0      	movs	r1, #208	; 0xd0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f002 f970 	bl	80039a8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	f107 030e 	add.w	r3, r7, #14
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	221b      	movs	r2, #27
 80016de:	21d0      	movs	r1, #208	; 0xd0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f002 f961 	bl	80039a8 <HAL_I2C_Mem_Write>
        return 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <MPU6050_Init+0xa6>
    }
    return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0000      	movs	r0, r0
	...

080016f8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b094      	sub	sp, #80	; 0x50
 80016fe:	af04      	add	r7, sp, #16
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	230e      	movs	r3, #14
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	223b      	movs	r2, #59	; 0x3b
 8001716:	21d0      	movs	r1, #208	; 0xd0
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f002 fa3f 	bl	8003b9c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	b21a      	sxth	r2, r3
 8001724:	7a7b      	ldrb	r3, [r7, #9]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21a      	sxth	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001730:	7abb      	ldrb	r3, [r7, #10]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21a      	sxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001742:	7b3b      	ldrb	r3, [r7, #12]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21a      	sxth	r2, r3
 8001748:	7b7b      	ldrb	r3, [r7, #13]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b21a      	sxth	r2, r3
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001762:	7c3b      	ldrb	r3, [r7, #16]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21a      	sxth	r2, r3
 8001768:	7c7b      	ldrb	r3, [r7, #17]
 800176a:	b21b      	sxth	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b21a      	sxth	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001774:	7cbb      	ldrb	r3, [r7, #18]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b21a      	sxth	r2, r3
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b21a      	sxth	r2, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001786:	7d3b      	ldrb	r3, [r7, #20]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	7d7b      	ldrb	r3, [r7, #21]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21a      	sxth	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec0 	bl	8000524 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4bbd      	ldr	r3, [pc, #756]	; (8001aa0 <MPU6050_Read_All+0x3a8>)
 80017aa:	f7ff f84f 	bl	800084c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	6839      	ldr	r1, [r7, #0]
 80017b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feb0 	bl	8000524 <__aeabi_i2d>
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4bb5      	ldr	r3, [pc, #724]	; (8001aa0 <MPU6050_Read_All+0x3a8>)
 80017ca:	f7ff f83f 	bl	800084c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fea0 	bl	8000524 <__aeabi_i2d>
 80017e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a88 <MPU6050_Read_All+0x390>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7ff f82f 	bl	800084c <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80017f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001804:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001aa4 <MPU6050_Read_All+0x3ac>
 8001808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001aa8 <MPU6050_Read_All+0x3b0>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe7f 	bl	8000524 <__aeabi_i2d>
 8001826:	a39a      	add	r3, pc, #616	; (adr r3, 8001a90 <MPU6050_Read_All+0x398>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f80e 	bl	800084c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe6f 	bl	8000524 <__aeabi_i2d>
 8001846:	a392      	add	r3, pc, #584	; (adr r3, 8001a90 <MPU6050_Read_All+0x398>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fffe 	bl	800084c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe5f 	bl	8000524 <__aeabi_i2d>
 8001866:	a38a      	add	r3, pc, #552	; (adr r3, 8001a90 <MPU6050_Read_All+0x398>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ffee 	bl	800084c <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	6839      	ldr	r1, [r7, #0]
 8001876:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800187a:	f000 fce5 	bl	8002248 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <MPU6050_Read_All+0x3b4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe3c 	bl	8000504 <__aeabi_ui2d>
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b87      	ldr	r3, [pc, #540]	; (8001ab0 <MPU6050_Read_All+0x3b8>)
 8001892:	f7fe ffdb 	bl	800084c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800189e:	f000 fcd3 	bl	8002248 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <MPU6050_Read_All+0x3b4>)
 80018a6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c0:	4619      	mov	r1, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c8:	fb03 f301 	mul.w	r3, r3, r1
 80018cc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe28 	bl	8000524 <__aeabi_i2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b10 	vmov	d0, r2, r3
 80018dc:	f00a fea0 	bl	800c620 <sqrt>
 80018e0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018f0:	f7ff f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11f      	bne.n	800193a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe0f 	bl	8000524 <__aeabi_i2d>
 8001906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800190a:	f7fe ff9f 	bl	800084c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b17 	vmov	d7, r2, r3
 8001916:	eeb0 0a47 	vmov.f32	s0, s14
 800191a:	eef0 0a67 	vmov.f32	s1, s15
 800191e:	f00a fcd3 	bl	800c2c8 <atan>
 8001922:	ec51 0b10 	vmov	r0, r1, d0
 8001926:	a35c      	add	r3, pc, #368	; (adr r3, 8001a98 <MPU6050_Read_All+0x3a0>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe64 	bl	80005f8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001938:	e005      	b.n	8001946 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	425b      	negs	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fde8 	bl	8000524 <__aeabi_i2d>
 8001954:	4682      	mov	sl, r0
 8001956:	468b      	mov	fp, r1
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fde0 	bl	8000524 <__aeabi_i2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	ec43 2b11 	vmov	d1, r2, r3
 800196c:	ec4b ab10 	vmov	d0, sl, fp
 8001970:	f00a fe53 	bl	800c61a <atan2>
 8001974:	ec51 0b10 	vmov	r0, r1, d0
 8001978:	a347      	add	r3, pc, #284	; (adr r3, 8001a98 <MPU6050_Read_All+0x3a0>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe3b 	bl	80005f8 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <MPU6050_Read_All+0x3bc>)
 8001990:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001994:	f7ff f8a2 	bl	8000adc <__aeabi_dcmplt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <MPU6050_Read_All+0x2bc>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <MPU6050_Read_All+0x3c0>)
 80019aa:	f7ff f8b5 	bl	8000b18 <__aeabi_dcmpgt>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d114      	bne.n	80019de <MPU6050_Read_All+0x2e6>
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <MPU6050_Read_All+0x3c0>)
 80019ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019be:	f7ff f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <MPU6050_Read_All+0x2fc>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <MPU6050_Read_All+0x3bc>)
 80019d4:	f7ff f882 	bl	8000adc <__aeabi_dcmplt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <MPU6050_Read_All+0x3c4>)
 80019e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80019f2:	e014      	b.n	8001a1e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80019fa:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80019fe:	eeb0 1a47 	vmov.f32	s2, s14
 8001a02:	eef0 1a67 	vmov.f32	s3, s15
 8001a06:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a0a:	482c      	ldr	r0, [pc, #176]	; (8001abc <MPU6050_Read_All+0x3c4>)
 8001a0c:	f000 f85a 	bl	8001ac4 <Kalman_getAngle>
 8001a10:	eeb0 7a40 	vmov.f32	s14, s0
 8001a14:	eef0 7a60 	vmov.f32	s15, s1
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a24:	4690      	mov	r8, r2
 8001a26:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <MPU6050_Read_All+0x3c0>)
 8001a30:	4640      	mov	r0, r8
 8001a32:	4649      	mov	r1, r9
 8001a34:	f7ff f870 	bl	8000b18 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a44:	4614      	mov	r4, r2
 8001a46:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001a56:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001a5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a5e:	eef0 1a67 	vmov.f32	s3, s15
 8001a62:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001a66:	4816      	ldr	r0, [pc, #88]	; (8001ac0 <MPU6050_Read_All+0x3c8>)
 8001a68:	f000 f82c 	bl	8001ac4 <Kalman_getAngle>
 8001a6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a70:	eef0 7a60 	vmov.f32	s15, s1
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001a7a:	bf00      	nop
 8001a7c:	3740      	adds	r7, #64	; 0x40
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a84:	f3af 8000 	nop.w
 8001a88:	00000000 	.word	0x00000000
 8001a8c:	40cc2900 	.word	0x40cc2900
 8001a90:	00000000 	.word	0x00000000
 8001a94:	40606000 	.word	0x40606000
 8001a98:	1a63c1f8 	.word	0x1a63c1f8
 8001a9c:	404ca5dc 	.word	0x404ca5dc
 8001aa0:	40d00000 	.word	0x40d00000
 8001aa4:	43aa0000 	.word	0x43aa0000
 8001aa8:	42121eb8 	.word	0x42121eb8
 8001aac:	20000448 	.word	0x20000448
 8001ab0:	408f4000 	.word	0x408f4000
 8001ab4:	c0568000 	.word	0xc0568000
 8001ab8:	40568000 	.word	0x40568000
 8001abc:	20000048 	.word	0x20000048
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b096      	sub	sp, #88	; 0x58
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	61f8      	str	r0, [r7, #28]
 8001acc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ad0:	ed87 1b02 	vstr	d1, [r7, #8]
 8001ad4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae6:	f7fe fbcf 	bl	8000288 <__aeabi_dsub>
 8001aea:	4603      	mov	r3, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b00:	f7fe fd7a 	bl	80005f8 <__aeabi_dmul>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fbbe 	bl	800028c <__adddf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b2a:	f7fe fd65 	bl	80005f8 <__aeabi_dmul>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b3c:	f7fe fba4 	bl	8000288 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b4e:	f7fe fb9b 	bl	8000288 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fb94 	bl	800028c <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b70:	f7fe fd42 	bl	80005f8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fb86 	bl	800028c <__adddf3>
 8001b80:	4603      	mov	r3, r0
 8001b82:	460c      	mov	r4, r1
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fb6f 	bl	8000288 <__aeabi_dsub>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bc4:	f7fe fd18 	bl	80005f8 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb5a 	bl	8000288 <__aeabi_dsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bee:	f7fe fd03 	bl	80005f8 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fb47 	bl	800028c <__adddf3>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7fe fb38 	bl	800028c <__adddf3>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001c2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c2e:	f7fe fe0d 	bl	800084c <__aeabi_ddiv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c44:	f7fe fe02 	bl	800084c <__aeabi_ddiv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4623      	mov	r3, r4
 8001c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c5e:	f7fe fb13 	bl	8000288 <__aeabi_dsub>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c78:	f7fe fcbe 	bl	80005f8 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fb02 	bl	800028c <__adddf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001c98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ca0:	f7fe fcaa 	bl	80005f8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe faee 	bl	800028c <__adddf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001cc0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001cca:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001cd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cdc:	f7fe fc8c 	bl	80005f8 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe face 	bl	8000288 <__aeabi_dsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001cfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d04:	f7fe fc78 	bl	80005f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe faba 	bl	8000288 <__aeabi_dsub>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001d24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d2c:	f7fe fc64 	bl	80005f8 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe faa6 	bl	8000288 <__aeabi_dsub>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d4c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d54:	f7fe fc50 	bl	80005f8 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f7fe fa92 	bl	8000288 <__aeabi_dsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001d74:	ec44 3b17 	vmov	d7, r3, r4
};
 8001d78:	eeb0 0a47 	vmov.f32	s0, s14
 8001d7c:	eef0 0a67 	vmov.f32	s1, s15
 8001d80:	3758      	adds	r7, #88	; 0x58
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 f9f8 	bl	8002220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f001 fc65 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e46:	2002      	movs	r0, #2
 8001e48:	f001 fc5e 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f001 fc57 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e66:	f005 ff64 	bl	8007d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000044c 	.word	0x2000044c

08001e74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e7a:	f005 ff5a 	bl	8007d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000044c 	.word	0x2000044c

08001e88 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e8e:	f005 ff50 	bl	8007d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000044c 	.word	0x2000044c

08001e9c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM1_CC_IRQHandler+0x10>)
 8001ea2:	f005 ff46 	bl	8007d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000044c 	.word	0x2000044c

08001eb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <I2C1_EV_IRQHandler+0x10>)
 8001eb6:	f002 f897 	bl	8003fe8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000370 	.word	0x20000370

08001ec4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <I2C1_ER_IRQHandler+0x10>)
 8001eca:	f002 f9fa 	bl	80042c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000370 	.word	0x20000370

08001ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001edc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ee0:	f001 fc12 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <DMA2_Stream0_IRQHandler+0x10>)
 8001eee:	f000 fff9 	bl	8002ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000310 	.word	0x20000310

08001efc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <OTG_FS_IRQHandler+0x10>)
 8001f02:	f004 f9d1 	bl	80062a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001960 	.word	0x20001960

08001f10 <_sbrk>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
 8001f40:	f009 fd78 	bl	800ba34 <__errno>
 8001f44:	4602      	mov	r2, r0
 8001f46:	230c      	movs	r3, #12
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20020000 	.word	0x20020000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	200002b8 	.word	0x200002b8
 8001f78:	20001d70 	.word	0x20001d70

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <SystemInit+0x28>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SystemInit+0x28>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SystemInit+0x28>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f96:	609a      	str	r2, [r3, #8]
#endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	2224      	movs	r2, #36	; 0x24
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f009 fd76 	bl	800baa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001fc4:	4b22      	ldr	r3, [pc, #136]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fc6:	4a23      	ldr	r2, [pc, #140]	; (8002054 <MX_TIM1_Init+0xac>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fca:	4b21      	ldr	r3, [pc, #132]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <MX_TIM1_Init+0xa8>)
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002000:	230a      	movs	r3, #10
 8002002:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002004:	2302      	movs	r3, #2
 8002006:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002010:	230a      	movs	r3, #10
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_TIM1_Init+0xa8>)
 800201c:	f005 fda0 	bl	8007b60 <HAL_TIM_Encoder_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002026:	f7ff fb07 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_TIM1_Init+0xa8>)
 8002038:	f006 f852 	bl	80080e0 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002042:	f7ff faf9 	bl	8001638 <Error_Handler>
  }

}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	; 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000044c 	.word	0x2000044c
 8002054:	40010000 	.word	0x40010000

08002058 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d14c      	bne.n	8002114 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a20      	ldr	r2, [pc, #128]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_TIM_Encoder_MspInit+0xc8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <HAL_TIM_Encoder_MspInit+0xcc>)
 80020d0:	f001 f97e 	bl	80033d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2100      	movs	r1, #0
 80020d8:	2018      	movs	r0, #24
 80020da:	f000 fda4 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020de:	2018      	movs	r0, #24
 80020e0:	f000 fdbd 	bl	8002c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2019      	movs	r0, #25
 80020ea:	f000 fd9c 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020ee:	2019      	movs	r0, #25
 80020f0:	f000 fdb5 	bl	8002c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	201a      	movs	r0, #26
 80020fa:	f000 fd94 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020fe:	201a      	movs	r0, #26
 8002100:	f000 fdad 	bl	8002c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002104:	2200      	movs	r2, #0
 8002106:	2100      	movs	r1, #0
 8002108:	201b      	movs	r0, #27
 800210a:	f000 fd8c 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800210e:	201b      	movs	r0, #27
 8002110:	f000 fda5 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40010000 	.word	0x40010000
 8002120:	40023800 	.word	0x40023800
 8002124:	40020000 	.word	0x40020000

08002128 <Reset_Handler>:
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x14>
 800212c:	2100      	movs	r1, #0
 800212e:	e003      	b.n	8002138 <LoopCopyDataInit>

08002130 <CopyDataInit>:
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopFillZerobss+0x18>)
 8002132:	585b      	ldr	r3, [r3, r1]
 8002134:	5043      	str	r3, [r0, r1]
 8002136:	3104      	adds	r1, #4

08002138 <LoopCopyDataInit>:
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopFillZerobss+0x1c>)
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <LoopFillZerobss+0x20>)
 800213c:	1842      	adds	r2, r0, r1
 800213e:	429a      	cmp	r2, r3
 8002140:	d3f6      	bcc.n	8002130 <CopyDataInit>
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x24>)
 8002144:	e002      	b.n	800214c <LoopFillZerobss>

08002146 <FillZerobss>:
 8002146:	2300      	movs	r3, #0
 8002148:	f842 3b04 	str.w	r3, [r2], #4

0800214c <LoopFillZerobss>:
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <LoopFillZerobss+0x28>)
 800214e:	429a      	cmp	r2, r3
 8002150:	d3f9      	bcc.n	8002146 <FillZerobss>
 8002152:	f7ff ff13 	bl	8001f7c <SystemInit>
 8002156:	f009 fc73 	bl	800ba40 <__libc_init_array>
 800215a:	f7ff f8b9 	bl	80012d0 <main>
 800215e:	4770      	bx	lr
 8002160:	20020000 	.word	0x20020000
 8002164:	0800cb30 	.word	0x0800cb30
 8002168:	20000000 	.word	0x20000000
 800216c:	20000278 	.word	0x20000278
 8002170:	20000278 	.word	0x20000278
 8002174:	20001d6c 	.word	0x20001d6c

08002178 <ADC_IRQHandler>:
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>
	...

0800217c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002180:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <HAL_Init+0x40>)
 8002186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_Init+0x40>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a07      	ldr	r2, [pc, #28]	; (80021bc <HAL_Init+0x40>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 fd33 	bl	8002c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f000 f808 	bl	80021c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b0:	f7ff fdea 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x54>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_InitTick+0x58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fd4b 	bl	8002c7a <HAL_SYSTICK_Config>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00e      	b.n	800220c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d80a      	bhi.n	800220a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f000 fd13 	bl	8002c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <HAL_InitTick+0x5c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000090 	.word	0x20000090
 8002218:	20000098 	.word	0x20000098
 800221c:	20000094 	.word	0x20000094

08002220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x20>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_IncTick+0x24>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_IncTick+0x24>)
 8002232:	6013      	str	r3, [r2, #0]
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000098 	.word	0x20000098
 8002244:	2000048c 	.word	0x2000048c

08002248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return uwTick;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_GetTick+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000048c 	.word	0x2000048c

08002260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002278:	d005      	beq.n	8002286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_Delay+0x40>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002286:	bf00      	nop
 8002288:	f7ff ffde 	bl	8002248 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	429a      	cmp	r2, r3
 8002296:	d8f7      	bhi.n	8002288 <HAL_Delay+0x28>
  {
  }
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000098 	.word	0x20000098

080022a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e033      	b.n	8002322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fe48 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ea:	f023 0302 	bic.w	r3, r3, #2
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa3c 	bl	8002774 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
 8002312:	e001      	b.n	8002318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_Start_DMA+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e0b1      	b.n	80024ae <HAL_ADC_Start_DMA+0x182>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d018      	beq.n	8002392 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002370:	4b51      	ldr	r3, [pc, #324]	; (80024b8 <HAL_ADC_Start_DMA+0x18c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a51      	ldr	r2, [pc, #324]	; (80024bc <HAL_ADC_Start_DMA+0x190>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9a      	lsrs	r2, r3, #18
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002384:	e002      	b.n	800238c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	3b01      	subs	r3, #1
 800238a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f9      	bne.n	8002386 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 8085 	bne.w	80024ac <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f023 0206 	bic.w	r2, r3, #6
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_ADC_Start_DMA+0x194>)
 8002400:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <HAL_ADC_Start_DMA+0x198>)
 8002408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <HAL_ADC_Start_DMA+0x19c>)
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <HAL_ADC_Start_DMA+0x1a0>)
 8002418:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002422:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002432:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	334c      	adds	r3, #76	; 0x4c
 800244e:	4619      	mov	r1, r3
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f000 fccc 	bl	8002df0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10f      	bne.n	8002484 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11c      	bne.n	80024ac <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	e013      	b.n	80024ac <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_ADC_Start_DMA+0x1a4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10e      	bne.n	80024ac <HAL_ADC_Start_DMA+0x180>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024aa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000090 	.word	0x20000090
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	40012300 	.word	0x40012300
 80024c4:	0800296d 	.word	0x0800296d
 80024c8:	08002a27 	.word	0x08002a27
 80024cc:	08002a43 	.word	0x08002a43
 80024d0:	40012000 	.word	0x40012000

080024d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x1c>
 8002528:	2302      	movs	r3, #2
 800252a:	e113      	b.n	8002754 <HAL_ADC_ConfigChannel+0x244>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b09      	cmp	r3, #9
 800253a:	d925      	bls.n	8002588 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68d9      	ldr	r1, [r3, #12]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43da      	mvns	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	400a      	ands	r2, r1
 8002560:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68d9      	ldr	r1, [r3, #12]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	4603      	mov	r3, r0
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4403      	add	r3, r0
 800257a:	3b1e      	subs	r3, #30
 800257c:	409a      	lsls	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	e022      	b.n	80025ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	2207      	movs	r2, #7
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4403      	add	r3, r0
 80025c4:	409a      	lsls	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d824      	bhi.n	8002620 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b05      	subs	r3, #5
 80025e8:	221f      	movs	r2, #31
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	400a      	ands	r2, r1
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b05      	subs	r3, #5
 8002612:	fa00 f203 	lsl.w	r2, r0, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	; 0x34
 800261e:	e04c      	b.n	80026ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d824      	bhi.n	8002672 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b23      	subs	r3, #35	; 0x23
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b23      	subs	r3, #35	; 0x23
 8002664:	fa00 f203 	lsl.w	r2, r0, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
 8002670:	e023      	b.n	80026ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3b41      	subs	r3, #65	; 0x41
 8002684:	221f      	movs	r2, #31
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b41      	subs	r3, #65	; 0x41
 80026ae:	fa00 f203 	lsl.w	r2, r0, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ba:	4b29      	ldr	r3, [pc, #164]	; (8002760 <HAL_ADC_ConfigChannel+0x250>)
 80026bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_ADC_ConfigChannel+0x254>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_ADC_ConfigChannel+0x254>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d12b      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <HAL_ADC_ConfigChannel+0x258>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x1f4>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b11      	cmp	r3, #17
 8002702:	d122      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_ADC_ConfigChannel+0x258>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_ADC_ConfigChannel+0x25c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_ADC_ConfigChannel+0x260>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9a      	lsrs	r2, r3, #18
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40012300 	.word	0x40012300
 8002764:	40012000 	.word	0x40012000
 8002768:	10000012 	.word	0x10000012
 800276c:	20000090 	.word	0x20000090
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800277c:	4b79      	ldr	r3, [pc, #484]	; (8002964 <ADC_Init+0x1f0>)
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002806:	4a58      	ldr	r2, [pc, #352]	; (8002968 <ADC_Init+0x1f4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800281a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800283c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e00f      	b.n	8002872 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0202 	bic.w	r2, r2, #2
 8002880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e1b      	ldrb	r3, [r3, #24]
 800288c:	005a      	lsls	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	3b01      	subs	r3, #1
 80028cc:	035a      	lsls	r2, r3, #13
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	e007      	b.n	80028e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	3b01      	subs	r3, #1
 8002904:	051a      	lsls	r2, r3, #20
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800291c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800292a:	025a      	lsls	r2, r3, #9
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	029a      	lsls	r2, r3, #10
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40012300 	.word	0x40012300
 8002968:	0f000001 	.word	0x0f000001

0800296c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13c      	bne.n	8002a00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12b      	bne.n	80029f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d127      	bne.n	80029f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d119      	bne.n	80029f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0220 	bic.w	r2, r2, #32
 80029d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fd6b 	bl	80024d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029fe:	e00e      	b.n	8002a1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fd75 	bl	80024fc <HAL_ADC_ErrorCallback>
}
 8002a12:	e004      	b.n	8002a1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff fd57 	bl	80024e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0204 	orr.w	r2, r3, #4
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff fd4a 	bl	80024fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	60d3      	str	r3, [r2, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	f003 0307 	and.w	r3, r3, #7
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db0b      	blt.n	8002afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f003 021f 	and.w	r2, r3, #31
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <__NVIC_EnableIRQ+0x38>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	2001      	movs	r0, #1
 8002af6:	fa00 f202 	lsl.w	r2, r0, r2
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bdc:	d301      	bcc.n	8002be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00f      	b.n	8002c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be2:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <SysTick_Config+0x40>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bea:	210f      	movs	r1, #15
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f7ff ff8e 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <SysTick_Config+0x40>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <SysTick_Config+0x40>)
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	e000e010 	.word	0xe000e010

08002c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff29 	bl	8002a70 <__NVIC_SetPriorityGrouping>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c38:	f7ff ff3e 	bl	8002ab8 <__NVIC_GetPriorityGrouping>
 8002c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	6978      	ldr	r0, [r7, #20]
 8002c44:	f7ff ff8e 	bl	8002b64 <NVIC_EncodePriority>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff5d 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff31 	bl	8002ad4 <__NVIC_EnableIRQ>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ffa2 	bl	8002bcc <SysTick_Config>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fad2 	bl	8002248 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e099      	b.n	8002de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	e00f      	b.n	8002cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd2:	f7ff fab9 	bl	8002248 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d908      	bls.n	8002cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e078      	b.n	8002de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e8      	bne.n	8002cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_DMA_Init+0x158>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4313      	orrs	r3, r2
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d117      	bne.n	8002db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa9f 	bl	80032dc <DMA_CheckFifoParam>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2240      	movs	r2, #64	; 0x40
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002db2:	2301      	movs	r3, #1
 8002db4:	e016      	b.n	8002de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa56 	bl	8003270 <DMA_CalcBaseAndBitshift>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	223f      	movs	r2, #63	; 0x3f
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	f010803f 	.word	0xf010803f

08002df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_DMA_Start_IT+0x26>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e040      	b.n	8002e98 <HAL_DMA_Start_IT+0xa8>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12f      	bne.n	8002e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f9e8 	bl	8003214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	223f      	movs	r2, #63	; 0x3f
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0216 	orr.w	r2, r2, #22
 8002e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e005      	b.n	8002e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	; 0x80
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00c      	b.n	8002ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2205      	movs	r2, #5
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ef0:	4b92      	ldr	r3, [pc, #584]	; (800313c <HAL_DMA_IRQHandler+0x258>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_DMA_IRQHandler+0x25c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	2208      	movs	r2, #8
 8002f10:	409a      	lsls	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0204 	bic.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	f043 0201 	orr.w	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	f043 0202 	orr.w	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2204      	movs	r2, #4
 8002faa:	409a      	lsls	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f043 0204 	orr.w	r2, r3, #4
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	409a      	lsls	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d043      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2210      	movs	r2, #16
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e01f      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
 8003024:	e016      	b.n	8003054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0208 	bic.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	2220      	movs	r2, #32
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808e 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8086 	beq.w	8003182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2220      	movs	r2, #32
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b05      	cmp	r3, #5
 800308c:	d136      	bne.n	80030fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0216 	bic.w	r2, r2, #22
 800309c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <HAL_DMA_IRQHandler+0x1da>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0208 	bic.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	223f      	movs	r2, #63	; 0x3f
 80030d4:	409a      	lsls	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d07d      	beq.n	80031ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4798      	blx	r3
        }
        return;
 80030fa:	e078      	b.n	80031ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	2b00      	cmp	r3, #0
 800311e:	d030      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e02b      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d027      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	4798      	blx	r3
 800313a:	e022      	b.n	8003182 <HAL_DMA_IRQHandler+0x29e>
 800313c:	20000090 	.word	0x20000090
 8003140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0210 	bic.w	r2, r2, #16
 8003160:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d022      	beq.n	80031dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2205      	movs	r2, #5
 800319a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d307      	bcc.n	80031ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f2      	bne.n	80031ae <HAL_DMA_IRQHandler+0x2ca>
 80031c8:	e000      	b.n	80031cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
 80031ec:	e000      	b.n	80031f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031ee:	bf00      	nop
    }
  }
}
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003206:	b2db      	uxtb	r3, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d108      	bne.n	8003254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003252:	e007      	b.n	8003264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	3b10      	subs	r3, #16
 8003280:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <DMA_CalcBaseAndBitshift+0x68>)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d909      	bls.n	80032b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	1d1a      	adds	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	659a      	str	r2, [r3, #88]	; 0x58
 80032b0:	e007      	b.n	80032c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	aaaaaaab 	.word	0xaaaaaaab
 80032d8:	0800ca98 	.word	0x0800ca98

080032dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11f      	bne.n	8003336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d855      	bhi.n	80033a8 <DMA_CheckFifoParam+0xcc>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <DMA_CheckFifoParam+0x28>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003315 	.word	0x08003315
 8003308:	08003327 	.word	0x08003327
 800330c:	08003315 	.word	0x08003315
 8003310:	080033a9 	.word	0x080033a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d045      	beq.n	80033ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e042      	b.n	80033ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332e:	d13f      	bne.n	80033b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e03c      	b.n	80033b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333e:	d121      	bne.n	8003384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d836      	bhi.n	80033b4 <DMA_CheckFifoParam+0xd8>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <DMA_CheckFifoParam+0x70>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003363 	.word	0x08003363
 8003354:	0800335d 	.word	0x0800335d
 8003358:	08003375 	.word	0x08003375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e02f      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d024      	beq.n	80033b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003372:	e021      	b.n	80033b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800337c:	d11e      	bne.n	80033bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003382:	e01b      	b.n	80033bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d902      	bls.n	8003390 <DMA_CheckFifoParam+0xb4>
 800338a:	2b03      	cmp	r3, #3
 800338c:	d003      	beq.n	8003396 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800338e:	e018      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e015      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00e      	beq.n	80033c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      break;
 80033a6:	e00b      	b.n	80033c0 <DMA_CheckFifoParam+0xe4>
      break;
 80033a8:	bf00      	nop
 80033aa:	e00a      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033ac:	bf00      	nop
 80033ae:	e008      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033b0:	bf00      	nop
 80033b2:	e006      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033b4:	bf00      	nop
 80033b6:	e004      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <DMA_CheckFifoParam+0xe6>
      break;
 80033c0:	bf00      	nop
    }
  } 
  
  return status; 
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	e159      	b.n	80036a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033ec:	2201      	movs	r2, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	429a      	cmp	r2, r3
 8003406:	f040 8148 	bne.w	800369a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d00b      	beq.n	800342a <HAL_GPIO_Init+0x5a>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800341e:	2b11      	cmp	r3, #17
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b12      	cmp	r3, #18
 8003428:	d130      	bne.n	800348c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003460:	2201      	movs	r2, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 0201 	and.w	r2, r3, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0xfc>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b12      	cmp	r3, #18
 80034ca:	d123      	bne.n	8003514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	08da      	lsrs	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3208      	adds	r2, #8
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	08da      	lsrs	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3208      	adds	r2, #8
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2203      	movs	r2, #3
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0203 	and.w	r2, r3, #3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a2 	beq.w	800369a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_GPIO_Init+0x2e4>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a55      	ldr	r2, [pc, #340]	; (80036b4 <HAL_GPIO_Init+0x2e4>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_GPIO_Init+0x2e4>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003572:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <HAL_GPIO_Init+0x2e8>)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	220f      	movs	r2, #15
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a48      	ldr	r2, [pc, #288]	; (80036bc <HAL_GPIO_Init+0x2ec>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0x202>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_GPIO_Init+0x2f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x1fe>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <HAL_GPIO_Init+0x2f4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x1fa>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <HAL_GPIO_Init+0x2f8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x1f6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a44      	ldr	r2, [pc, #272]	; (80036cc <HAL_GPIO_Init+0x2fc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x1f2>
 80035be:	2304      	movs	r3, #4
 80035c0:	e008      	b.n	80035d4 <HAL_GPIO_Init+0x204>
 80035c2:	2307      	movs	r3, #7
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x204>
 80035c6:	2303      	movs	r3, #3
 80035c8:	e004      	b.n	80035d4 <HAL_GPIO_Init+0x204>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_Init+0x204>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_GPIO_Init+0x204>
 80035d2:	2300      	movs	r3, #0
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f002 0203 	and.w	r2, r2, #3
 80035da:	0092      	lsls	r2, r2, #2
 80035dc:	4093      	lsls	r3, r2
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e4:	4934      	ldr	r1, [pc, #208]	; (80036b8 <HAL_GPIO_Init+0x2e8>)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3302      	adds	r3, #2
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_GPIO_Init+0x300>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003616:	4a2e      	ldr	r2, [pc, #184]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_GPIO_Init+0x300>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003640:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366a:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <HAL_GPIO_Init+0x300>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003694:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_GPIO_Init+0x300>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	f67f aea2 	bls.w	80033ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a8:	bf00      	nop
 80036aa:	3724      	adds	r7, #36	; 0x24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40013c00 	.word	0x40013c00

080036d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	807b      	strh	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f0:	e003      	b.n	80036fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	041a      	lsls	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd ff64 	bl	80015f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e11f      	b.n	800398a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fd5e 	bl	8001220 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800379c:	f004 f9cc 	bl	8007b38 <HAL_RCC_GetPCLK1Freq>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a7b      	ldr	r2, [pc, #492]	; (8003994 <HAL_I2C_Init+0x25c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d807      	bhi.n	80037bc <HAL_I2C_Init+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_I2C_Init+0x260>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bf94      	ite	ls
 80037b4:	2301      	movls	r3, #1
 80037b6:	2300      	movhi	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e006      	b.n	80037ca <HAL_I2C_Init+0x92>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a77      	ldr	r2, [pc, #476]	; (800399c <HAL_I2C_Init+0x264>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0db      	b.n	800398a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <HAL_I2C_Init+0x268>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0c9b      	lsrs	r3, r3, #18
 80037dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a64      	ldr	r2, [pc, #400]	; (8003994 <HAL_I2C_Init+0x25c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d802      	bhi.n	800380c <HAL_I2C_Init+0xd4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3301      	adds	r3, #1
 800380a:	e009      	b.n	8003820 <HAL_I2C_Init+0xe8>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_I2C_Init+0x26c>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	3301      	adds	r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4956      	ldr	r1, [pc, #344]	; (8003994 <HAL_I2C_Init+0x25c>)
 800383c:	428b      	cmp	r3, r1
 800383e:	d80d      	bhi.n	800385c <HAL_I2C_Init+0x124>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e59      	subs	r1, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fbb1 f3f3 	udiv	r3, r1, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b04      	cmp	r3, #4
 8003856:	bf38      	it	cc
 8003858:	2304      	movcc	r3, #4
 800385a:	e04f      	b.n	80038fc <HAL_I2C_Init+0x1c4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <HAL_I2C_Init+0x150>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e012      	b.n	80038ae <HAL_I2C_Init+0x176>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Init+0x17e>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e022      	b.n	80038fc <HAL_I2C_Init+0x1c4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <HAL_I2C_Init+0x1a4>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1e58      	subs	r0, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	440b      	add	r3, r1
 80038cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038da:	e00f      	b.n	80038fc <HAL_I2C_Init+0x1c4>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	6809      	ldr	r1, [r1, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800392a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6911      	ldr	r1, [r2, #16]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	000186a0 	.word	0x000186a0
 8003998:	001e847f 	.word	0x001e847f
 800399c:	003d08ff 	.word	0x003d08ff
 80039a0:	431bde83 	.word	0x431bde83
 80039a4:	10624dd3 	.word	0x10624dd3

080039a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	461a      	mov	r2, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	817b      	strh	r3, [r7, #10]
 80039ba:	460b      	mov	r3, r1
 80039bc:	813b      	strh	r3, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c2:	f7fe fc41 	bl	8002248 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	f040 80d9 	bne.w	8003b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2319      	movs	r3, #25
 80039dc:	2201      	movs	r2, #1
 80039de:	496d      	ldr	r1, [pc, #436]	; (8003b94 <HAL_I2C_Mem_Write+0x1ec>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f002 f8e7 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
 80039ee:	e0cc      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_I2C_Mem_Write+0x56>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0c5      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d007      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2221      	movs	r2, #33	; 0x21
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a4d      	ldr	r2, [pc, #308]	; (8003b98 <HAL_I2C_Mem_Write+0x1f0>)
 8003a64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a66:	88f8      	ldrh	r0, [r7, #6]
 8003a68:	893a      	ldrh	r2, [r7, #8]
 8003a6a:	8979      	ldrh	r1, [r7, #10]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4603      	mov	r3, r0
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 fe76 	bl	8005768 <I2C_RequestMemoryWrite>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d052      	beq.n	8003b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e081      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f002 f968 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d107      	bne.n	8003aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06b      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d11b      	bne.n	8003b28 <HAL_I2C_Mem_Write+0x180>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d017      	beq.n	8003b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1aa      	bne.n	8003a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f002 f954 	bl	8005de2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d107      	bne.n	8003b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e016      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	00100002 	.word	0x00100002
 8003b98:	ffff0000 	.word	0xffff0000

08003b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	; 0x30
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	817b      	strh	r3, [r7, #10]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	813b      	strh	r3, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb6:	f7fe fb47 	bl	8002248 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	f040 8208 	bne.w	8003fda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2319      	movs	r3, #25
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	497b      	ldr	r1, [pc, #492]	; (8003dc0 <HAL_I2C_Mem_Read+0x224>)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f001 ffed 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003be0:	2302      	movs	r3, #2
 8003be2:	e1fb      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x56>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e1f4      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d007      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2222      	movs	r2, #34	; 0x22
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2240      	movs	r2, #64	; 0x40
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_I2C_Mem_Read+0x228>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c5a:	88f8      	ldrh	r0, [r7, #6]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4603      	mov	r3, r0
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f001 fe12 	bl	8005894 <I2C_RequestMemoryRead>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1b0      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d113      	bne.n	8003caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	623b      	str	r3, [r7, #32]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e184      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d11b      	bne.n	8003cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e164      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d11b      	bne.n	8003d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	e144      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d40:	e138      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	2b03      	cmp	r3, #3
 8003d48:	f200 80f1 	bhi.w	8003f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d123      	bne.n	8003d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f002 f8b5 	bl	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e139      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d9a:	e10b      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d14e      	bne.n	8003e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2200      	movs	r2, #0
 8003dac:	4906      	ldr	r1, [pc, #24]	; (8003dc8 <HAL_I2C_Mem_Read+0x22c>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f001 ff00 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e10e      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
 8003dbe:	bf00      	nop
 8003dc0:	00100002 	.word	0x00100002
 8003dc4:	ffff0000 	.word	0xffff0000
 8003dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e40:	e0b8      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4966      	ldr	r1, [pc, #408]	; (8003fe4 <HAL_I2C_Mem_Read+0x448>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f001 feb1 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0bf      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	494f      	ldr	r1, [pc, #316]	; (8003fe4 <HAL_I2C_Mem_Read+0x448>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f001 fe83 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e091      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f2c:	e042      	b.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f001 ffc8 	bl	8005ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e04c      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d118      	bne.n	8003fb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f47f aec2 	bne.w	8003d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3728      	adds	r7, #40	; 0x28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00010004 	.word	0x00010004

08003fe8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004008:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d003      	beq.n	8004020 <HAL_I2C_EV_IRQHandler+0x38>
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	f040 80bd 	bne.w	800419a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10d      	bne.n	8004056 <HAL_I2C_EV_IRQHandler+0x6e>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004040:	d003      	beq.n	800404a <HAL_I2C_EV_IRQHandler+0x62>
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004048:	d101      	bne.n	800404e <HAL_I2C_EV_IRQHandler+0x66>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_I2C_EV_IRQHandler+0x68>
 800404e:	2300      	movs	r3, #0
 8004050:	2b01      	cmp	r3, #1
 8004052:	f000 812e 	beq.w	80042b2 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_I2C_EV_IRQHandler+0x92>
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	0a5b      	lsrs	r3, r3, #9
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d006      	beq.n	800407a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 ffb0 	bl	8005fd2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fd62 	bl	8004b3c <I2C_Master_SB>
 8004078:	e08e      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_I2C_EV_IRQHandler+0xb2>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	0a5b      	lsrs	r3, r3, #9
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fdd8 	bl	8004c48 <I2C_Master_ADD10>
 8004098:	e07e      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0xd2>
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	0a5b      	lsrs	r3, r3, #9
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fdf2 	bl	8004c9c <I2C_Master_ADDR>
 80040b8:	e06e      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d037      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d4:	f000 80ef 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	09db      	lsrs	r3, r3, #7
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00f      	beq.n	8004104 <HAL_I2C_EV_IRQHandler+0x11c>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	0a9b      	lsrs	r3, r3, #10
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <HAL_I2C_EV_IRQHandler+0x11c>
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f9ef 	bl	80044e0 <I2C_MasterTransmit_TXE>
 8004102:	e049      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80d2 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	0a5b      	lsrs	r3, r3, #9
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 80cb 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004120:	7bfb      	ldrb	r3, [r7, #15]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d103      	bne.n	800412e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa76 	bl	8004618 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800412c:	e0c3      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fada 	bl	80046e8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004134:	e0bf      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	f000 80b7 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x18c>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x18c>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fb4a 	bl	8004806 <I2C_MasterReceive_RXNE>
 8004172:	e011      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 809a 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	0a5b      	lsrs	r3, r3, #9
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8093 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fbe9 	bl	8004968 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004196:	e08e      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004198:	e08d      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e007      	b.n	80041bc <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d012      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x206>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	0a5b      	lsrs	r3, r3, #9
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 ffa7 	bl	800513a <I2C_Slave_ADDR>
 80041ec:	e066      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x226>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	0a5b      	lsrs	r3, r3, #9
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 ffdc 	bl	80051c4 <I2C_Slave_STOPF>
 800420c:	e056      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800420e:	7bbb      	ldrb	r3, [r7, #14]
 8004210:	2b21      	cmp	r3, #33	; 0x21
 8004212:	d002      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x232>
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b29      	cmp	r3, #41	; 0x29
 8004218:	d125      	bne.n	8004266 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	09db      	lsrs	r3, r3, #7
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00f      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x25e>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	0a9b      	lsrs	r3, r3, #10
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x25e>
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 febd 	bl	8004fbe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004244:	e039      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d033      	beq.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d2>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	0a5b      	lsrs	r3, r3, #9
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02d      	beq.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 feea 	bl	8005038 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004264:	e029      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	099b      	lsrs	r3, r3, #6
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00f      	beq.n	8004292 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a9b      	lsrs	r3, r3, #10
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_I2C_EV_IRQHandler+0x2aa>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fef5 	bl	800507a <I2C_SlaveReceive_RXNE>
 8004290:	e014      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	0a5b      	lsrs	r3, r3, #9
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 ff23 	bl	80050f6 <I2C_SlaveReceive_BTF>
 80042b0:	e004      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b08a      	sub	sp, #40	; 0x28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00e      	beq.n	8004310 <HAL_I2C_ER_IRQHandler+0x4e>
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800430e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00e      	beq.n	800433a <HAL_I2C_ER_IRQHandler+0x78>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004338:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	0a9b      	lsrs	r3, r3, #10
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d03f      	beq.n	80043c6 <HAL_I2C_ER_IRQHandler+0x104>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d039      	beq.n	80043c6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004352:	7efb      	ldrb	r3, [r7, #27]
 8004354:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800436c:	7ebb      	ldrb	r3, [r7, #26]
 800436e:	2b20      	cmp	r3, #32
 8004370:	d112      	bne.n	8004398 <HAL_I2C_ER_IRQHandler+0xd6>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10f      	bne.n	8004398 <HAL_I2C_ER_IRQHandler+0xd6>
 8004378:	7cfb      	ldrb	r3, [r7, #19]
 800437a:	2b21      	cmp	r3, #33	; 0x21
 800437c:	d008      	beq.n	8004390 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800437e:	7cfb      	ldrb	r3, [r7, #19]
 8004380:	2b29      	cmp	r3, #41	; 0x29
 8004382:	d005      	beq.n	8004390 <HAL_I2C_ER_IRQHandler+0xce>
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	2b28      	cmp	r3, #40	; 0x28
 8004388:	d106      	bne.n	8004398 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b21      	cmp	r3, #33	; 0x21
 800438e:	d103      	bne.n	8004398 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f001 f847 	bl	8005424 <I2C_Slave_AF>
 8004396:	e016      	b.n	80043c6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 0304 	orr.w	r3, r3, #4
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043aa:	7efb      	ldrb	r3, [r7, #27]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d002      	beq.n	80043b6 <HAL_I2C_ER_IRQHandler+0xf4>
 80043b0:	7efb      	ldrb	r3, [r7, #27]
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d107      	bne.n	80043c6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	0adb      	lsrs	r3, r3, #11
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00e      	beq.n	80043f0 <HAL_I2C_ER_IRQHandler+0x12e>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 f87e 	bl	8005504 <I2C_ITError>
  }
}
 8004408:	bf00      	nop
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
 800446c:	4613      	mov	r3, r2
 800446e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	2b00      	cmp	r3, #0
 8004504:	d150      	bne.n	80045a8 <I2C_MasterTransmit_TXE+0xc8>
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b21      	cmp	r3, #33	; 0x21
 800450a:	d14d      	bne.n	80045a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d01d      	beq.n	800454e <I2C_MasterTransmit_TXE+0x6e>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b20      	cmp	r3, #32
 8004516:	d01a      	beq.n	800454e <I2C_MasterTransmit_TXE+0x6e>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451e:	d016      	beq.n	800454e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800452e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2211      	movs	r2, #17
 8004534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ff62 	bl	8004410 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800454c:	e060      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d107      	bne.n	8004598 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff7d 	bl	8004490 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004596:	e03b      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff35 	bl	8004410 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045a6:	e033      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b21      	cmp	r3, #33	; 0x21
 80045ac:	d005      	beq.n	80045ba <I2C_MasterTransmit_TXE+0xda>
 80045ae:	7bbb      	ldrb	r3, [r7, #14]
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d12d      	bne.n	8004610 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b22      	cmp	r3, #34	; 0x22
 80045b8:	d12a      	bne.n	8004610 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d108      	bne.n	80045d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045d4:	e01c      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d103      	bne.n	80045ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f880 	bl	80046e8 <I2C_MemoryTransmit_TXE_BTF>
}
 80045e8:	e012      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800460e:	e7ff      	b.n	8004610 <I2C_MasterTransmit_TXE+0x130>
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b21      	cmp	r3, #33	; 0x21
 8004630:	d156      	bne.n	80046e0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004660:	e03e      	b.n	80046e0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b08      	cmp	r3, #8
 8004666:	d01d      	beq.n	80046a4 <I2C_MasterTransmit_BTF+0x8c>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b20      	cmp	r3, #32
 800466c:	d01a      	beq.n	80046a4 <I2C_MasterTransmit_BTF+0x8c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004674:	d016      	beq.n	80046a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004684:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2211      	movs	r2, #17
 800468a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff feb7 	bl	8004410 <HAL_I2C_MasterTxCpltCallback>
}
 80046a2:	e01d      	b.n	80046e0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fe98 	bl	8004410 <HAL_I2C_MasterTxCpltCallback>
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d11d      	bne.n	800473c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10b      	bne.n	8004720 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470c:	b2da      	uxtb	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	1c9a      	adds	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800471e:	e06e      	b.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	b29b      	uxth	r3, r3
 8004726:	121b      	asrs	r3, r3, #8
 8004728:	b2da      	uxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800473a:	e060      	b.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004740:	2b01      	cmp	r3, #1
 8004742:	d10b      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800475a:	e050      	b.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	2b02      	cmp	r3, #2
 8004762:	d14c      	bne.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b22      	cmp	r3, #34	; 0x22
 8004768:	d108      	bne.n	800477c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	e040      	b.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b21      	cmp	r3, #33	; 0x21
 800478a:	d112      	bne.n	80047b2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047b0:	e025      	b.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d120      	bne.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b21      	cmp	r3, #33	; 0x21
 80047c0:	d11d      	bne.n	80047fe <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fe49 	bl	8004490 <HAL_I2C_MemTxCpltCallback>
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b22      	cmp	r3, #34	; 0x22
 8004818:	f040 80a2 	bne.w	8004960 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d921      	bls.n	800486e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b03      	cmp	r3, #3
 8004858:	f040 8082 	bne.w	8004960 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800486c:	e078      	b.n	8004960 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	2b02      	cmp	r3, #2
 8004874:	d074      	beq.n	8004960 <I2C_MasterReceive_RXNE+0x15a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d002      	beq.n	8004882 <I2C_MasterReceive_RXNE+0x7c>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d16e      	bne.n	8004960 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 faee 	bl	8005e64 <I2C_WaitOnSTOPRequestThroughIT>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d142      	bne.n	8004914 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d10a      	bne.n	80048fe <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fdd4 	bl	80044a4 <HAL_I2C_MemRxCpltCallback>
}
 80048fc:	e030      	b.n	8004960 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2212      	movs	r2, #18
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff fd89 	bl	8004424 <HAL_I2C_MasterRxCpltCallback>
}
 8004912:	e025      	b.n	8004960 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004922:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fdac 	bl	80044b8 <HAL_I2C_ErrorCallback>
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b04      	cmp	r3, #4
 800497e:	d11b      	bne.n	80049b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049b6:	e0bd      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d129      	bne.n	8004a16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d00a      	beq.n	80049ee <I2C_MasterReceive_BTF+0x86>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d007      	beq.n	80049ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a14:	e08e      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d176      	bne.n	8004b0e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <I2C_MasterReceive_BTF+0xc4>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d108      	bne.n	8004a3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e019      	b.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d002      	beq.n	8004a4a <I2C_MasterReceive_BTF+0xe2>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d108      	bne.n	8004a5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e00a      	b.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d007      	beq.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004acc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d10a      	bne.n	8004af8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff fcd7 	bl	80044a4 <HAL_I2C_MemRxCpltCallback>
}
 8004af6:	e01d      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2212      	movs	r2, #18
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fc8c 	bl	8004424 <HAL_I2C_MasterRxCpltCallback>
}
 8004b0c:	e012      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d117      	bne.n	8004b80 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b68:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b6a:	e067      	b.n	8004c3c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
}
 8004b7e:	e05d      	b.n	8004c3c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b88:	d133      	bne.n	8004bf2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b21      	cmp	r3, #33	; 0x21
 8004b94:	d109      	bne.n	8004baa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba6:	611a      	str	r2, [r3, #16]
 8004ba8:	e008      	b.n	8004bbc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <I2C_Master_SB+0x92>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d032      	beq.n	8004c3c <I2C_Master_SB+0x100>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02d      	beq.n	8004c3c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	605a      	str	r2, [r3, #4]
}
 8004bf0:	e024      	b.n	8004c3c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10e      	bne.n	8004c18 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	11db      	asrs	r3, r3, #7
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 0306 	and.w	r3, r3, #6
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f063 030f 	orn	r3, r3, #15
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	611a      	str	r2, [r3, #16]
}
 8004c16:	e011      	b.n	8004c3c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10d      	bne.n	8004c3c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	11db      	asrs	r3, r3, #7
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0306 	and.w	r3, r3, #6
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f063 030e 	orn	r3, r3, #14
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <I2C_Master_ADD10+0x24>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <I2C_Master_ADD10+0x38>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b091      	sub	sp, #68	; 0x44
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004caa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	f040 8169 	bne.w	8004f9a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <I2C_Master_ADDR+0x54>
 8004cd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d10b      	bne.n	8004cf0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	e160      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11d      	bne.n	8004d34 <I2C_Master_ADDR+0x98>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d00:	d118      	bne.n	8004d34 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d26:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
 8004d32:	e13e      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d113      	bne.n	8004d66 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e115      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 808a 	bne.w	8004e86 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d78:	d137      	bne.n	8004dea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d98:	d113      	bne.n	8004dc2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	e0e7      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e0d3      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d02e      	beq.n	8004e4e <I2C_Master_ADDR+0x1b2>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d02b      	beq.n	8004e4e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	2b12      	cmp	r3, #18
 8004dfa:	d102      	bne.n	8004e02 <I2C_Master_ADDR+0x166>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d125      	bne.n	8004e4e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d00e      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d00b      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d008      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e007      	b.n	8004e36 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	e0a1      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e085      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d14d      	bne.n	8004f2c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d016      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d013      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d010      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e007      	b.n	8004ed4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d117      	bne.n	8004f14 <I2C_Master_ADDR+0x278>
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eea:	d00b      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d008      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d005      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d002      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d107      	bne.n	8004f14 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	e032      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f3a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d117      	bne.n	8004f7c <I2C_Master_ADDR+0x2e0>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f52:	d00b      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d008      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d005      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d002      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d107      	bne.n	8004f7c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f98:	e00b      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	e7ff      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
 8004fb2:	bf00      	nop
 8004fb4:	3744      	adds	r7, #68	; 0x44
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02b      	beq.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d114      	bne.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b29      	cmp	r3, #41	; 0x29
 800500a:	d111      	bne.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2221      	movs	r2, #33	; 0x21
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2228      	movs	r2, #40	; 0x28
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff fa04 	bl	8004438 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02c      	beq.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b2a      	cmp	r3, #42	; 0x2a
 80050c8:	d111      	bne.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2222      	movs	r2, #34	; 0x22
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2228      	movs	r2, #40	; 0x28
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff f9af 	bl	800444c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005154:	2b28      	cmp	r3, #40	; 0x28
 8005156:	d127      	bne.n	80051a8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	09db      	lsrs	r3, r3, #7
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	81bb      	strh	r3, [r7, #12]
 800518a:	e002      	b.n	8005192 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800519a:	89ba      	ldrh	r2, [r7, #12]
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f95d 	bl	8004460 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051a6:	e008      	b.n	80051ba <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051e4:	2300      	movs	r3, #0
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005220:	d172      	bne.n	8005308 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005222:	7bfb      	ldrb	r3, [r7, #15]
 8005224:	2b22      	cmp	r3, #34	; 0x22
 8005226:	d002      	beq.n	800522e <I2C_Slave_STOPF+0x6a>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b2a      	cmp	r3, #42	; 0x2a
 800522c:	d135      	bne.n	800529a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f043 0204 	orr.w	r2, r3, #4
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005260:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4618      	mov	r0, r3
 8005268:	f7fd ffc6 	bl	80031f8 <HAL_DMA_GetState>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d049      	beq.n	8005306 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	4a69      	ldr	r2, [pc, #420]	; (800541c <I2C_Slave_STOPF+0x258>)
 8005278:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	4618      	mov	r0, r3
 8005280:	f7fd fe0e 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03d      	beq.n	8005306 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005298:	e035      	b.n	8005306 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0204 	orr.w	r2, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fd ff90 	bl	80031f8 <HAL_DMA_GetState>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d014      	beq.n	8005308 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	4a4e      	ldr	r2, [pc, #312]	; (800541c <I2C_Slave_STOPF+0x258>)
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fdd8 	bl	8002ea0 <HAL_DMA_Abort_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
 8005304:	e000      	b.n	8005308 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005306:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d03e      	beq.n	8005390 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f003 0304 	and.w	r3, r3, #4
 800531c:	2b04      	cmp	r3, #4
 800531e:	d112      	bne.n	8005346 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d112      	bne.n	800537a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	f043 0204 	orr.w	r2, r3, #4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8b3 	bl	8005504 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800539e:	e039      	b.n	8005414 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	2b2a      	cmp	r3, #42	; 0x2a
 80053a4:	d109      	bne.n	80053ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2228      	movs	r2, #40	; 0x28
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff f849 	bl	800444c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b28      	cmp	r3, #40	; 0x28
 80053c4:	d111      	bne.n	80053ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <I2C_Slave_STOPF+0x25c>)
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff f84a 	bl	800447c <HAL_I2C_ListenCpltCallback>
}
 80053e8:	e014      	b.n	8005414 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	2b22      	cmp	r3, #34	; 0x22
 80053f0:	d002      	beq.n	80053f8 <I2C_Slave_STOPF+0x234>
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	2b22      	cmp	r3, #34	; 0x22
 80053f6:	d10d      	bne.n	8005414 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff f81c 	bl	800444c <HAL_I2C_SlaveRxCpltCallback>
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	08005a65 	.word	0x08005a65
 8005420:	ffff0000 	.word	0xffff0000

08005424 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005432:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d002      	beq.n	8005446 <I2C_Slave_AF+0x22>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b20      	cmp	r3, #32
 8005444:	d129      	bne.n	800549a <I2C_Slave_AF+0x76>
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	2b28      	cmp	r3, #40	; 0x28
 800544a:	d126      	bne.n	800549a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2c      	ldr	r2, [pc, #176]	; (8005500 <I2C_Slave_AF+0xdc>)
 8005450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005460:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800546a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe fff2 	bl	800447c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005498:	e02e      	b.n	80054f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b21      	cmp	r3, #33	; 0x21
 800549e:	d126      	bne.n	80054ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a17      	ldr	r2, [pc, #92]	; (8005500 <I2C_Slave_AF+0xdc>)
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fe ffa6 	bl	8004438 <HAL_I2C_SlaveTxCpltCallback>
}
 80054ec:	e004      	b.n	80054f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f6:	615a      	str	r2, [r3, #20]
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	ffff0000 	.word	0xffff0000

08005504 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800551a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	2b10      	cmp	r3, #16
 8005520:	d002      	beq.n	8005528 <I2C_ITError+0x24>
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10a      	bne.n	800553e <I2C_ITError+0x3a>
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2b22      	cmp	r3, #34	; 0x22
 800552c:	d107      	bne.n	800553e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005544:	2b28      	cmp	r3, #40	; 0x28
 8005546:	d107      	bne.n	8005558 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2228      	movs	r2, #40	; 0x28
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005556:	e015      	b.n	8005584 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005566:	d00a      	beq.n	800557e <I2C_ITError+0x7a>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b60      	cmp	r3, #96	; 0x60
 800556c:	d007      	beq.n	800557e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d162      	bne.n	800565a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d020      	beq.n	80055f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	4a6a      	ldr	r2, [pc, #424]	; (8005760 <I2C_ITError+0x25c>)
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd fc6e 	bl	8002ea0 <HAL_DMA_Abort_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8089 	beq.w	80056de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ee:	4610      	mov	r0, r2
 80055f0:	4798      	blx	r3
 80055f2:	e074      	b.n	80056de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	4a59      	ldr	r2, [pc, #356]	; (8005760 <I2C_ITError+0x25c>)
 80055fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	4618      	mov	r0, r3
 8005602:	f7fd fc4d 	bl	8002ea0 <HAL_DMA_Abort_IT>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d068      	beq.n	80056de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d10b      	bne.n	8005632 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
 8005658:	e041      	b.n	80056de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b60      	cmp	r3, #96	; 0x60
 8005664:	d125      	bne.n	80056b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d10b      	bne.n	800569a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0201 	bic.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fe ff0e 	bl	80044cc <HAL_I2C_AbortCpltCallback>
 80056b0:	e015      	b.n	80056de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d10b      	bne.n	80056d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691a      	ldr	r2, [r3, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7fe feed 	bl	80044b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10e      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800571a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005722:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b04      	cmp	r3, #4
 800572e:	d113      	bne.n	8005758 <I2C_ITError+0x254>
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b28      	cmp	r3, #40	; 0x28
 8005734:	d110      	bne.n	8005758 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <I2C_ITError+0x260>)
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fe fe92 	bl	800447c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005758:	bf00      	nop
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	08005a65 	.word	0x08005a65
 8005764:	ffff0000 	.word	0xffff0000

08005768 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005790:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	2200      	movs	r2, #0
 800579a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 fa08 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b8:	d103      	bne.n	80057c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e05f      	b.n	8005886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c6:	897b      	ldrh	r3, [r7, #10]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	492d      	ldr	r1, [pc, #180]	; (8005890 <I2C_RequestMemoryWrite+0x128>)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fa40 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e04c      	b.n	8005886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	6a39      	ldr	r1, [r7, #32]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 faaa 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	2b04      	cmp	r3, #4
 8005818:	d107      	bne.n	800582a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005828:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e02b      	b.n	8005886 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800582e:	88fb      	ldrh	r3, [r7, #6]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d105      	bne.n	8005840 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005834:	893b      	ldrh	r3, [r7, #8]
 8005836:	b2da      	uxtb	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	611a      	str	r2, [r3, #16]
 800583e:	e021      	b.n	8005884 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005840:	893b      	ldrh	r3, [r7, #8]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	b29b      	uxth	r3, r3
 8005846:	b2da      	uxtb	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005850:	6a39      	ldr	r1, [r7, #32]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fa84 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b04      	cmp	r3, #4
 8005864:	d107      	bne.n	8005876 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005874:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e005      	b.n	8005886 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800587a:	893b      	ldrh	r3, [r7, #8]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	00010002 	.word	0x00010002

08005894 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	460b      	mov	r3, r1
 80058a8:	813b      	strh	r3, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f96a 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f4:	d103      	bne.n	80058fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0aa      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005902:	897b      	ldrh	r3, [r7, #10]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	4952      	ldr	r1, [pc, #328]	; (8005a60 <I2C_RequestMemoryRead+0x1cc>)
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f9a2 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e097      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	6a39      	ldr	r1, [r7, #32]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fa0c 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00d      	beq.n	800596a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b04      	cmp	r3, #4
 8005954:	d107      	bne.n	8005966 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e076      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d105      	bne.n	800597c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005970:	893b      	ldrh	r3, [r7, #8]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]
 800597a:	e021      	b.n	80059c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800597c:	893b      	ldrh	r3, [r7, #8]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	b29b      	uxth	r3, r3
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	6a39      	ldr	r1, [r7, #32]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f9e6 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00d      	beq.n	80059b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d107      	bne.n	80059b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e050      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b6:	893b      	ldrh	r3, [r7, #8]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c2:	6a39      	ldr	r1, [r7, #32]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f9cb 	bl	8005d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00d      	beq.n	80059ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d107      	bne.n	80059e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e035      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f8d3 	bl	8005bb4 <I2C_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00d      	beq.n	8005a30 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a22:	d103      	bne.n	8005a2c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e013      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a30:	897b      	ldrh	r3, [r7, #10]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	4906      	ldr	r1, [pc, #24]	; (8005a60 <I2C_RequestMemoryRead+0x1cc>)
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f90b 	bl	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	00010002 	.word	0x00010002

08005a64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a7e:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <I2C_DMAAbort+0x148>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	08db      	lsrs	r3, r3, #3
 8005a84:	4a4a      	ldr	r2, [pc, #296]	; (8005bb0 <I2C_DMAAbort+0x14c>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0a1a      	lsrs	r2, r3, #8
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00da      	lsls	r2, r3, #3
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005aaa:	e00a      	b.n	8005ac2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d0ea      	beq.n	8005a98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	2200      	movs	r2, #0
 8005ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	2200      	movs	r2, #0
 8005ae0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2200      	movs	r2, #0
 8005af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	2200      	movs	r2, #0
 8005b06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	2200      	movs	r2, #0
 8005b16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d10e      	bne.n	8005b52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b4a:	6978      	ldr	r0, [r7, #20]
 8005b4c:	f7fe fcbe 	bl	80044cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b50:	e027      	b.n	8005ba2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b52:	7cfb      	ldrb	r3, [r7, #19]
 8005b54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b58:	2b28      	cmp	r3, #40	; 0x28
 8005b5a:	d117      	bne.n	8005b8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2228      	movs	r2, #40	; 0x28
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b8a:	e007      	b.n	8005b9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b9c:	6978      	ldr	r0, [r7, #20]
 8005b9e:	f7fe fc8b 	bl	80044b8 <HAL_I2C_ErrorCallback>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000090 	.word	0x20000090
 8005bb0:	14f8b589 	.word	0x14f8b589

08005bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc4:	e025      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d021      	beq.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bce:	f7fc fb3b 	bl	8002248 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d302      	bcc.n	8005be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d116      	bne.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f043 0220 	orr.w	r2, r3, #32
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e023      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	0c1b      	lsrs	r3, r3, #16
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10d      	bne.n	8005c38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	43da      	mvns	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4013      	ands	r3, r2
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf0c      	ite	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	2300      	movne	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	e00c      	b.n	8005c52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	43da      	mvns	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bf0c      	ite	eq
 8005c4a:	2301      	moveq	r3, #1
 8005c4c:	2300      	movne	r3, #0
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d0b6      	beq.n	8005bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c70:	e051      	b.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c80:	d123      	bne.n	8005cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f043 0204 	orr.w	r2, r3, #4
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e046      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d021      	beq.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fc fab9 	bl	8002248 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d116      	bne.n	8005d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0220 	orr.w	r2, r3, #32
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e020      	b.n	8005d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10c      	bne.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	43da      	mvns	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	bf14      	ite	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	2300      	moveq	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	e00b      	b.n	8005d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	43da      	mvns	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d18d      	bne.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d6c:	e02d      	b.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f900 	bl	8005f74 <I2C_IsAcknowledgeFailed>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02d      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d021      	beq.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d86:	f7fc fa5f 	bl	8002248 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e007      	b.n	8005dda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d1ca      	bne.n	8005d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dee:	e02d      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f8bf 	bl	8005f74 <I2C_IsAcknowledgeFailed>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e02d      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d021      	beq.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e08:	f7fc fa1e 	bl	8002248 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d116      	bne.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e007      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d1ca      	bne.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e70:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	08db      	lsrs	r3, r3, #3
 8005e76:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	0a1a      	lsrs	r2, r3, #8
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e008      	b.n	8005eb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb0:	d0e9      	beq.n	8005e86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	20000090 	.word	0x20000090
 8005ec4:	14f8b589 	.word	0x14f8b589

08005ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ed4:	e042      	b.n	8005f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b10      	cmp	r3, #16
 8005ee2:	d119      	bne.n	8005f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0210 	mvn.w	r2, #16
 8005eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e029      	b.n	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f18:	f7fc f996 	bl	8002248 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d116      	bne.n	8005f5c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e007      	b.n	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	d1b5      	bne.n	8005ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	d11b      	bne.n	8005fc4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f94:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f043 0204 	orr.w	r2, r3, #4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005fe2:	d103      	bne.n	8005fec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005fea:	e007      	b.n	8005ffc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ff4:	d102      	bne.n	8005ffc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600a:	b08f      	sub	sp, #60	; 0x3c
 800600c:	af0a      	add	r7, sp, #40	; 0x28
 800600e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e10f      	b.n	800623a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f005 fa0b 	bl	800b450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f002 f9d8 	bl	800840e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	687e      	ldr	r6, [r7, #4]
 8006066:	466d      	mov	r5, sp
 8006068:	f106 0410 	add.w	r4, r6, #16
 800606c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800606e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006078:	e885 0003 	stmia.w	r5, {r0, r1}
 800607c:	1d33      	adds	r3, r6, #4
 800607e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006080:	6838      	ldr	r0, [r7, #0]
 8006082:	f002 f8af 	bl	80081e4 <USB_CoreInit>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0d0      	b.n	800623a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f002 f9c6 	bl	8008430 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
 80060a8:	e04a      	b.n	8006140 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	333d      	adds	r3, #61	; 0x3d
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	333c      	adds	r3, #60	; 0x3c
 80060ce:	7bfa      	ldrb	r2, [r7, #15]
 80060d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	7bfb      	ldrb	r3, [r7, #15]
 80060d6:	b298      	uxth	r0, r3
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3342      	adds	r3, #66	; 0x42
 80060e6:	4602      	mov	r2, r0
 80060e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ea:	7bfa      	ldrb	r2, [r7, #15]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	1a9b      	subs	r3, r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	440b      	add	r3, r1
 80060f8:	333f      	adds	r3, #63	; 0x3f
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060fe:	7bfa      	ldrb	r2, [r7, #15]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	440b      	add	r3, r1
 800610c:	3344      	adds	r3, #68	; 0x44
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006112:	7bfa      	ldrb	r2, [r7, #15]
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3348      	adds	r3, #72	; 0x48
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006126:	7bfa      	ldrb	r2, [r7, #15]
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	4613      	mov	r3, r2
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	1a9b      	subs	r3, r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	440b      	add	r3, r1
 8006134:	3350      	adds	r3, #80	; 0x50
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	3301      	adds	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
 8006140:	7bfa      	ldrb	r2, [r7, #15]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3af      	bcc.n	80060aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
 800614e:	e044      	b.n	80061da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006150:	7bfa      	ldrb	r2, [r7, #15]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006166:	7bfa      	ldrb	r2, [r7, #15]
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	440b      	add	r3, r1
 8006174:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006178:	7bfa      	ldrb	r2, [r7, #15]
 800617a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	6879      	ldr	r1, [r7, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	00db      	lsls	r3, r3, #3
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061a8:	7bfa      	ldrb	r2, [r7, #15]
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	1a9b      	subs	r3, r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	3301      	adds	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	7bfa      	ldrb	r2, [r7, #15]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3b5      	bcc.n	8006150 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	687e      	ldr	r6, [r7, #4]
 80061ec:	466d      	mov	r5, sp
 80061ee:	f106 0410 	add.w	r4, r6, #16
 80061f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8006202:	1d33      	adds	r3, r6, #4
 8006204:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006206:	6838      	ldr	r0, [r7, #0]
 8006208:	f002 f93c 	bl	8008484 <USB_DevInit>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e00d      	b.n	800623a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f003 f984 	bl	8009540 <USB_DevDisconnect>

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_PCD_Start+0x1c>
 800625a:	2302      	movs	r3, #2
 800625c:	e020      	b.n	80062a0 <HAL_PCD_Start+0x5e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	2b01      	cmp	r3, #1
 800626c:	d109      	bne.n	8006282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006272:	2b01      	cmp	r3, #1
 8006274:	d005      	beq.n	8006282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f002 f8b0 	bl	80083ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f003 f934 	bl	80094fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b08d      	sub	sp, #52	; 0x34
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f003 f9f2 	bl	80096a8 <USB_GetMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f040 839d 	bne.w	8006a06 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f003 f956 	bl	8009582 <USB_ReadInterrupts>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8393 	beq.w	8006a04 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 f94d 	bl	8009582 <USB_ReadInterrupts>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d107      	bne.n	8006302 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f002 0202 	and.w	r2, r2, #2
 8006300:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f003 f93b 	bl	8009582 <USB_ReadInterrupts>
 800630c:	4603      	mov	r3, r0
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b10      	cmp	r3, #16
 8006314:	d161      	bne.n	80063da <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0210 	bic.w	r2, r2, #16
 8006324:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	0c5b      	lsrs	r3, r3, #17
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	2b02      	cmp	r3, #2
 8006350:	d124      	bne.n	800639c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d035      	beq.n	80063ca <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6a38      	ldr	r0, [r7, #32]
 8006372:	f002 ffa1 	bl	80092b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006382:	441a      	add	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006394:	441a      	add	r2, r3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	619a      	str	r2, [r3, #24]
 800639a:	e016      	b.n	80063ca <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	0c5b      	lsrs	r3, r3, #17
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	2b06      	cmp	r3, #6
 80063a6:	d110      	bne.n	80063ca <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063ae:	2208      	movs	r2, #8
 80063b0:	4619      	mov	r1, r3
 80063b2:	6a38      	ldr	r0, [r7, #32]
 80063b4:	f002 ff80 	bl	80092b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c4:	441a      	add	r2, r3
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0210 	orr.w	r2, r2, #16
 80063d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f003 f8cf 	bl	8009582 <USB_ReadInterrupts>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063ee:	d16e      	bne.n	80064ce <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f003 f8d5 	bl	80095a8 <USB_ReadDevAllOutEpInterrupt>
 80063fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006400:	e062      	b.n	80064c8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d057      	beq.n	80064bc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	4611      	mov	r1, r2
 8006416:	4618      	mov	r0, r3
 8006418:	f003 f8fa 	bl	8009610 <USB_ReadDevOutEPInterrupt>
 800641c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00c      	beq.n	8006442 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	461a      	mov	r2, r3
 8006436:	2301      	movs	r3, #1
 8006438:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800643a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fdb1 	bl	8006fa4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	461a      	mov	r2, r3
 800645a:	2308      	movs	r3, #8
 800645c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800645e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 feab 	bl	80071bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	2310      	movs	r3, #16
 8006480:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2320      	movs	r3, #32
 800649c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d009      	beq.n	80064bc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	3301      	adds	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	085b      	lsrs	r3, r3, #1
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d199      	bne.n	8006402 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f003 f855 	bl	8009582 <USB_ReadInterrupts>
 80064d8:	4603      	mov	r3, r0
 80064da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064e2:	f040 80c0 	bne.w	8006666 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f003 f876 	bl	80095dc <USB_ReadDevAllInEpInterrupt>
 80064f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80064f6:	e0b2      	b.n	800665e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80a7 	beq.w	8006652 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f003 f89c 	bl	800964c <USB_ReadDevInEPInterrupt>
 8006514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d057      	beq.n	80065d0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	43db      	mvns	r3, r3
 800653a:	69f9      	ldr	r1, [r7, #28]
 800653c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006540:	4013      	ands	r3, r2
 8006542:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	2301      	movs	r3, #1
 8006554:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d132      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	3348      	adds	r3, #72	; 0x48
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4403      	add	r3, r0
 800657e:	3344      	adds	r3, #68	; 0x44
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4419      	add	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006588:	4613      	mov	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4403      	add	r3, r0
 8006592:	3348      	adds	r3, #72	; 0x48
 8006594:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d113      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x31c>
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	3350      	adds	r3, #80	; 0x50
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d108      	bne.n	80065c4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065bc:	461a      	mov	r2, r3
 80065be:	2101      	movs	r1, #1
 80065c0:	f003 f8a4 	bl	800970c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f004 ffc1 	bl	800b552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	461a      	mov	r2, r3
 80065e8:	2308      	movs	r3, #8
 80065ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f003 0310 	and.w	r3, r3, #16
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	461a      	mov	r2, r3
 8006604:	2310      	movs	r3, #16
 8006606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d008      	beq.n	8006624 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661e:	461a      	mov	r2, r3
 8006620:	2340      	movs	r3, #64	; 0x40
 8006622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d008      	beq.n	8006640 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	2302      	movs	r3, #2
 800663e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800664a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc1b 	bl	8006e88 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	3301      	adds	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	f47f af49 	bne.w	80064f8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f002 ff89 	bl	8009582 <USB_ReadInterrupts>
 8006670:	4603      	mov	r3, r0
 8006672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800667a:	d122      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006696:	2b01      	cmp	r3, #1
 8006698:	d108      	bne.n	80066ac <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fe27 	bl	80072f8 <HAL_PCDEx_LPM_Callback>
 80066aa:	e002      	b.n	80066b2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f004 ffbd 	bl	800b62c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80066c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f002 ff5b 	bl	8009582 <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d6:	d112      	bne.n	80066fe <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d102      	bne.n	80066ee <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f004 ff79 	bl	800b5e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80066fc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f002 ff3d 	bl	8009582 <USB_ReadInterrupts>
 8006708:	4603      	mov	r3, r0
 800670a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800670e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006712:	f040 80c7 	bne.w	80068a4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2110      	movs	r1, #16
 8006730:	4618      	mov	r0, r3
 8006732:	f002 f80b 	bl	800874c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	e056      	b.n	80067ea <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	461a      	mov	r2, r3
 800674a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800674e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800676e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800678e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	461a      	mov	r2, r3
 800679e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067b4:	0151      	lsls	r1, r2, #5
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	440a      	add	r2, r1
 80067ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d4:	0151      	lsls	r1, r2, #5
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	440a      	add	r2, r1
 80067da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	3301      	adds	r3, #1
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d3a3      	bcc.n	800673c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006802:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006806:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d016      	beq.n	800683e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006820:	f043 030b 	orr.w	r3, r3, #11
 8006824:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006836:	f043 030b 	orr.w	r3, r3, #11
 800683a:	6453      	str	r3, [r2, #68]	; 0x44
 800683c:	e015      	b.n	800686a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800684c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006850:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006854:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	69fa      	ldr	r2, [r7, #28]
 8006860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006864:	f043 030b 	orr.w	r3, r3, #11
 8006868:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006878:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800687c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800688e:	461a      	mov	r2, r3
 8006890:	f002 ff3c 	bl	800970c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695a      	ldr	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80068a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f002 fe6a 	bl	8009582 <USB_ReadInterrupts>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068b8:	d124      	bne.n	8006904 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f002 ff00 	bl	80096c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 ffa0 	bl	800880e <USB_GetDevSpeed>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681c      	ldr	r4, [r3, #0]
 80068da:	f001 f921 	bl	8007b20 <HAL_RCC_GetHCLKFreq>
 80068de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	4620      	mov	r0, r4
 80068ea:	f001 fcdd 	bl	80082a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f004 fe57 	bl	800b5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006902:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f002 fe3a 	bl	8009582 <USB_ReadInterrupts>
 800690e:	4603      	mov	r3, r0
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b08      	cmp	r3, #8
 8006916:	d10a      	bne.n	800692e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f004 fe34 	bl	800b586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f002 0208 	and.w	r2, r2, #8
 800692c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f002 fe25 	bl	8009582 <USB_ReadInterrupts>
 8006938:	4603      	mov	r3, r0
 800693a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006942:	d10f      	bne.n	8006964 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f004 fe8c 	bl	800b66c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f002 fe0a 	bl	8009582 <USB_ReadInterrupts>
 800696e:	4603      	mov	r3, r0
 8006970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006974:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006978:	d10f      	bne.n	800699a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f004 fe5f 	bl	800b648 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f002 fdef 	bl	8009582 <USB_ReadInterrupts>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ae:	d10a      	bne.n	80069c6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f004 fe6d 	bl	800b690 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80069c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f002 fdd9 	bl	8009582 <USB_ReadInterrupts>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d115      	bne.n	8006a06 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f004 fe5d 	bl	800b6ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6859      	ldr	r1, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	e000      	b.n	8006a06 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006a04:	bf00      	nop
    }
  }
}
 8006a06:	3734      	adds	r7, #52	; 0x34
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd90      	pop	{r4, r7, pc}

08006a0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_PCD_SetAddress+0x1a>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e013      	b.n	8006a4e <HAL_PCD_SetAddress+0x42>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 fd37 	bl	80094b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	4608      	mov	r0, r1
 8006a60:	4611      	mov	r1, r2
 8006a62:	461a      	mov	r2, r3
 8006a64:	4603      	mov	r3, r0
 8006a66:	70fb      	strb	r3, [r7, #3]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	803b      	strh	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da0f      	bge.n	8006a9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	4613      	mov	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	3338      	adds	r3, #56	; 0x38
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3304      	adds	r3, #4
 8006a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	705a      	strb	r2, [r3, #1]
 8006a9a:	e00f      	b.n	8006abc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a9c:	78fb      	ldrb	r3, [r7, #3]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006ac8:	883a      	ldrh	r2, [r7, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	78ba      	ldrb	r2, [r7, #2]
 8006ad2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ae6:	78bb      	ldrb	r3, [r7, #2]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d102      	bne.n	8006af2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_PCD_EP_Open+0xaa>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e00e      	b.n	8006b1e <HAL_PCD_EP_Open+0xc8>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fea2 	bl	8008858 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da0f      	bge.n	8006b5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	f003 020f 	and.w	r2, r3, #15
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	1a9b      	subs	r3, r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	3338      	adds	r3, #56	; 0x38
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3304      	adds	r3, #4
 8006b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2201      	movs	r2, #1
 8006b56:	705a      	strb	r2, [r3, #1]
 8006b58:	e00f      	b.n	8006b7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	3304      	adds	r3, #4
 8006b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_PCD_EP_Close+0x6e>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e00e      	b.n	8006bb2 <HAL_PCD_EP_Close+0x8c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68f9      	ldr	r1, [r7, #12]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f001 fee0 	bl	8008968 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006bca:	7afb      	ldrb	r3, [r7, #11]
 8006bcc:	f003 020f 	and.w	r2, r3, #15
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	3304      	adds	r3, #4
 8006be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	f003 030f 	and.w	r3, r3, #15
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	f002 f9bb 	bl	8008fa8 <USB_EP0StartXfer>
 8006c32:	e008      	b.n	8006c46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	f001 ff6d 	bl	8008b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	f003 020f 	and.w	r2, r3, #15
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006c72:	681b      	ldr	r3, [r3, #0]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	3338      	adds	r3, #56	; 0x38
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d102      	bne.n	8006cda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cda:	7afb      	ldrb	r3, [r7, #11]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	6979      	ldr	r1, [r7, #20]
 8006cf2:	f002 f959 	bl	8008fa8 <USB_EP0StartXfer>
 8006cf6:	e008      	b.n	8006d0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	f001 ff0b 	bl	8008b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	f003 020f 	and.w	r2, r3, #15
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d901      	bls.n	8006d32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e050      	b.n	8006dd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	da0f      	bge.n	8006d5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	4613      	mov	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	3338      	adds	r3, #56	; 0x38
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	705a      	strb	r2, [r3, #1]
 8006d58:	e00d      	b.n	8006d76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	1a9b      	subs	r3, r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_PCD_EP_SetStall+0x82>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e01e      	b.n	8006dd4 <HAL_PCD_EP_SetStall+0xc0>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 fab0 	bl	800930a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	b2d9      	uxtb	r1, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	f002 fca1 	bl	800970c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d901      	bls.n	8006dfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e042      	b.n	8006e80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da0f      	bge.n	8006e22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	3338      	adds	r3, #56	; 0x38
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4413      	add	r3, r2
 8006e16:	3304      	adds	r3, #4
 8006e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	705a      	strb	r2, [r3, #1]
 8006e20:	e00f      	b.n	8006e42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	4613      	mov	r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	3304      	adds	r3, #4
 8006e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_PCD_EP_ClrStall+0x86>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e00e      	b.n	8006e80 <HAL_PCD_EP_ClrStall+0xa4>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 fab8 	bl	80093e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	; 0x28
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	3338      	adds	r3, #56	; 0x38
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	3304      	adds	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d901      	bls.n	8006ec0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e06c      	b.n	8006f9a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d902      	bls.n	8006edc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	3303      	adds	r3, #3
 8006ee0:	089b      	lsrs	r3, r3, #2
 8006ee2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ee4:	e02b      	b.n	8006f3e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d902      	bls.n	8006f02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3303      	adds	r3, #3
 8006f06:	089b      	lsrs	r3, r3, #2
 8006f08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68d9      	ldr	r1, [r3, #12]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	6978      	ldr	r0, [r7, #20]
 8006f22:	f002 f994 	bl	800924e <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d809      	bhi.n	8006f68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d203      	bcs.n	8006f68 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1be      	bne.n	8006ee6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	695a      	ldr	r2, [r3, #20]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d811      	bhi.n	8006f98 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	6939      	ldr	r1, [r7, #16]
 8006f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f94:	4013      	ands	r3, r2
 8006f96:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3720      	adds	r7, #32
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	333c      	adds	r3, #60	; 0x3c
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	f040 80a0 	bne.w	800711c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d015      	beq.n	8007012 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4a72      	ldr	r2, [pc, #456]	; (80071b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	f240 80dd 	bls.w	80071aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80d7 	beq.w	80071aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	461a      	mov	r2, r3
 800700a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700e:	6093      	str	r3, [r2, #8]
 8007010:	e0cb      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	461a      	mov	r2, r3
 800702a:	2320      	movs	r3, #32
 800702c:	6093      	str	r3, [r2, #8]
 800702e:	e0bc      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80b7 	bne.w	80071aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a5d      	ldr	r2, [pc, #372]	; (80071b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d90f      	bls.n	8007064 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705a:	461a      	mov	r2, r3
 800705c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007060:	6093      	str	r3, [r2, #8]
 8007062:	e0a2      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007076:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	0159      	lsls	r1, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	440b      	add	r3, r1
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800708a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4403      	add	r3, r0
 800709a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800709e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	1a9b      	subs	r3, r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4403      	add	r3, r0
 80070c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4419      	add	r1, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	4613      	mov	r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4403      	add	r3, r0
 80070d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d114      	bne.n	800710e <PCD_EP_OutXfrComplete_int+0x16a>
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	1a9b      	subs	r3, r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d108      	bne.n	800710e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007106:	461a      	mov	r2, r3
 8007108:	2101      	movs	r1, #1
 800710a:	f002 faff 	bl	800970c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f004 fa01 	bl	800b51c <HAL_PCD_DataOutStageCallback>
 800711a:	e046      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d124      	bne.n	800716e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007140:	6093      	str	r3, [r2, #8]
 8007142:	e032      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d008      	beq.n	8007160 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	2320      	movs	r3, #32
 800715e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	4619      	mov	r1, r3
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f004 f9d8 	bl	800b51c <HAL_PCD_DataOutStageCallback>
 800716c:	e01d      	b.n	80071aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d114      	bne.n	800719e <PCD_EP_OutXfrComplete_int+0x1fa>
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007196:	461a      	mov	r2, r3
 8007198:	2100      	movs	r1, #0
 800719a:	f002 fab7 	bl	800970c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f004 f9b9 	bl	800b51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	4f54300a 	.word	0x4f54300a
 80071b8:	4f54310a 	.word	0x4f54310a

080071bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	333c      	adds	r3, #60	; 0x3c
 80071d4:	3304      	adds	r3, #4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a15      	ldr	r2, [pc, #84]	; (8007244 <PCD_EP_OutSetupPacket_int+0x88>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d90e      	bls.n	8007210 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	461a      	mov	r2, r3
 800720a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f004 f971 	bl	800b4f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <PCD_EP_OutSetupPacket_int+0x88>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d90c      	bls.n	8007238 <PCD_EP_OutSetupPacket_int+0x7c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d108      	bne.n	8007238 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007230:	461a      	mov	r2, r3
 8007232:	2101      	movs	r1, #1
 8007234:	f002 fa6a 	bl	800970c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	4f54300a 	.word	0x4f54300a

08007248 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
 8007254:	4613      	mov	r3, r2
 8007256:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d107      	bne.n	8007276 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007266:	883b      	ldrh	r3, [r7, #0]
 8007268:	0419      	lsls	r1, r3, #16
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	430a      	orrs	r2, r1
 8007272:	629a      	str	r2, [r3, #40]	; 0x28
 8007274:	e028      	b.n	80072c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	4413      	add	r3, r2
 8007282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
 8007288:	e00d      	b.n	80072a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	3340      	adds	r3, #64	; 0x40
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	3301      	adds	r3, #1
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	7bfa      	ldrb	r2, [r7, #15]
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d3ec      	bcc.n	800728a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80072b0:	883b      	ldrh	r3, [r7, #0]
 80072b2:	0418      	lsls	r0, r3, #16
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6819      	ldr	r1, [r3, #0]
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4302      	orrs	r2, r0
 80072c0:	3340      	adds	r3, #64	; 0x40
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	887a      	ldrh	r2, [r7, #2]
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e25b      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d075      	beq.n	800741a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800732e:	4ba3      	ldr	r3, [pc, #652]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f003 030c 	and.w	r3, r3, #12
 8007336:	2b04      	cmp	r3, #4
 8007338:	d00c      	beq.n	8007354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800733a:	4ba0      	ldr	r3, [pc, #640]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007342:	2b08      	cmp	r3, #8
 8007344:	d112      	bne.n	800736c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007346:	4b9d      	ldr	r3, [pc, #628]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800734e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007352:	d10b      	bne.n	800736c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007354:	4b99      	ldr	r3, [pc, #612]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d05b      	beq.n	8007418 <HAL_RCC_OscConfig+0x108>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d157      	bne.n	8007418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e236      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d106      	bne.n	8007384 <HAL_RCC_OscConfig+0x74>
 8007376:	4b91      	ldr	r3, [pc, #580]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a90      	ldr	r2, [pc, #576]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007380:	6013      	str	r3, [r2, #0]
 8007382:	e01d      	b.n	80073c0 <HAL_RCC_OscConfig+0xb0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800738c:	d10c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x98>
 800738e:	4b8b      	ldr	r3, [pc, #556]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a8a      	ldr	r2, [pc, #552]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	4b88      	ldr	r3, [pc, #544]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a87      	ldr	r2, [pc, #540]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e00b      	b.n	80073c0 <HAL_RCC_OscConfig+0xb0>
 80073a8:	4b84      	ldr	r3, [pc, #528]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a83      	ldr	r2, [pc, #524]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b81      	ldr	r3, [pc, #516]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a80      	ldr	r2, [pc, #512]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c8:	f7fa ff3e 	bl	8002248 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073d0:	f7fa ff3a 	bl	8002248 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e1fb      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	4b76      	ldr	r3, [pc, #472]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f0      	beq.n	80073d0 <HAL_RCC_OscConfig+0xc0>
 80073ee:	e014      	b.n	800741a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f0:	f7fa ff2a 	bl	8002248 <HAL_GetTick>
 80073f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073f6:	e008      	b.n	800740a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073f8:	f7fa ff26 	bl	8002248 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2b64      	cmp	r3, #100	; 0x64
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e1e7      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	4b6c      	ldr	r3, [pc, #432]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1f0      	bne.n	80073f8 <HAL_RCC_OscConfig+0xe8>
 8007416:	e000      	b.n	800741a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d063      	beq.n	80074ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007426:	4b65      	ldr	r3, [pc, #404]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 030c 	and.w	r3, r3, #12
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007432:	4b62      	ldr	r3, [pc, #392]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800743a:	2b08      	cmp	r3, #8
 800743c:	d11c      	bne.n	8007478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800743e:	4b5f      	ldr	r3, [pc, #380]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d116      	bne.n	8007478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744a:	4b5c      	ldr	r3, [pc, #368]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d005      	beq.n	8007462 <HAL_RCC_OscConfig+0x152>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e1bb      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007462:	4b56      	ldr	r3, [pc, #344]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	4952      	ldr	r1, [pc, #328]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007476:	e03a      	b.n	80074ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d020      	beq.n	80074c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007480:	4b4f      	ldr	r3, [pc, #316]	; (80075c0 <HAL_RCC_OscConfig+0x2b0>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fa fedf 	bl	8002248 <HAL_GetTick>
 800748a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800748c:	e008      	b.n	80074a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800748e:	f7fa fedb 	bl	8002248 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d901      	bls.n	80074a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e19c      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a0:	4b46      	ldr	r3, [pc, #280]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d0f0      	beq.n	800748e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ac:	4b43      	ldr	r3, [pc, #268]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4940      	ldr	r1, [pc, #256]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	600b      	str	r3, [r1, #0]
 80074c0:	e015      	b.n	80074ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074c2:	4b3f      	ldr	r3, [pc, #252]	; (80075c0 <HAL_RCC_OscConfig+0x2b0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fa febe 	bl	8002248 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d0:	f7fa feba 	bl	8002248 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e17b      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e2:	4b36      	ldr	r3, [pc, #216]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d030      	beq.n	800755c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d016      	beq.n	8007530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007502:	4b30      	ldr	r3, [pc, #192]	; (80075c4 <HAL_RCC_OscConfig+0x2b4>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007508:	f7fa fe9e 	bl	8002248 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007510:	f7fa fe9a 	bl	8002248 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e15b      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007522:	4b26      	ldr	r3, [pc, #152]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007526:	f003 0302 	and.w	r3, r3, #2
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x200>
 800752e:	e015      	b.n	800755c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007530:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <HAL_RCC_OscConfig+0x2b4>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007536:	f7fa fe87 	bl	8002248 <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800753e:	f7fa fe83 	bl	8002248 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e144      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007550:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f0      	bne.n	800753e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80a0 	beq.w	80076aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800756e:	4b13      	ldr	r3, [pc, #76]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10f      	bne.n	800759a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800757a:	2300      	movs	r3, #0
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	4a0e      	ldr	r2, [pc, #56]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 8007584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007588:	6413      	str	r3, [r2, #64]	; 0x40
 800758a:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <HAL_RCC_OscConfig+0x2ac>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007592:	60bb      	str	r3, [r7, #8]
 8007594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007596:	2301      	movs	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <HAL_RCC_OscConfig+0x2b8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d121      	bne.n	80075ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075a6:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <HAL_RCC_OscConfig+0x2b8>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a07      	ldr	r2, [pc, #28]	; (80075c8 <HAL_RCC_OscConfig+0x2b8>)
 80075ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075b2:	f7fa fe49 	bl	8002248 <HAL_GetTick>
 80075b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b8:	e011      	b.n	80075de <HAL_RCC_OscConfig+0x2ce>
 80075ba:	bf00      	nop
 80075bc:	40023800 	.word	0x40023800
 80075c0:	42470000 	.word	0x42470000
 80075c4:	42470e80 	.word	0x42470e80
 80075c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075cc:	f7fa fe3c 	bl	8002248 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e0fd      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075de:	4b81      	ldr	r3, [pc, #516]	; (80077e4 <HAL_RCC_OscConfig+0x4d4>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0f0      	beq.n	80075cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d106      	bne.n	8007600 <HAL_RCC_OscConfig+0x2f0>
 80075f2:	4b7d      	ldr	r3, [pc, #500]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a7c      	ldr	r2, [pc, #496]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
 80075fe:	e01c      	b.n	800763a <HAL_RCC_OscConfig+0x32a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b05      	cmp	r3, #5
 8007606:	d10c      	bne.n	8007622 <HAL_RCC_OscConfig+0x312>
 8007608:	4b77      	ldr	r3, [pc, #476]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4a76      	ldr	r2, [pc, #472]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800760e:	f043 0304 	orr.w	r3, r3, #4
 8007612:	6713      	str	r3, [r2, #112]	; 0x70
 8007614:	4b74      	ldr	r3, [pc, #464]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	4a73      	ldr	r2, [pc, #460]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6713      	str	r3, [r2, #112]	; 0x70
 8007620:	e00b      	b.n	800763a <HAL_RCC_OscConfig+0x32a>
 8007622:	4b71      	ldr	r3, [pc, #452]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	4a70      	ldr	r2, [pc, #448]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
 800762e:	4b6e      	ldr	r3, [pc, #440]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	4a6d      	ldr	r2, [pc, #436]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007634:	f023 0304 	bic.w	r3, r3, #4
 8007638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d015      	beq.n	800766e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007642:	f7fa fe01 	bl	8002248 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007648:	e00a      	b.n	8007660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800764a:	f7fa fdfd 	bl	8002248 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f241 3288 	movw	r2, #5000	; 0x1388
 8007658:	4293      	cmp	r3, r2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e0bc      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007660:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0ee      	beq.n	800764a <HAL_RCC_OscConfig+0x33a>
 800766c:	e014      	b.n	8007698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800766e:	f7fa fdeb 	bl	8002248 <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007674:	e00a      	b.n	800768c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007676:	f7fa fde7 	bl	8002248 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f241 3288 	movw	r2, #5000	; 0x1388
 8007684:	4293      	cmp	r3, r2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e0a6      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768c:	4b56      	ldr	r3, [pc, #344]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800768e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1ee      	bne.n	8007676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d105      	bne.n	80076aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800769e:	4b52      	ldr	r3, [pc, #328]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	4a51      	ldr	r2, [pc, #324]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80076a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8092 	beq.w	80077d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076b4:	4b4c      	ldr	r3, [pc, #304]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 030c 	and.w	r3, r3, #12
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d05c      	beq.n	800777a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d141      	bne.n	800774c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c8:	4b48      	ldr	r3, [pc, #288]	; (80077ec <HAL_RCC_OscConfig+0x4dc>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ce:	f7fa fdbb 	bl	8002248 <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d6:	f7fa fdb7 	bl	8002248 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e078      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e8:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1f0      	bne.n	80076d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	019b      	lsls	r3, r3, #6
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	085b      	lsrs	r3, r3, #1
 800770c:	3b01      	subs	r3, #1
 800770e:	041b      	lsls	r3, r3, #16
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	061b      	lsls	r3, r3, #24
 8007718:	4933      	ldr	r1, [pc, #204]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800771e:	4b33      	ldr	r3, [pc, #204]	; (80077ec <HAL_RCC_OscConfig+0x4dc>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007724:	f7fa fd90 	bl	8002248 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772c:	f7fa fd8c 	bl	8002248 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b02      	cmp	r3, #2
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e04d      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0x41c>
 800774a:	e045      	b.n	80077d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <HAL_RCC_OscConfig+0x4dc>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007752:	f7fa fd79 	bl	8002248 <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800775a:	f7fa fd75 	bl	8002248 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e036      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776c:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f0      	bne.n	800775a <HAL_RCC_OscConfig+0x44a>
 8007778:	e02e      	b.n	80077d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e029      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <HAL_RCC_OscConfig+0x4d8>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	429a      	cmp	r2, r3
 8007798:	d11c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d115      	bne.n	80077d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077ae:	4013      	ands	r3, r2
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d10d      	bne.n	80077d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d106      	bne.n	80077d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d001      	beq.n	80077d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	40007000 	.word	0x40007000
 80077e8:	40023800 	.word	0x40023800
 80077ec:	42470060 	.word	0x42470060

080077f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e0cc      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007804:	4b68      	ldr	r3, [pc, #416]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d90c      	bls.n	800782c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007812:	4b65      	ldr	r3, [pc, #404]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781a:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d001      	beq.n	800782c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0b8      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d020      	beq.n	800787a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007844:	4b59      	ldr	r3, [pc, #356]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4a58      	ldr	r2, [pc, #352]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800784e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0308 	and.w	r3, r3, #8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800785c:	4b53      	ldr	r3, [pc, #332]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	4a52      	ldr	r2, [pc, #328]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007868:	4b50      	ldr	r3, [pc, #320]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	494d      	ldr	r1, [pc, #308]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	4313      	orrs	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d044      	beq.n	8007910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d107      	bne.n	800789e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788e:	4b47      	ldr	r3, [pc, #284]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d119      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e07f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d003      	beq.n	80078ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d107      	bne.n	80078be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ae:	4b3f      	ldr	r3, [pc, #252]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d109      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e06f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078be:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e067      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ce:	4b37      	ldr	r3, [pc, #220]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f023 0203 	bic.w	r2, r3, #3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	4934      	ldr	r1, [pc, #208]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078e0:	f7fa fcb2 	bl	8002248 <HAL_GetTick>
 80078e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e6:	e00a      	b.n	80078fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078e8:	f7fa fcae 	bl	8002248 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e04f      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fe:	4b2b      	ldr	r3, [pc, #172]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 020c 	and.w	r2, r3, #12
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	d1eb      	bne.n	80078e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d20c      	bcs.n	8007938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791e:	4b22      	ldr	r3, [pc, #136]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d001      	beq.n	8007938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e032      	b.n	800799e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4916      	ldr	r1, [pc, #88]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0308 	and.w	r3, r3, #8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007962:	4b12      	ldr	r3, [pc, #72]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	00db      	lsls	r3, r3, #3
 8007970:	490e      	ldr	r1, [pc, #56]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	4313      	orrs	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007976:	f000 f821 	bl	80079bc <HAL_RCC_GetSysClockFreq>
 800797a:	4601      	mov	r1, r0
 800797c:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	091b      	lsrs	r3, r3, #4
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	4a0a      	ldr	r2, [pc, #40]	; (80079b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007988:	5cd3      	ldrb	r3, [r2, r3]
 800798a:	fa21 f303 	lsr.w	r3, r1, r3
 800798e:	4a09      	ldr	r2, [pc, #36]	; (80079b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007992:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f7fa fc12 	bl	80021c0 <HAL_InitTick>

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40023c00 	.word	0x40023c00
 80079ac:	40023800 	.word	0x40023800
 80079b0:	0800ca80 	.word	0x0800ca80
 80079b4:	20000090 	.word	0x20000090
 80079b8:	20000094 	.word	0x20000094

080079bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	2300      	movs	r3, #0
 80079cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079d2:	4b50      	ldr	r3, [pc, #320]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d007      	beq.n	80079ee <HAL_RCC_GetSysClockFreq+0x32>
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d008      	beq.n	80079f4 <HAL_RCC_GetSysClockFreq+0x38>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f040 808d 	bne.w	8007b02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e8:	4b4b      	ldr	r3, [pc, #300]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x15c>)
 80079ea:	60bb      	str	r3, [r7, #8]
       break;
 80079ec:	e08c      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ee:	4b4b      	ldr	r3, [pc, #300]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x160>)
 80079f0:	60bb      	str	r3, [r7, #8]
      break;
 80079f2:	e089      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079f4:	4b47      	ldr	r3, [pc, #284]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079fe:	4b45      	ldr	r3, [pc, #276]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d023      	beq.n	8007a52 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a0a:	4b42      	ldr	r3, [pc, #264]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	099b      	lsrs	r3, r3, #6
 8007a10:	f04f 0400 	mov.w	r4, #0
 8007a14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	ea03 0501 	and.w	r5, r3, r1
 8007a20:	ea04 0602 	and.w	r6, r4, r2
 8007a24:	4a3d      	ldr	r2, [pc, #244]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a26:	fb02 f106 	mul.w	r1, r2, r6
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	fb02 f205 	mul.w	r2, r2, r5
 8007a30:	440a      	add	r2, r1
 8007a32:	493a      	ldr	r1, [pc, #232]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x160>)
 8007a34:	fba5 0101 	umull	r0, r1, r5, r1
 8007a38:	1853      	adds	r3, r2, r1
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f04f 0400 	mov.w	r4, #0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4623      	mov	r3, r4
 8007a46:	f7f9 f8a7 	bl	8000b98 <__aeabi_uldivmod>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e049      	b.n	8007ae6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a52:	4b30      	ldr	r3, [pc, #192]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	f04f 0400 	mov.w	r4, #0
 8007a5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	ea03 0501 	and.w	r5, r3, r1
 8007a68:	ea04 0602 	and.w	r6, r4, r2
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4632      	mov	r2, r6
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	f04f 0400 	mov.w	r4, #0
 8007a78:	0154      	lsls	r4, r2, #5
 8007a7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a7e:	014b      	lsls	r3, r1, #5
 8007a80:	4619      	mov	r1, r3
 8007a82:	4622      	mov	r2, r4
 8007a84:	1b49      	subs	r1, r1, r5
 8007a86:	eb62 0206 	sbc.w	r2, r2, r6
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	0194      	lsls	r4, r2, #6
 8007a94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a98:	018b      	lsls	r3, r1, #6
 8007a9a:	1a5b      	subs	r3, r3, r1
 8007a9c:	eb64 0402 	sbc.w	r4, r4, r2
 8007aa0:	f04f 0100 	mov.w	r1, #0
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	00e2      	lsls	r2, r4, #3
 8007aaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007aae:	00d9      	lsls	r1, r3, #3
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4614      	mov	r4, r2
 8007ab4:	195b      	adds	r3, r3, r5
 8007ab6:	eb44 0406 	adc.w	r4, r4, r6
 8007aba:	f04f 0100 	mov.w	r1, #0
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	02a2      	lsls	r2, r4, #10
 8007ac4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007ac8:	0299      	lsls	r1, r3, #10
 8007aca:	460b      	mov	r3, r1
 8007acc:	4614      	mov	r4, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4623      	mov	r3, r4
 8007adc:	f7f9 f85c 	bl	8000b98 <__aeabi_uldivmod>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	3301      	adds	r3, #1
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007afe:	60bb      	str	r3, [r7, #8]
      break;
 8007b00:	e002      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b02:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007b04:	60bb      	str	r3, [r7, #8]
      break;
 8007b06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b08:	68bb      	ldr	r3, [r7, #8]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800
 8007b18:	00f42400 	.word	0x00f42400
 8007b1c:	017d7840 	.word	0x017d7840

08007b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b24:	4b03      	ldr	r3, [pc, #12]	; (8007b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b26:	681b      	ldr	r3, [r3, #0]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000090 	.word	0x20000090

08007b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b3c:	f7ff fff0 	bl	8007b20 <HAL_RCC_GetHCLKFreq>
 8007b40:	4601      	mov	r1, r0
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	0a9b      	lsrs	r3, r3, #10
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	4a03      	ldr	r2, [pc, #12]	; (8007b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b4e:	5cd3      	ldrb	r3, [r2, r3]
 8007b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	0800ca90 	.word	0x0800ca90

08007b60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e083      	b.n	8007c7c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fa fa65 	bl	8002058 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f000 f9ed 	bl	8007f94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c00:	f023 030c 	bic.w	r3, r3, #12
 8007c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	031b      	lsls	r3, r3, #12
 8007c30:	4313      	orrs	r3, r2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	4313      	orrs	r3, r2
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_TIM_Encoder_Start_IT+0x16>
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d010      	beq.n	8007cba <HAL_TIM_Encoder_Start_IT+0x36>
 8007c98:	e01f      	b.n	8007cda <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f9f6 	bl	8008094 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0202 	orr.w	r2, r2, #2
 8007cb6:	60da      	str	r2, [r3, #12]
      break;
 8007cb8:	e02e      	b.n	8007d18 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f9e6 	bl	8008094 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0204 	orr.w	r2, r2, #4
 8007cd6:	60da      	str	r2, [r3, #12]
      break;
 8007cd8:	e01e      	b.n	8007d18 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f9d6 	bl	8008094 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2201      	movs	r2, #1
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 f9cf 	bl	8008094 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0202 	orr.w	r2, r2, #2
 8007d04:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0204 	orr.w	r2, r2, #4
 8007d14:	60da      	str	r2, [r3, #12]
      break;
 8007d16:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f042 0201 	orr.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d122      	bne.n	8007d8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d11b      	bne.n	8007d8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f06f 0202 	mvn.w	r2, #2
 8007d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7f9 fc25 	bl	80015c4 <HAL_TIM_IC_CaptureCallback>
 8007d7a:	e005      	b.n	8007d88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8ea 	bl	8007f56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8f1 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d122      	bne.n	8007de2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d11b      	bne.n	8007de2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f06f 0204 	mvn.w	r2, #4
 8007db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7f9 fbfb 	bl	80015c4 <HAL_TIM_IC_CaptureCallback>
 8007dce:	e005      	b.n	8007ddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f8c0 	bl	8007f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f8c7 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d122      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d11b      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0208 	mvn.w	r2, #8
 8007e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7f9 fbd1 	bl	80015c4 <HAL_TIM_IC_CaptureCallback>
 8007e22:	e005      	b.n	8007e30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f896 	bl	8007f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f89d 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d122      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2b10      	cmp	r3, #16
 8007e50:	d11b      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f06f 0210 	mvn.w	r2, #16
 8007e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2208      	movs	r2, #8
 8007e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7f9 fba7 	bl	80015c4 <HAL_TIM_IC_CaptureCallback>
 8007e76:	e005      	b.n	8007e84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f86c 	bl	8007f56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f873 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d10e      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d107      	bne.n	8007eb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f06f 0201 	mvn.w	r2, #1
 8007eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f846 	bl	8007f42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec0:	2b80      	cmp	r3, #128	; 0x80
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d107      	bne.n	8007ee2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f977 	bl	80081d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	d10e      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d107      	bne.n	8007f0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f838 	bl	8007f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d10e      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	d107      	bne.n	8007f3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f06f 0220 	mvn.w	r2, #32
 8007f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f941 	bl	80081bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a34      	ldr	r2, [pc, #208]	; (8008078 <TIM_Base_SetConfig+0xe4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <TIM_Base_SetConfig+0x38>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb2:	d00b      	beq.n	8007fcc <TIM_Base_SetConfig+0x38>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a31      	ldr	r2, [pc, #196]	; (800807c <TIM_Base_SetConfig+0xe8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <TIM_Base_SetConfig+0x38>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a30      	ldr	r2, [pc, #192]	; (8008080 <TIM_Base_SetConfig+0xec>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_Base_SetConfig+0x38>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a2f      	ldr	r2, [pc, #188]	; (8008084 <TIM_Base_SetConfig+0xf0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d108      	bne.n	8007fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a25      	ldr	r2, [pc, #148]	; (8008078 <TIM_Base_SetConfig+0xe4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01b      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d017      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a22      	ldr	r2, [pc, #136]	; (800807c <TIM_Base_SetConfig+0xe8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a21      	ldr	r2, [pc, #132]	; (8008080 <TIM_Base_SetConfig+0xec>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00f      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a20      	ldr	r2, [pc, #128]	; (8008084 <TIM_Base_SetConfig+0xf0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00b      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1f      	ldr	r2, [pc, #124]	; (8008088 <TIM_Base_SetConfig+0xf4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1e      	ldr	r2, [pc, #120]	; (800808c <TIM_Base_SetConfig+0xf8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_Base_SetConfig+0x8a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1d      	ldr	r2, [pc, #116]	; (8008090 <TIM_Base_SetConfig+0xfc>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d108      	bne.n	8008030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a08      	ldr	r2, [pc, #32]	; (8008078 <TIM_Base_SetConfig+0xe4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d103      	bne.n	8008064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	615a      	str	r2, [r3, #20]
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40014000 	.word	0x40014000
 800808c:	40014400 	.word	0x40014400
 8008090:	40014800 	.word	0x40014800

08008094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 031f 	and.w	r3, r3, #31
 80080a6:	2201      	movs	r2, #1
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	43db      	mvns	r3, r3
 80080b6:	401a      	ands	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	fa01 f303 	lsl.w	r3, r1, r3
 80080cc:	431a      	orrs	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e050      	b.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1c      	ldr	r2, [pc, #112]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d018      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008144:	d013      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a18      	ldr	r2, [pc, #96]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00e      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d10c      	bne.n	8008188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40000c00 	.word	0x40000c00
 80081b8:	40014000 	.word	0x40014000

080081bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081e4:	b084      	sub	sp, #16
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	f107 001c 	add.w	r0, r7, #28
 80081f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d122      	bne.n	8008242 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d105      	bne.n	8008236 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f001 fac6 	bl	80097c8 <USB_CoreReset>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]
 8008240:	e01a      	b.n	8008278 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 faba 	bl	80097c8 <USB_CoreReset>
 8008254:	4603      	mov	r3, r0
 8008256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
 800826a:	e005      	b.n	8008278 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	2b01      	cmp	r3, #1
 800827c:	d10b      	bne.n	8008296 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f043 0206 	orr.w	r2, r3, #6
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082a2:	b004      	add	sp, #16
 80082a4:	4770      	bx	lr
	...

080082a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d165      	bne.n	8008388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4a41      	ldr	r2, [pc, #260]	; (80083c4 <USB_SetTurnaroundTime+0x11c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d906      	bls.n	80082d2 <USB_SetTurnaroundTime+0x2a>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4a40      	ldr	r2, [pc, #256]	; (80083c8 <USB_SetTurnaroundTime+0x120>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d802      	bhi.n	80082d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80082cc:	230f      	movs	r3, #15
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e062      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4a3c      	ldr	r2, [pc, #240]	; (80083c8 <USB_SetTurnaroundTime+0x120>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d906      	bls.n	80082e8 <USB_SetTurnaroundTime+0x40>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a3b      	ldr	r2, [pc, #236]	; (80083cc <USB_SetTurnaroundTime+0x124>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d802      	bhi.n	80082e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80082e2:	230e      	movs	r3, #14
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	e057      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4a38      	ldr	r2, [pc, #224]	; (80083cc <USB_SetTurnaroundTime+0x124>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d906      	bls.n	80082fe <USB_SetTurnaroundTime+0x56>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4a37      	ldr	r2, [pc, #220]	; (80083d0 <USB_SetTurnaroundTime+0x128>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d802      	bhi.n	80082fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80082f8:	230d      	movs	r3, #13
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e04c      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <USB_SetTurnaroundTime+0x128>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d906      	bls.n	8008314 <USB_SetTurnaroundTime+0x6c>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4a32      	ldr	r2, [pc, #200]	; (80083d4 <USB_SetTurnaroundTime+0x12c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d802      	bhi.n	8008314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800830e:	230c      	movs	r3, #12
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e041      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a2f      	ldr	r2, [pc, #188]	; (80083d4 <USB_SetTurnaroundTime+0x12c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d906      	bls.n	800832a <USB_SetTurnaroundTime+0x82>
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4a2e      	ldr	r2, [pc, #184]	; (80083d8 <USB_SetTurnaroundTime+0x130>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d802      	bhi.n	800832a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008324:	230b      	movs	r3, #11
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e036      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4a2a      	ldr	r2, [pc, #168]	; (80083d8 <USB_SetTurnaroundTime+0x130>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d906      	bls.n	8008340 <USB_SetTurnaroundTime+0x98>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	4a29      	ldr	r2, [pc, #164]	; (80083dc <USB_SetTurnaroundTime+0x134>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d802      	bhi.n	8008340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800833a:	230a      	movs	r3, #10
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e02b      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4a26      	ldr	r2, [pc, #152]	; (80083dc <USB_SetTurnaroundTime+0x134>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d906      	bls.n	8008356 <USB_SetTurnaroundTime+0xae>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4a25      	ldr	r2, [pc, #148]	; (80083e0 <USB_SetTurnaroundTime+0x138>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d802      	bhi.n	8008356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008350:	2309      	movs	r3, #9
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e020      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4a21      	ldr	r2, [pc, #132]	; (80083e0 <USB_SetTurnaroundTime+0x138>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d906      	bls.n	800836c <USB_SetTurnaroundTime+0xc4>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <USB_SetTurnaroundTime+0x13c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d802      	bhi.n	800836c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008366:	2308      	movs	r3, #8
 8008368:	617b      	str	r3, [r7, #20]
 800836a:	e015      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <USB_SetTurnaroundTime+0x13c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d906      	bls.n	8008382 <USB_SetTurnaroundTime+0xda>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <USB_SetTurnaroundTime+0x140>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d802      	bhi.n	8008382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800837c:	2307      	movs	r3, #7
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e00a      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008382:	2306      	movs	r3, #6
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	e007      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800838e:	2309      	movs	r3, #9
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e001      	b.n	8008398 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008394:	2309      	movs	r3, #9
 8008396:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	029b      	lsls	r3, r3, #10
 80083ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	00d8acbf 	.word	0x00d8acbf
 80083c8:	00e4e1bf 	.word	0x00e4e1bf
 80083cc:	00f423ff 	.word	0x00f423ff
 80083d0:	0106737f 	.word	0x0106737f
 80083d4:	011a499f 	.word	0x011a499f
 80083d8:	01312cff 	.word	0x01312cff
 80083dc:	014ca43f 	.word	0x014ca43f
 80083e0:	016e35ff 	.word	0x016e35ff
 80083e4:	01a6ab1f 	.word	0x01a6ab1f
 80083e8:	01e847ff 	.word	0x01e847ff

080083ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f043 0201 	orr.w	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f023 0201 	bic.w	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d106      	bne.n	800845c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e00b      	b.n	8008474 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	e001      	b.n	8008474 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e003      	b.n	800847c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008474:	2032      	movs	r0, #50	; 0x32
 8008476:	f7f9 fef3 	bl	8002260 <HAL_Delay>

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008484:	b084      	sub	sp, #16
 8008486:	b580      	push	{r7, lr}
 8008488:	b086      	sub	sp, #24
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800849e:	2300      	movs	r3, #0
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	e009      	b.n	80084b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	3340      	adds	r3, #64	; 0x40
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3301      	adds	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b0e      	cmp	r3, #14
 80084bc:	d9f2      	bls.n	80084a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11c      	bne.n	80084fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084d2:	f043 0302 	orr.w	r3, r3, #2
 80084d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
 80084fc:	e00b      	b.n	8008516 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800851c:	461a      	mov	r2, r3
 800851e:	2300      	movs	r3, #0
 8008520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008528:	4619      	mov	r1, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008530:	461a      	mov	r2, r3
 8008532:	680b      	ldr	r3, [r1, #0]
 8008534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10c      	bne.n	8008556 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d104      	bne.n	800854c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008542:	2100      	movs	r1, #0
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f949 	bl	80087dc <USB_SetDevSpeed>
 800854a:	e008      	b.n	800855e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800854c:	2101      	movs	r1, #1
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f944 	bl	80087dc <USB_SetDevSpeed>
 8008554:	e003      	b.n	800855e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008556:	2103      	movs	r1, #3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f93f 	bl	80087dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800855e:	2110      	movs	r1, #16
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8f3 	bl	800874c <USB_FlushTxFifo>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f911 	bl	8008798 <USB_FlushRxFifo>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008586:	461a      	mov	r2, r3
 8008588:	2300      	movs	r3, #0
 800858a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008592:	461a      	mov	r2, r3
 8008594:	2300      	movs	r3, #0
 8008596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859e:	461a      	mov	r2, r3
 80085a0:	2300      	movs	r3, #0
 80085a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	e043      	b.n	8008632 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085c0:	d118      	bne.n	80085f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d4:	461a      	mov	r2, r3
 80085d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e013      	b.n	8008606 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	461a      	mov	r2, r3
 80085ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	e008      	b.n	8008606 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	461a      	mov	r2, r3
 8008602:	2300      	movs	r3, #0
 8008604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	461a      	mov	r2, r3
 8008614:	2300      	movs	r3, #0
 8008616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008624:	461a      	mov	r2, r3
 8008626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800862a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	3301      	adds	r3, #1
 8008630:	613b      	str	r3, [r7, #16]
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	429a      	cmp	r2, r3
 8008638:	d3b7      	bcc.n	80085aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e043      	b.n	80086c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	015a      	lsls	r2, r3, #5
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	4413      	add	r3, r2
 8008648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008656:	d118      	bne.n	800868a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	461a      	mov	r2, r3
 800866c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	e013      	b.n	800869c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008680:	461a      	mov	r2, r3
 8008682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	e008      	b.n	800869c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	461a      	mov	r2, r3
 80086aa:	2300      	movs	r3, #0
 80086ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	461a      	mov	r2, r3
 80086bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3301      	adds	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d3b7      	bcc.n	8008640 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f043 0210 	orr.w	r2, r3, #16
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <USB_DevInit+0x2c4>)
 800870a:	4313      	orrs	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f043 0208 	orr.w	r2, r3, #8
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d107      	bne.n	8008738 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008730:	f043 0304 	orr.w	r3, r3, #4
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008744:	b004      	add	sp, #16
 8008746:	4770      	bx	lr
 8008748:	803c3800 	.word	0x803c3800

0800874c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	019b      	lsls	r3, r3, #6
 800875e:	f043 0220 	orr.w	r2, r3, #32
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3301      	adds	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4a09      	ldr	r2, [pc, #36]	; (8008794 <USB_FlushTxFifo+0x48>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d901      	bls.n	8008778 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e006      	b.n	8008786 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b20      	cmp	r3, #32
 8008782:	d0f0      	beq.n	8008766 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	00030d40 	.word	0x00030d40

08008798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2210      	movs	r2, #16
 80087a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <USB_FlushRxFifo+0x40>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d901      	bls.n	80087bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e006      	b.n	80087ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d0f0      	beq.n	80087aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	00030d40 	.word	0x00030d40

080087dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	78fb      	ldrb	r3, [r7, #3]
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087fc:	4313      	orrs	r3, r2
 80087fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800880e:	b480      	push	{r7}
 8008810:	b087      	sub	sp, #28
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f003 0306 	and.w	r3, r3, #6
 8008826:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800882e:	2300      	movs	r3, #0
 8008830:	75fb      	strb	r3, [r7, #23]
 8008832:	e00a      	b.n	800884a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d002      	beq.n	8008840 <USB_GetDevSpeed+0x32>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b06      	cmp	r3, #6
 800883e:	d102      	bne.n	8008846 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008840:	2302      	movs	r3, #2
 8008842:	75fb      	strb	r3, [r7, #23]
 8008844:	e001      	b.n	800884a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008846:	230f      	movs	r3, #15
 8008848:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	371c      	adds	r7, #28
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d13a      	bne.n	80088ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 030f 	and.w	r3, r3, #15
 8008884:	2101      	movs	r1, #1
 8008886:	fa01 f303 	lsl.w	r3, r1, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	68f9      	ldr	r1, [r7, #12]
 800888e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008892:	4313      	orrs	r3, r2
 8008894:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d155      	bne.n	8008958 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	015a      	lsls	r2, r3, #5
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	78db      	ldrb	r3, [r3, #3]
 80088c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	059b      	lsls	r3, r3, #22
 80088ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088d0:	4313      	orrs	r3, r2
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e036      	b.n	8008958 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	2101      	movs	r1, #1
 80088fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008900:	041b      	lsls	r3, r3, #16
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008908:	4313      	orrs	r3, r2
 800890a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d11a      	bne.n	8008958 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	78db      	ldrb	r3, [r3, #3]
 800893c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800893e:	430b      	orrs	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008956:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d161      	bne.n	8008a48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800899a:	d11f      	bne.n	80089dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	f003 030f 	and.w	r3, r3, #15
 80089ec:	2101      	movs	r1, #1
 80089ee:	fa01 f303 	lsl.w	r3, r1, r3
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	43db      	mvns	r3, r3
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089fc:	4013      	ands	r3, r2
 80089fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a06:	69da      	ldr	r2, [r3, #28]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	2101      	movs	r1, #1
 8008a12:	fa01 f303 	lsl.w	r3, r1, r3
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a20:	4013      	ands	r3, r2
 8008a22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	0159      	lsls	r1, r3, #5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	440b      	add	r3, r1
 8008a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4b35      	ldr	r3, [pc, #212]	; (8008b18 <USB_DeactivateEndpoint+0x1b0>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	600b      	str	r3, [r1, #0]
 8008a46:	e060      	b.n	8008b0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a5e:	d11f      	bne.n	8008aa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	68f9      	ldr	r1, [r7, #12]
 8008abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aca:	69da      	ldr	r2, [r3, #28]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	43db      	mvns	r3, r3
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	0159      	lsls	r1, r3, #5
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	440b      	add	r3, r1
 8008afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b02:	4619      	mov	r1, r3
 8008b04:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <USB_DeactivateEndpoint+0x1b4>)
 8008b06:	4013      	ands	r3, r2
 8008b08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	ec337800 	.word	0xec337800
 8008b1c:	eff37800 	.word	0xeff37800

08008b20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	f040 815c 	bne.w	8008dfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d132      	bne.n	8008bb0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	69fa      	ldr	r2, [r7, #28]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba8:	0cdb      	lsrs	r3, r3, #19
 8008baa:	04db      	lsls	r3, r3, #19
 8008bac:	6113      	str	r3, [r2, #16]
 8008bae:	e074      	b.n	8008c9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bca:	0cdb      	lsrs	r3, r3, #19
 8008bcc:	04db      	lsls	r3, r3, #19
 8008bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c00:	691a      	ldr	r2, [r3, #16]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6959      	ldr	r1, [r3, #20]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	440b      	add	r3, r1
 8008c0c:	1e59      	subs	r1, r3, #1
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c16:	04d9      	lsls	r1, r3, #19
 8008c18:	4b9d      	ldr	r3, [pc, #628]	; (8008e90 <USB_EPStartXfer+0x370>)
 8008c1a:	400b      	ands	r3, r1
 8008c1c:	69b9      	ldr	r1, [r7, #24]
 8008c1e:	0148      	lsls	r0, r1, #5
 8008c20:	69f9      	ldr	r1, [r7, #28]
 8008c22:	4401      	add	r1, r0
 8008c24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c38:	691a      	ldr	r2, [r3, #16]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c42:	69b9      	ldr	r1, [r7, #24]
 8008c44:	0148      	lsls	r0, r1, #5
 8008c46:	69f9      	ldr	r1, [r7, #28]
 8008c48:	4401      	add	r1, r0
 8008c4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	78db      	ldrb	r3, [r3, #3]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d11f      	bne.n	8008c9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008c78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d14b      	bne.n	8008d38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	78db      	ldrb	r3, [r3, #3]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d128      	bne.n	8008d16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d110      	bne.n	8008cf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cf2:	6013      	str	r3, [r2, #0]
 8008cf4:	e00f      	b.n	8008d16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	e12f      	b.n	8008f98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	78db      	ldrb	r3, [r3, #3]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d015      	beq.n	8008d8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8117 	beq.w	8008f98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 030f 	and.w	r3, r3, #15
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d86:	4313      	orrs	r3, r2
 8008d88:	634b      	str	r3, [r1, #52]	; 0x34
 8008d8a:	e105      	b.n	8008f98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d110      	bne.n	8008dbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	e00f      	b.n	8008dde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	0151      	lsls	r1, r2, #5
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	440a      	add	r2, r1
 8008dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	68d9      	ldr	r1, [r3, #12]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	b298      	uxth	r0, r3
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4603      	mov	r3, r0
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fa2b 	bl	800924e <USB_WritePacket>
 8008df8:	e0ce      	b.n	8008f98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	69ba      	ldr	r2, [r7, #24]
 8008e0a:	0151      	lsls	r1, r2, #5
 8008e0c:	69fa      	ldr	r2, [r7, #28]
 8008e0e:	440a      	add	r2, r1
 8008e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e14:	0cdb      	lsrs	r3, r3, #19
 8008e16:	04db      	lsls	r3, r3, #19
 8008e18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d126      	bne.n	8008e94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	0148      	lsls	r0, r1, #5
 8008e60:	69f9      	ldr	r1, [r7, #28]
 8008e62:	4401      	add	r1, r0
 8008e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e8a:	6113      	str	r3, [r2, #16]
 8008e8c:	e036      	b.n	8008efc <USB_EPStartXfer+0x3dc>
 8008e8e:	bf00      	nop
 8008e90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	1e5a      	subs	r2, r3, #1
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	8afb      	ldrh	r3, [r7, #22]
 8008eba:	04d9      	lsls	r1, r3, #19
 8008ebc:	4b39      	ldr	r3, [pc, #228]	; (8008fa4 <USB_EPStartXfer+0x484>)
 8008ebe:	400b      	ands	r3, r1
 8008ec0:	69b9      	ldr	r1, [r7, #24]
 8008ec2:	0148      	lsls	r0, r1, #5
 8008ec4:	69f9      	ldr	r1, [r7, #28]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	8af9      	ldrh	r1, [r7, #22]
 8008ee4:	fb01 f303 	mul.w	r3, r1, r3
 8008ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eec:	69b9      	ldr	r1, [r7, #24]
 8008eee:	0148      	lsls	r0, r1, #5
 8008ef0:	69f9      	ldr	r1, [r7, #28]
 8008ef2:	4401      	add	r1, r0
 8008ef4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d10d      	bne.n	8008f1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	68d9      	ldr	r1, [r3, #12]
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	460a      	mov	r2, r1
 8008f1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	78db      	ldrb	r3, [r3, #3]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d128      	bne.n	8008f78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d110      	bne.n	8008f58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	0151      	lsls	r1, r2, #5
 8008f48:	69fa      	ldr	r2, [r7, #28]
 8008f4a:	440a      	add	r2, r1
 8008f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	e00f      	b.n	8008f78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	015a      	lsls	r2, r3, #5
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	0151      	lsls	r1, r2, #5
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	440a      	add	r2, r1
 8008f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	1ff80000 	.word	0x1ff80000

08008fa8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	f040 80cd 	bne.w	8009164 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d132      	bne.n	8009038 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	0151      	lsls	r1, r2, #5
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	440a      	add	r2, r1
 8008fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	440a      	add	r2, r1
 800902c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009030:	0cdb      	lsrs	r3, r3, #19
 8009032:	04db      	lsls	r3, r3, #19
 8009034:	6113      	str	r3, [r2, #16]
 8009036:	e04e      	b.n	80090d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009052:	0cdb      	lsrs	r3, r3, #19
 8009054:	04db      	lsls	r3, r3, #19
 8009056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	440a      	add	r2, r1
 800906e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800907a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	695a      	ldr	r2, [r3, #20]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	429a      	cmp	r2, r3
 8009086:	d903      	bls.n	8009090 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	0151      	lsls	r1, r2, #5
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	440a      	add	r2, r1
 80090a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	691a      	ldr	r2, [r3, #16]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090c6:	6939      	ldr	r1, [r7, #16]
 80090c8:	0148      	lsls	r0, r1, #5
 80090ca:	6979      	ldr	r1, [r7, #20]
 80090cc:	4401      	add	r1, r0
 80090ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090d2:	4313      	orrs	r3, r2
 80090d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d11e      	bne.n	800911a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d009      	beq.n	80090f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	461a      	mov	r2, r3
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	0151      	lsls	r1, r2, #5
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	440a      	add	r2, r1
 800910e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	e092      	b.n	8009240 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	015a      	lsls	r2, r3, #5
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	0151      	lsls	r1, r2, #5
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	440a      	add	r2, r1
 8009130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009138:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d07e      	beq.n	8009240 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	2101      	movs	r1, #1
 8009154:	fa01 f303 	lsl.w	r3, r1, r3
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800915e:	4313      	orrs	r3, r2
 8009160:	634b      	str	r3, [r1, #52]	; 0x34
 8009162:	e06d      	b.n	8009240 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800917e:	0cdb      	lsrs	r3, r3, #19
 8009180:	04db      	lsls	r3, r3, #19
 8009182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	440a      	add	r2, r1
 800919a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	0151      	lsls	r1, r2, #5
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	440a      	add	r2, r1
 80091ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ee:	6939      	ldr	r1, [r7, #16]
 80091f0:	0148      	lsls	r0, r1, #5
 80091f2:	6979      	ldr	r1, [r7, #20]
 80091f4:	4401      	add	r1, r0
 80091f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091fa:	4313      	orrs	r3, r2
 80091fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d10d      	bne.n	8009220 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d009      	beq.n	8009220 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	68d9      	ldr	r1, [r3, #12]
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	460a      	mov	r2, r1
 800921e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800923a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800923e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800924e:	b480      	push	{r7}
 8009250:	b089      	sub	sp, #36	; 0x24
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	4611      	mov	r1, r2
 800925a:	461a      	mov	r2, r3
 800925c:	460b      	mov	r3, r1
 800925e:	71fb      	strb	r3, [r7, #7]
 8009260:	4613      	mov	r3, r2
 8009262:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800926c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009270:	2b00      	cmp	r3, #0
 8009272:	d11a      	bne.n	80092aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009274:	88bb      	ldrh	r3, [r7, #4]
 8009276:	3303      	adds	r3, #3
 8009278:	089b      	lsrs	r3, r3, #2
 800927a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e00f      	b.n	80092a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	031a      	lsls	r2, r3, #12
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928e:	461a      	mov	r2, r3
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	3304      	adds	r3, #4
 800929a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	3301      	adds	r3, #1
 80092a0:	61bb      	str	r3, [r7, #24]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d3eb      	bcc.n	8009282 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3724      	adds	r7, #36	; 0x24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b089      	sub	sp, #36	; 0x24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	3303      	adds	r3, #3
 80092d2:	089b      	lsrs	r3, r3, #2
 80092d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	61bb      	str	r3, [r7, #24]
 80092da:	e00b      	b.n	80092f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3304      	adds	r3, #4
 80092ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	3301      	adds	r3, #1
 80092f2:	61bb      	str	r3, [r7, #24]
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d3ef      	bcc.n	80092dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80092fc:	69fb      	ldr	r3, [r7, #28]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3724      	adds	r7, #36	; 0x24
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800930a:	b480      	push	{r7}
 800930c:	b085      	sub	sp, #20
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d12c      	bne.n	8009380 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	db12      	blt.n	800935e <USB_EPSetStall+0x54>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00f      	beq.n	800935e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	0151      	lsls	r1, r2, #5
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	440a      	add	r2, r1
 8009354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800935c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	0151      	lsls	r1, r2, #5
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	440a      	add	r2, r1
 8009374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	e02b      	b.n	80093d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	db12      	blt.n	80093b8 <USB_EPSetStall+0xae>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00f      	beq.n	80093b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3714      	adds	r7, #20
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b085      	sub	sp, #20
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d128      	bne.n	8009454 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	78db      	ldrb	r3, [r3, #3]
 8009426:	2b03      	cmp	r3, #3
 8009428:	d003      	beq.n	8009432 <USB_EPClearStall+0x4c>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	78db      	ldrb	r3, [r3, #3]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d138      	bne.n	80094a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e027      	b.n	80094a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009472:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d003      	beq.n	8009484 <USB_EPClearStall+0x9e>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	78db      	ldrb	r3, [r3, #3]
 8009480:	2b02      	cmp	r3, #2
 8009482:	d10f      	bne.n	80094a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	440a      	add	r2, r1
 800949a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800949e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ec:	4313      	orrs	r3, r2
 80094ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009518:	f023 0303 	bic.w	r3, r3, #3
 800951c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800952c:	f023 0302 	bic.w	r3, r3, #2
 8009530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800955a:	f023 0303 	bic.w	r3, r3, #3
 800955e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800956e:	f043 0302 	orr.w	r3, r3, #2
 8009572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009582:	b480      	push	{r7}
 8009584:	b085      	sub	sp, #20
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4013      	ands	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800959a:	68fb      	ldr	r3, [r7, #12]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	4013      	ands	r3, r2
 80095ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0c1b      	lsrs	r3, r3, #16
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	4013      	ands	r3, r2
 80095fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	b29b      	uxth	r3, r3
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	68ba      	ldr	r2, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800963e:	68bb      	ldr	r3, [r7, #8]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	01db      	lsls	r3, r3, #7
 800967e:	b2db      	uxtb	r3, r3
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	4313      	orrs	r3, r2
 8009684:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4013      	ands	r3, r2
 8009698:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800969a:	68bb      	ldr	r3, [r7, #8]
}
 800969c:	4618      	mov	r0, r3
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	f003 0301 	and.w	r3, r3, #1
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096e2:	f023 0307 	bic.w	r3, r3, #7
 80096e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	460b      	mov	r3, r1
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	333c      	adds	r3, #60	; 0x3c
 8009722:	3304      	adds	r3, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4a26      	ldr	r2, [pc, #152]	; (80097c4 <USB_EP0_OutStart+0xb8>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d90a      	bls.n	8009746 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800973c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009740:	d101      	bne.n	8009746 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e037      	b.n	80097b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974c:	461a      	mov	r2, r3
 800974e:	2300      	movs	r3, #0
 8009750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009774:	f043 0318 	orr.w	r3, r3, #24
 8009778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009788:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800978c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800978e:	7afb      	ldrb	r3, [r7, #11]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d10f      	bne.n	80097b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	4f54300a 	.word	0x4f54300a

080097c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4a13      	ldr	r2, [pc, #76]	; (800982c <USB_CoreReset+0x64>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e01b      	b.n	800981e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	daf2      	bge.n	80097d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	f043 0201 	orr.w	r2, r3, #1
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <USB_CoreReset+0x64>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d901      	bls.n	8009810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e006      	b.n	800981e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0301 	and.w	r3, r3, #1
 8009818:	2b01      	cmp	r3, #1
 800981a:	d0f0      	beq.n	80097fe <USB_CoreReset+0x36>

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	00030d40 	.word	0x00030d40

08009830 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800983c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009840:	f002 f922 	bl	800ba88 <malloc>
 8009844:	4603      	mov	r3, r0
 8009846:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009856:	2302      	movs	r3, #2
 8009858:	e066      	b.n	8009928 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d119      	bne.n	800989e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800986a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986e:	2202      	movs	r2, #2
 8009870:	2181      	movs	r1, #129	; 0x81
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 ff8f 	bl	800b796 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800987e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009882:	2202      	movs	r2, #2
 8009884:	2101      	movs	r1, #1
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 ff85 	bl	800b796 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2210      	movs	r2, #16
 8009898:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800989c:	e016      	b.n	80098cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800989e:	2340      	movs	r3, #64	; 0x40
 80098a0:	2202      	movs	r2, #2
 80098a2:	2181      	movs	r1, #129	; 0x81
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 ff76 	bl	800b796 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80098b0:	2340      	movs	r3, #64	; 0x40
 80098b2:	2202      	movs	r2, #2
 80098b4:	2101      	movs	r1, #1
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 ff6d 	bl	800b796 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2210      	movs	r2, #16
 80098c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098cc:	2308      	movs	r3, #8
 80098ce:	2203      	movs	r2, #3
 80098d0:	2182      	movs	r1, #130	; 0x82
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 ff5f 	bl	800b796 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800990c:	2101      	movs	r1, #1
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f002 f830 	bl	800b974 <USBD_LL_PrepareReceive>
 8009914:	e007      	b.n	8009926 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	2101      	movs	r1, #1
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f002 f827 	bl	800b974 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009940:	2181      	movs	r1, #129	; 0x81
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 ff4d 	bl	800b7e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800994e:	2101      	movs	r1, #1
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f001 ff46 	bl	800b7e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800995e:	2182      	movs	r1, #130	; 0x82
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f001 ff3e 	bl	800b7e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00e      	beq.n	800999e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009990:	4618      	mov	r0, r3
 8009992:	f002 f881 	bl	800ba98 <free>
    pdev->pClassData = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d03a      	beq.n	8009a48 <USBD_CDC_Setup+0xa0>
 80099d2:	2b20      	cmp	r3, #32
 80099d4:	f040 8097 	bne.w	8009b06 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	88db      	ldrh	r3, [r3, #6]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d029      	beq.n	8009a34 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	da11      	bge.n	8009a0e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80099f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	88d2      	ldrh	r2, [r2, #6]
 80099fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80099fe:	6939      	ldr	r1, [r7, #16]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	88db      	ldrh	r3, [r3, #6]
 8009a04:	461a      	mov	r2, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 fa9d 	bl	800af46 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009a0c:	e082      	b.n	8009b14 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	785a      	ldrb	r2, [r3, #1]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	88db      	ldrh	r3, [r3, #6]
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009a24:	6939      	ldr	r1, [r7, #16]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	88db      	ldrh	r3, [r3, #6]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f001 fab6 	bl	800af9e <USBD_CtlPrepareRx>
    break;
 8009a32:	e06f      	b.n	8009b14 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	7850      	ldrb	r0, [r2, #1]
 8009a40:	2200      	movs	r2, #0
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	4798      	blx	r3
    break;
 8009a46:	e065      	b.n	8009b14 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	2b0b      	cmp	r3, #11
 8009a4e:	d84f      	bhi.n	8009af0 <USBD_CDC_Setup+0x148>
 8009a50:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_CDC_Setup+0xb0>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a89 	.word	0x08009a89
 8009a5c:	08009aff 	.word	0x08009aff
 8009a60:	08009af1 	.word	0x08009af1
 8009a64:	08009af1 	.word	0x08009af1
 8009a68:	08009af1 	.word	0x08009af1
 8009a6c:	08009af1 	.word	0x08009af1
 8009a70:	08009af1 	.word	0x08009af1
 8009a74:	08009af1 	.word	0x08009af1
 8009a78:	08009af1 	.word	0x08009af1
 8009a7c:	08009af1 	.word	0x08009af1
 8009a80:	08009ab1 	.word	0x08009ab1
 8009a84:	08009ad9 	.word	0x08009ad9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d107      	bne.n	8009aa2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	2202      	movs	r2, #2
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fa53 	bl	800af46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009aa0:	e030      	b.n	8009b04 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f9dd 	bl	800ae64 <USBD_CtlError>
        ret = USBD_FAIL;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	75fb      	strb	r3, [r7, #23]
      break;
 8009aae:	e029      	b.n	8009b04 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d107      	bne.n	8009aca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aba:	f107 030f 	add.w	r3, r7, #15
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fa3f 	bl	800af46 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009ac8:	e01c      	b.n	8009b04 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f001 f9c9 	bl	800ae64 <USBD_CtlError>
        ret = USBD_FAIL;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ad6:	e015      	b.n	8009b04 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d00f      	beq.n	8009b02 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f9bd 	bl	800ae64 <USBD_CtlError>
        ret = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009aee:	e008      	b.n	8009b02 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 f9b6 	bl	800ae64 <USBD_CtlError>
      ret = USBD_FAIL;
 8009af8:	2303      	movs	r3, #3
 8009afa:	75fb      	strb	r3, [r7, #23]
      break;
 8009afc:	e002      	b.n	8009b04 <USBD_CDC_Setup+0x15c>
      break;
 8009afe:	bf00      	nop
 8009b00:	e008      	b.n	8009b14 <USBD_CDC_Setup+0x16c>
      break;
 8009b02:	bf00      	nop
    }
    break;
 8009b04:	e006      	b.n	8009b14 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f9ab 	bl	800ae64 <USBD_CtlError>
    ret = USBD_FAIL;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	75fb      	strb	r3, [r7, #23]
    break;
 8009b12:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop

08009b20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e049      	b.n	8009bd6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	3318      	adds	r3, #24
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d029      	beq.n	8009bb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	3318      	adds	r3, #24
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	78f9      	ldrb	r1, [r7, #3]
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	460b      	mov	r3, r1
 8009b78:	00db      	lsls	r3, r3, #3
 8009b7a:	1a5b      	subs	r3, r3, r1
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4403      	add	r3, r0
 8009b80:	3344      	adds	r3, #68	; 0x44
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b88:	fb03 f301 	mul.w	r3, r3, r1
 8009b8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d110      	bne.n	8009bb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009b92:	78fa      	ldrb	r2, [r7, #3]
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4613      	mov	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ba6:	78f9      	ldrb	r1, [r7, #3]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2200      	movs	r2, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fec0 	bl	800b932 <USBD_LL_Transmit>
 8009bb2:	e00f      	b.n	8009bd4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e015      	b.n	8009c2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fed6 	bl	800b9b6 <USBD_LL_GetRxDataSize>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c26:	4611      	mov	r1, r2
 8009c28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c42:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d015      	beq.n	8009c7a <USBD_CDC_EP0_RxReady+0x46>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c54:	2bff      	cmp	r3, #255	; 0xff
 8009c56:	d010      	beq.n	8009c7a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009c66:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2243      	movs	r2, #67	; 0x43
 8009c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c92:	4b03      	ldr	r3, [pc, #12]	; (8009ca0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	20000124 	.word	0x20000124

08009ca4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2243      	movs	r2, #67	; 0x43
 8009cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009cb2:	4b03      	ldr	r3, [pc, #12]	; (8009cc0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	200000e0 	.word	0x200000e0

08009cc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2243      	movs	r2, #67	; 0x43
 8009cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009cd2:	4b03      	ldr	r3, [pc, #12]	; (8009ce0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	20000168 	.word	0x20000168

08009ce4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220a      	movs	r2, #10
 8009cf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cf2:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	2000009c 	.word	0x2000009c

08009d04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e004      	b.n	8009d22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b087      	sub	sp, #28
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d40:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	371c      	adds	r7, #28
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d70:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e01a      	b.n	8009de0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d114      	bne.n	8009dde <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009dd2:	2181      	movs	r1, #129	; 0x81
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 fdac 	bl	800b932 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e016      	b.n	8009e34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	7c1b      	ldrb	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d109      	bne.n	8009e22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fdaa 	bl	800b974 <USBD_LL_PrepareReceive>
 8009e20:	e007      	b.n	8009e32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fda1 	bl	800b974 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4613      	mov	r3, r2
 8009e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e025      	b.n	8009ea0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	79fa      	ldrb	r2, [r7, #7]
 8009e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f001 fc17 	bl	800b6c8 <USBD_LL_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e010      	b.n	8009ee2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	f107 020e 	add.w	r2, r7, #14
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 fc34 	bl	800b760 <USBD_LL_Start>
 8009ef8:	4603      	mov	r3, r0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d007      	beq.n	8009f76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
  }

  return USBD_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ff2c 	bl	800adf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d00e      	beq.n	8009fda <USBD_LL_SetupStage+0x5a>
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d302      	bcc.n	8009fc6 <USBD_LL_SetupStage+0x46>
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d014      	beq.n	8009fee <USBD_LL_SetupStage+0x6e>
 8009fc4:	e01d      	b.n	800a002 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa18 	bl	800a404 <USBD_StdDevReq>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd8:	e020      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fa7c 	bl	800a4e0 <USBD_StdItfReq>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
      break;
 8009fec:	e016      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fab8 	bl	800a56c <USBD_StdEPReq>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
      break;
 800a000:	e00c      	b.n	800a01c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a008:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 fc05 	bl	800b820 <USBD_LL_StallEP>
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]
      break;
 800a01a:	bf00      	nop
  }

  return ret;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	460b      	mov	r3, r1
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d137      	bne.n	800a0aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a040:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d14a      	bne.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	689a      	ldr	r2, [r3, #8]
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d913      	bls.n	800a080 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	4293      	cmp	r3, r2
 800a070:	bf28      	it	cs
 800a072:	4613      	movcs	r3, r2
 800a074:	461a      	mov	r2, r3
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 ffad 	bl	800afd8 <USBD_CtlContinueRx>
 800a07e:	e030      	b.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00a      	beq.n	800a0a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a092:	2b03      	cmp	r3, #3
 800a094:	d105      	bne.n	800a0a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 ffa9 	bl	800affa <USBD_CtlSendStatus>
 800a0a8:	e01b      	b.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d013      	beq.n	800a0de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d10e      	bne.n	800a0de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	7afa      	ldrb	r2, [r7, #11]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	4798      	blx	r3
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	e002      	b.n	800a0e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e000      	b.n	800a0e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	607a      	str	r2, [r7, #4]
 800a0f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0fa:	7afb      	ldrb	r3, [r7, #11]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d16a      	bne.n	800a1d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3314      	adds	r3, #20
 800a104:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d155      	bne.n	800a1bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d914      	bls.n	800a146 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	461a      	mov	r2, r3
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 ff22 	bl	800af7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f001 fc18 	bl	800b974 <USBD_LL_PrepareReceive>
 800a144:	e03a      	b.n	800a1bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	68da      	ldr	r2, [r3, #12]
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d11c      	bne.n	800a18c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d316      	bcc.n	800a18c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a168:	429a      	cmp	r2, r3
 800a16a:	d20f      	bcs.n	800a18c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a16c:	2200      	movs	r2, #0
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 ff03 	bl	800af7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f001 fbf5 	bl	800b974 <USBD_LL_PrepareReceive>
 800a18a:	e017      	b.n	800a1bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00a      	beq.n	800a1ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d105      	bne.n	800a1ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f001 fb35 	bl	800b820 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 ff32 	bl	800b020 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d123      	bne.n	800a20e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fe9b 	bl	8009f02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1d4:	e01b      	b.n	800a20e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d013      	beq.n	800a20a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d10e      	bne.n	800a20a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	7afa      	ldrb	r2, [r7, #11]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	4798      	blx	r3
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	e002      	b.n	800a210 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e000      	b.n	800a210 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a244:	2b00      	cmp	r3, #0
 800a246:	d009      	beq.n	800a25c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6852      	ldr	r2, [r2, #4]
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	4611      	mov	r1, r2
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	2200      	movs	r2, #0
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f001 fa97 	bl	800b796 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a278:	2340      	movs	r3, #64	; 0x40
 800a27a:	2200      	movs	r2, #0
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fa89 	bl	800b796 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f2:	2b04      	cmp	r3, #4
 800a2f4:	d105      	bne.n	800a302 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d10b      	bne.n	800a33a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6852      	ldr	r2, [r2, #4]
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
  }

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3e4:	8a3b      	ldrh	r3, [r7, #16]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	b21a      	sxth	r2, r3
 800a3ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b21b      	sxth	r3, r3
 800a3f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a41a:	2b20      	cmp	r3, #32
 800a41c:	d004      	beq.n	800a428 <USBD_StdDevReq+0x24>
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d002      	beq.n	800a428 <USBD_StdDevReq+0x24>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <USBD_StdDevReq+0x38>
 800a426:	e050      	b.n	800a4ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	4798      	blx	r3
 800a436:	4603      	mov	r3, r0
 800a438:	73fb      	strb	r3, [r7, #15]
    break;
 800a43a:	e04b      	b.n	800a4d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b09      	cmp	r3, #9
 800a442:	d83c      	bhi.n	800a4be <USBD_StdDevReq+0xba>
 800a444:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <USBD_StdDevReq+0x48>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a4a1 	.word	0x0800a4a1
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4bf 	.word	0x0800a4bf
 800a458:	0800a4ab 	.word	0x0800a4ab
 800a45c:	0800a4bf 	.word	0x0800a4bf
 800a460:	0800a47f 	.word	0x0800a47f
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a4bf 	.word	0x0800a4bf
 800a46c:	0800a497 	.word	0x0800a497
 800a470:	0800a489 	.word	0x0800a489
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f9ce 	bl	800a818 <USBD_GetDescriptor>
      break;
 800a47c:	e024      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fb33 	bl	800aaec <USBD_SetAddress>
      break;
 800a486:	e01f      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fb70 	bl	800ab70 <USBD_SetConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
      break;
 800a494:	e018      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fc0d 	bl	800acb8 <USBD_GetConfig>
      break;
 800a49e:	e013      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fc3c 	bl	800ad20 <USBD_GetStatus>
      break;
 800a4a8:	e00e      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fc6a 	bl	800ad86 <USBD_SetFeature>
      break;
 800a4b2:	e009      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fc79 	bl	800adae <USBD_ClrFeature>
      break;
 800a4bc:	e004      	b.n	800a4c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 fccf 	bl	800ae64 <USBD_CtlError>
      break;
 800a4c6:	bf00      	nop
    }
    break;
 800a4c8:	e004      	b.n	800a4d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a4ca:	6839      	ldr	r1, [r7, #0]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fcc9 	bl	800ae64 <USBD_CtlError>
    break;
 800a4d2:	bf00      	nop
  }

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop

0800a4e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d003      	beq.n	800a502 <USBD_StdItfReq+0x22>
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d001      	beq.n	800a502 <USBD_StdItfReq+0x22>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d12a      	bne.n	800a558 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a508:	3b01      	subs	r3, #1
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d81d      	bhi.n	800a54a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	889b      	ldrh	r3, [r3, #4]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b01      	cmp	r3, #1
 800a516:	d813      	bhi.n	800a540 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	88db      	ldrh	r3, [r3, #6]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d110      	bne.n	800a554 <USBD_StdItfReq+0x74>
 800a532:	7bfb      	ldrb	r3, [r7, #15]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10d      	bne.n	800a554 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fd5e 	bl	800affa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a53e:	e009      	b.n	800a554 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fc8e 	bl	800ae64 <USBD_CtlError>
      break;
 800a548:	e004      	b.n	800a554 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc89 	bl	800ae64 <USBD_CtlError>
      break;
 800a552:	e000      	b.n	800a556 <USBD_StdItfReq+0x76>
      break;
 800a554:	bf00      	nop
    }
    break;
 800a556:	e004      	b.n	800a562 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fc82 	bl	800ae64 <USBD_CtlError>
    break;
 800a560:	bf00      	nop
  }

  return ret;
 800a562:	7bfb      	ldrb	r3, [r7, #15]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	889b      	ldrh	r3, [r3, #4]
 800a57e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d004      	beq.n	800a596 <USBD_StdEPReq+0x2a>
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d002      	beq.n	800a596 <USBD_StdEPReq+0x2a>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <USBD_StdEPReq+0x3e>
 800a594:	e135      	b.n	800a802 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a8:	e130      	b.n	800a80c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d03e      	beq.n	800a630 <USBD_StdEPReq+0xc4>
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d002      	beq.n	800a5bc <USBD_StdEPReq+0x50>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d077      	beq.n	800a6aa <USBD_StdEPReq+0x13e>
 800a5ba:	e11c      	b.n	800a7f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d002      	beq.n	800a5cc <USBD_StdEPReq+0x60>
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d015      	beq.n	800a5f6 <USBD_StdEPReq+0x8a>
 800a5ca:	e02b      	b.n	800a624 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00c      	beq.n	800a5ec <USBD_StdEPReq+0x80>
 800a5d2:	7bbb      	ldrb	r3, [r7, #14]
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d009      	beq.n	800a5ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f91f 	bl	800b820 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5e2:	2180      	movs	r1, #128	; 0x80
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f001 f91b 	bl	800b820 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a5ea:	e020      	b.n	800a62e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fc38 	bl	800ae64 <USBD_CtlError>
        break;
 800a5f4:	e01b      	b.n	800a62e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	885b      	ldrh	r3, [r3, #2]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10e      	bne.n	800a61c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_StdEPReq+0xb0>
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b80      	cmp	r3, #128	; 0x80
 800a608:	d008      	beq.n	800a61c <USBD_StdEPReq+0xb0>
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 f902 	bl	800b820 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fcec 	bl	800affa <USBD_CtlSendStatus>

        break;
 800a622:	e004      	b.n	800a62e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fc1c 	bl	800ae64 <USBD_CtlError>
        break;
 800a62c:	bf00      	nop
      }
      break;
 800a62e:	e0e7      	b.n	800a800 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a636:	2b02      	cmp	r3, #2
 800a638:	d002      	beq.n	800a640 <USBD_StdEPReq+0xd4>
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d015      	beq.n	800a66a <USBD_StdEPReq+0xfe>
 800a63e:	e02d      	b.n	800a69c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <USBD_StdEPReq+0xf4>
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b80      	cmp	r3, #128	; 0x80
 800a64a:	d009      	beq.n	800a660 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 f8e5 	bl	800b820 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a656:	2180      	movs	r1, #128	; 0x80
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 f8e1 	bl	800b820 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a65e:	e023      	b.n	800a6a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fbfe 	bl	800ae64 <USBD_CtlError>
        break;
 800a668:	e01e      	b.n	800a6a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d119      	bne.n	800a6a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d004      	beq.n	800a686 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f8ec 	bl	800b85e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fcb7 	bl	800affa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
        }
        break;
 800a69a:	e004      	b.n	800a6a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fbe0 	bl	800ae64 <USBD_CtlError>
        break;
 800a6a4:	e000      	b.n	800a6a8 <USBD_StdEPReq+0x13c>
        break;
 800a6a6:	bf00      	nop
      }
      break;
 800a6a8:	e0aa      	b.n	800a800 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d002      	beq.n	800a6ba <USBD_StdEPReq+0x14e>
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d032      	beq.n	800a71e <USBD_StdEPReq+0x1b2>
 800a6b8:	e097      	b.n	800a7ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <USBD_StdEPReq+0x164>
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	2b80      	cmp	r3, #128	; 0x80
 800a6c4:	d004      	beq.n	800a6d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fbcb 	bl	800ae64 <USBD_CtlError>
          break;
 800a6ce:	e091      	b.n	800a7f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da0b      	bge.n	800a6f0 <USBD_StdEPReq+0x184>
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	3310      	adds	r3, #16
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	e00b      	b.n	800a708 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4413      	add	r3, r2
 800a706:	3304      	adds	r3, #4
 800a708:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2202      	movs	r2, #2
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fc15 	bl	800af46 <USBD_CtlSendData>
        break;
 800a71c:	e06a      	b.n	800a7f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a71e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	da11      	bge.n	800a74a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	3324      	adds	r3, #36	; 0x24
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d117      	bne.n	800a770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fb8e 	bl	800ae64 <USBD_CtlError>
            break;
 800a748:	e054      	b.n	800a7f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	f003 020f 	and.w	r2, r3, #15
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	440b      	add	r3, r1
 800a75c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d104      	bne.n	800a770 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a766:	6839      	ldr	r1, [r7, #0]
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fb7b 	bl	800ae64 <USBD_CtlError>
            break;
 800a76e:	e041      	b.n	800a7f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da0b      	bge.n	800a790 <USBD_StdEPReq+0x224>
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	3310      	adds	r3, #16
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	4413      	add	r3, r2
 800a78c:	3304      	adds	r3, #4
 800a78e:	e00b      	b.n	800a7a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <USBD_StdEPReq+0x24a>
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b80      	cmp	r3, #128	; 0x80
 800a7b4:	d103      	bne.n	800a7be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	e00e      	b.n	800a7dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 f86a 	bl	800b89c <USBD_LL_IsStallEP>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d003      	beq.n	800a7d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e002      	b.n	800a7dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fbaf 	bl	800af46 <USBD_CtlSendData>
          break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fb39 	bl	800ae64 <USBD_CtlError>
        break;
 800a7f2:	bf00      	nop
      }
      break;
 800a7f4:	e004      	b.n	800a800 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 fb33 	bl	800ae64 <USBD_CtlError>
      break;
 800a7fe:	bf00      	nop
    }
    break;
 800a800:	e004      	b.n	800a80c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a802:	6839      	ldr	r1, [r7, #0]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fb2d 	bl	800ae64 <USBD_CtlError>
    break;
 800a80a:	bf00      	nop
  }

  return ret;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
	...

0800a818 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a82a:	2300      	movs	r3, #0
 800a82c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	885b      	ldrh	r3, [r3, #2]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	b29b      	uxth	r3, r3
 800a836:	3b01      	subs	r3, #1
 800a838:	2b06      	cmp	r3, #6
 800a83a:	f200 8128 	bhi.w	800aa8e <USBD_GetDescriptor+0x276>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <USBD_GetDescriptor+0x2c>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a861 	.word	0x0800a861
 800a848:	0800a879 	.word	0x0800a879
 800a84c:	0800a8b9 	.word	0x0800a8b9
 800a850:	0800aa8f 	.word	0x0800aa8f
 800a854:	0800aa8f 	.word	0x0800aa8f
 800a858:	0800aa2f 	.word	0x0800aa2f
 800a85c:	0800aa5b 	.word	0x0800aa5b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7c12      	ldrb	r2, [r2, #16]
 800a86c:	f107 0108 	add.w	r1, r7, #8
 800a870:	4610      	mov	r0, r2
 800a872:	4798      	blx	r3
 800a874:	60f8      	str	r0, [r7, #12]
    break;
 800a876:	e112      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7c1b      	ldrb	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10d      	bne.n	800a89c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a888:	f107 0208 	add.w	r2, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	2202      	movs	r2, #2
 800a898:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a89a:	e100      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	f107 0208 	add.w	r2, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	701a      	strb	r2, [r3, #0]
    break;
 800a8b6:	e0f2      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	885b      	ldrh	r3, [r3, #2]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	f200 80ac 	bhi.w	800aa1c <USBD_GetDescriptor+0x204>
 800a8c4:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <USBD_GetDescriptor+0xb4>)
 800a8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ca:	bf00      	nop
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a919 	.word	0x0800a919
 800a8d4:	0800a94d 	.word	0x0800a94d
 800a8d8:	0800a981 	.word	0x0800a981
 800a8dc:	0800a9b5 	.word	0x0800a9b5
 800a8e0:	0800a9e9 	.word	0x0800a9e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00b      	beq.n	800a908 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	7c12      	ldrb	r2, [r2, #16]
 800a8fc:	f107 0108 	add.w	r1, r7, #8
 800a900:	4610      	mov	r0, r2
 800a902:	4798      	blx	r3
 800a904:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a906:	e091      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 faaa 	bl	800ae64 <USBD_CtlError>
        err++;
 800a910:	7afb      	ldrb	r3, [r7, #11]
 800a912:	3301      	adds	r3, #1
 800a914:	72fb      	strb	r3, [r7, #11]
      break;
 800a916:	e089      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00b      	beq.n	800a93c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	7c12      	ldrb	r2, [r2, #16]
 800a930:	f107 0108 	add.w	r1, r7, #8
 800a934:	4610      	mov	r0, r2
 800a936:	4798      	blx	r3
 800a938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a93a:	e077      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fa90 	bl	800ae64 <USBD_CtlError>
        err++;
 800a944:	7afb      	ldrb	r3, [r7, #11]
 800a946:	3301      	adds	r3, #1
 800a948:	72fb      	strb	r3, [r7, #11]
      break;
 800a94a:	e06f      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	7c12      	ldrb	r2, [r2, #16]
 800a964:	f107 0108 	add.w	r1, r7, #8
 800a968:	4610      	mov	r0, r2
 800a96a:	4798      	blx	r3
 800a96c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a96e:	e05d      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa76 	bl	800ae64 <USBD_CtlError>
        err++;
 800a978:	7afb      	ldrb	r3, [r7, #11]
 800a97a:	3301      	adds	r3, #1
 800a97c:	72fb      	strb	r3, [r7, #11]
      break;
 800a97e:	e055      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00b      	beq.n	800a9a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	7c12      	ldrb	r2, [r2, #16]
 800a998:	f107 0108 	add.w	r1, r7, #8
 800a99c:	4610      	mov	r0, r2
 800a99e:	4798      	blx	r3
 800a9a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9a2:	e043      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9a4:	6839      	ldr	r1, [r7, #0]
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa5c 	bl	800ae64 <USBD_CtlError>
        err++;
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	72fb      	strb	r3, [r7, #11]
      break;
 800a9b2:	e03b      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	7c12      	ldrb	r2, [r2, #16]
 800a9cc:	f107 0108 	add.w	r1, r7, #8
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	4798      	blx	r3
 800a9d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9d6:	e029      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fa42 	bl	800ae64 <USBD_CtlError>
        err++;
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	72fb      	strb	r3, [r7, #11]
      break;
 800a9e6:	e021      	b.n	800aa2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	7c12      	ldrb	r2, [r2, #16]
 800aa00:	f107 0108 	add.w	r1, r7, #8
 800aa04:	4610      	mov	r0, r2
 800aa06:	4798      	blx	r3
 800aa08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa0a:	e00f      	b.n	800aa2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa28 	bl	800ae64 <USBD_CtlError>
        err++;
 800aa14:	7afb      	ldrb	r3, [r7, #11]
 800aa16:	3301      	adds	r3, #1
 800aa18:	72fb      	strb	r3, [r7, #11]
      break;
 800aa1a:	e007      	b.n	800aa2c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fa20 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa24:	7afb      	ldrb	r3, [r7, #11]
 800aa26:	3301      	adds	r3, #1
 800aa28:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800aa2a:	bf00      	nop
    }
    break;
 800aa2c:	e037      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	7c1b      	ldrb	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	f107 0208 	add.w	r2, r7, #8
 800aa42:	4610      	mov	r0, r2
 800aa44:	4798      	blx	r3
 800aa46:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aa48:	e029      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa09 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa52:	7afb      	ldrb	r3, [r7, #11]
 800aa54:	3301      	adds	r3, #1
 800aa56:	72fb      	strb	r3, [r7, #11]
    break;
 800aa58:	e021      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7c1b      	ldrb	r3, [r3, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10d      	bne.n	800aa7e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	f107 0208 	add.w	r2, r7, #8
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4798      	blx	r3
 800aa72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	2207      	movs	r2, #7
 800aa7a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aa7c:	e00f      	b.n	800aa9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f9ef 	bl	800ae64 <USBD_CtlError>
      err++;
 800aa86:	7afb      	ldrb	r3, [r7, #11]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	72fb      	strb	r3, [r7, #11]
    break;
 800aa8c:	e007      	b.n	800aa9e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f9e7 	bl	800ae64 <USBD_CtlError>
    err++;
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	72fb      	strb	r3, [r7, #11]
    break;
 800aa9c:	bf00      	nop
  }

  if (err != 0U)
 800aa9e:	7afb      	ldrb	r3, [r7, #11]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11e      	bne.n	800aae2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	88db      	ldrh	r3, [r3, #6]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d016      	beq.n	800aada <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00e      	beq.n	800aad0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	88da      	ldrh	r2, [r3, #6]
 800aab6:	893b      	ldrh	r3, [r7, #8]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	bf28      	it	cs
 800aabc:	4613      	movcs	r3, r2
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800aac2:	893b      	ldrh	r3, [r7, #8]
 800aac4:	461a      	mov	r2, r3
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fa3c 	bl	800af46 <USBD_CtlSendData>
 800aace:	e009      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f9c6 	bl	800ae64 <USBD_CtlError>
 800aad8:	e004      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa8d 	bl	800affa <USBD_CtlSendStatus>
 800aae0:	e000      	b.n	800aae4 <USBD_GetDescriptor+0x2cc>
    return;
 800aae2:	bf00      	nop
    }
  }
}
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop

0800aaec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	889b      	ldrh	r3, [r3, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d130      	bne.n	800ab60 <USBD_SetAddress+0x74>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d12c      	bne.n	800ab60 <USBD_SetAddress+0x74>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	885b      	ldrh	r3, [r3, #2]
 800ab0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab0c:	d828      	bhi.n	800ab60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	885b      	ldrh	r3, [r3, #2]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d104      	bne.n	800ab2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f99c 	bl	800ae64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab2c:	e01c      	b.n	800ab68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7bfa      	ldrb	r2, [r7, #15]
 800ab32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 feda 	bl	800b8f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa5a 	bl	800affa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	e008      	b.n	800ab68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5e:	e003      	b.n	800ab68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f97e 	bl	800ae64 <USBD_CtlError>
  }
}
 800ab68:	bf00      	nop
 800ab6a:	3710      	adds	r7, #16
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	885b      	ldrh	r3, [r3, #2]
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab88:	4b4a      	ldr	r3, [pc, #296]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d905      	bls.n	800ab9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab90:	6839      	ldr	r1, [r7, #0]
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f966 	bl	800ae64 <USBD_CtlError>
    return USBD_FAIL;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e087      	b.n	800acac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d002      	beq.n	800abac <USBD_SetConfig+0x3c>
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d025      	beq.n	800abf6 <USBD_SetConfig+0x86>
 800abaa:	e071      	b.n	800ac90 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800abac:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <USBD_SetConfig+0x144>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01c      	beq.n	800abee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800abb4:	4b3f      	ldr	r3, [pc, #252]	; (800acb4 <USBD_SetConfig+0x144>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800abbe:	4b3d      	ldr	r3, [pc, #244]	; (800acb4 <USBD_SetConfig+0x144>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f7ff f9a7 	bl	8009f18 <USBD_SetClassConfig>
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800abce:	7bfb      	ldrb	r3, [r7, #15]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f944 	bl	800ae64 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800abdc:	e065      	b.n	800acaa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa0b 	bl	800affa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2203      	movs	r2, #3
 800abe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800abec:	e05d      	b.n	800acaa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fa03 	bl	800affa <USBD_CtlSendStatus>
    break;
 800abf4:	e059      	b.n	800acaa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800abf6:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <USBD_SetConfig+0x144>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d112      	bne.n	800ac24 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2202      	movs	r2, #2
 800ac02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ac06:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff f99a 	bl	8009f50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f9ec 	bl	800affa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ac22:	e042      	b.n	800acaa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ac24:	4b23      	ldr	r3, [pc, #140]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d02a      	beq.n	800ac88 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff f988 	bl	8009f50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ac40:	4b1c      	ldr	r3, [pc, #112]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	461a      	mov	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac4a:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff f961 	bl	8009f18 <USBD_SetClassConfig>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00f      	beq.n	800ac80 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f8fe 	bl	800ae64 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff f96d 	bl	8009f50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ac7e:	e014      	b.n	800acaa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 f9ba 	bl	800affa <USBD_CtlSendStatus>
    break;
 800ac86:	e010      	b.n	800acaa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f9b6 	bl	800affa <USBD_CtlSendStatus>
    break;
 800ac8e:	e00c      	b.n	800acaa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f8e6 	bl	800ae64 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff f956 	bl	8009f50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800aca4:	2303      	movs	r3, #3
 800aca6:	73fb      	strb	r3, [r7, #15]
    break;
 800aca8:	bf00      	nop
  }

  return ret;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	200002bc 	.word	0x200002bc

0800acb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	88db      	ldrh	r3, [r3, #6]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d004      	beq.n	800acd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f8c9 	bl	800ae64 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800acd2:	e021      	b.n	800ad18 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acda:	2b01      	cmp	r3, #1
 800acdc:	db17      	blt.n	800ad0e <USBD_GetConfig+0x56>
 800acde:	2b02      	cmp	r3, #2
 800ace0:	dd02      	ble.n	800ace8 <USBD_GetConfig+0x30>
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d00b      	beq.n	800acfe <USBD_GetConfig+0x46>
 800ace6:	e012      	b.n	800ad0e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3308      	adds	r3, #8
 800acf2:	2201      	movs	r2, #1
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f925 	bl	800af46 <USBD_CtlSendData>
      break;
 800acfc:	e00c      	b.n	800ad18 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3304      	adds	r3, #4
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f91d 	bl	800af46 <USBD_CtlSendData>
      break;
 800ad0c:	e004      	b.n	800ad18 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f8a7 	bl	800ae64 <USBD_CtlError>
      break;
 800ad16:	bf00      	nop
}
 800ad18:	bf00      	nop
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad30:	3b01      	subs	r3, #1
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d81e      	bhi.n	800ad74 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	88db      	ldrh	r3, [r3, #6]
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d004      	beq.n	800ad48 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ad3e:	6839      	ldr	r1, [r7, #0]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f88f 	bl	800ae64 <USBD_CtlError>
      break;
 800ad46:	e01a      	b.n	800ad7e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d005      	beq.n	800ad64 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f043 0202 	orr.w	r2, r3, #2
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	330c      	adds	r3, #12
 800ad68:	2202      	movs	r2, #2
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f8ea 	bl	800af46 <USBD_CtlSendData>
    break;
 800ad72:	e004      	b.n	800ad7e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f874 	bl	800ae64 <USBD_CtlError>
    break;
 800ad7c:	bf00      	nop
  }
}
 800ad7e:	bf00      	nop
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	885b      	ldrh	r3, [r3, #2]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d106      	bne.n	800ada6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f92a 	bl	800affa <USBD_CtlSendStatus>
  }
}
 800ada6:	bf00      	nop
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b082      	sub	sp, #8
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adbe:	3b01      	subs	r3, #1
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d80b      	bhi.n	800addc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	885b      	ldrh	r3, [r3, #2]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d10c      	bne.n	800ade6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f910 	bl	800affa <USBD_CtlSendStatus>
      }
      break;
 800adda:	e004      	b.n	800ade6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f840 	bl	800ae64 <USBD_CtlError>
      break;
 800ade4:	e000      	b.n	800ade8 <USBD_ClrFeature+0x3a>
      break;
 800ade6:	bf00      	nop
  }
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	781a      	ldrb	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3301      	adds	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff fad3 	bl	800a3c6 <SWAPBYTE>
 800ae20:	4603      	mov	r3, r0
 800ae22:	461a      	mov	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3301      	adds	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff fac6 	bl	800a3c6 <SWAPBYTE>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fab9 	bl	800a3c6 <SWAPBYTE>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	80da      	strh	r2, [r3, #6]
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae6e:	2180      	movs	r1, #128	; 0x80
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fcd5 	bl	800b820 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fcd1 	bl	800b820 <USBD_LL_StallEP>
}
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b086      	sub	sp, #24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	60f8      	str	r0, [r7, #12]
 800ae8e:	60b9      	str	r1, [r7, #8]
 800ae90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d036      	beq.n	800af0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aea0:	6938      	ldr	r0, [r7, #16]
 800aea2:	f000 f836 	bl	800af12 <USBD_GetLen>
 800aea6:	4603      	mov	r3, r0
 800aea8:	3301      	adds	r3, #1
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	7812      	ldrb	r2, [r2, #0]
 800aebe:	701a      	strb	r2, [r3, #0]
  idx++;
 800aec0:	7dfb      	ldrb	r3, [r7, #23]
 800aec2:	3301      	adds	r3, #1
 800aec4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aec6:	7dfb      	ldrb	r3, [r7, #23]
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4413      	add	r3, r2
 800aecc:	2203      	movs	r2, #3
 800aece:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	3301      	adds	r3, #1
 800aed4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aed6:	e013      	b.n	800af00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	7812      	ldrb	r2, [r2, #0]
 800aee2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	3301      	adds	r3, #1
 800aee8:	613b      	str	r3, [r7, #16]
    idx++;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	3301      	adds	r3, #1
 800aeee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aef0:	7dfb      	ldrb	r3, [r7, #23]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	4413      	add	r3, r2
 800aef6:	2200      	movs	r2, #0
 800aef8:	701a      	strb	r2, [r3, #0]
    idx++;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	3301      	adds	r3, #1
 800aefe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1e7      	bne.n	800aed8 <USBD_GetString+0x52>
 800af08:	e000      	b.n	800af0c <USBD_GetString+0x86>
    return;
 800af0a:	bf00      	nop
  }
}
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af22:	e005      	b.n	800af30 <USBD_GetLen+0x1e>
  {
    len++;
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	3301      	adds	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1f5      	bne.n	800af24 <USBD_GetLen+0x12>
  }

  return len;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b084      	sub	sp, #16
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	60f8      	str	r0, [r7, #12]
 800af4e:	60b9      	str	r1, [r7, #8]
 800af50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2202      	movs	r2, #2
 800af56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	2100      	movs	r1, #0
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fce0 	bl	800b932 <USBD_LL_Transmit>

  return USBD_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	2100      	movs	r1, #0
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 fccf 	bl	800b932 <USBD_LL_Transmit>

  return USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2203      	movs	r2, #3
 800afae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	2100      	movs	r1, #0
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fcd3 	bl	800b974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68ba      	ldr	r2, [r7, #8]
 800afe8:	2100      	movs	r1, #0
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f000 fcc2 	bl	800b974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2204      	movs	r2, #4
 800b006:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b00a:	2300      	movs	r3, #0
 800b00c:	2200      	movs	r2, #0
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fc8e 	bl	800b932 <USBD_LL_Transmit>

  return USBD_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2205      	movs	r2, #5
 800b02c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b030:	2300      	movs	r3, #0
 800b032:	2200      	movs	r2, #0
 800b034:	2100      	movs	r1, #0
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fc9c 	bl	800b974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b04c:	2200      	movs	r2, #0
 800b04e:	4912      	ldr	r1, [pc, #72]	; (800b098 <MX_USB_DEVICE_Init+0x50>)
 800b050:	4812      	ldr	r0, [pc, #72]	; (800b09c <MX_USB_DEVICE_Init+0x54>)
 800b052:	f7fe fef3 	bl	8009e3c <USBD_Init>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b05c:	f7f6 faec 	bl	8001638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b060:	490f      	ldr	r1, [pc, #60]	; (800b0a0 <MX_USB_DEVICE_Init+0x58>)
 800b062:	480e      	ldr	r0, [pc, #56]	; (800b09c <MX_USB_DEVICE_Init+0x54>)
 800b064:	f7fe ff20 	bl	8009ea8 <USBD_RegisterClass>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b06e:	f7f6 fae3 	bl	8001638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b072:	490c      	ldr	r1, [pc, #48]	; (800b0a4 <MX_USB_DEVICE_Init+0x5c>)
 800b074:	4809      	ldr	r0, [pc, #36]	; (800b09c <MX_USB_DEVICE_Init+0x54>)
 800b076:	f7fe fe45 	bl	8009d04 <USBD_CDC_RegisterInterface>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b080:	f7f6 fada 	bl	8001638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b084:	4805      	ldr	r0, [pc, #20]	; (800b09c <MX_USB_DEVICE_Init+0x54>)
 800b086:	f7fe ff30 	bl	8009eea <USBD_Start>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b090:	f7f6 fad2 	bl	8001638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b094:	bf00      	nop
 800b096:	bd80      	pop	{r7, pc}
 800b098:	200001c0 	.word	0x200001c0
 800b09c:	20000490 	.word	0x20000490
 800b0a0:	200000a8 	.word	0x200000a8
 800b0a4:	200001ac 	.word	0x200001ac

0800b0a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4905      	ldr	r1, [pc, #20]	; (800b0c4 <CDC_Init_FS+0x1c>)
 800b0b0:	4805      	ldr	r0, [pc, #20]	; (800b0c8 <CDC_Init_FS+0x20>)
 800b0b2:	f7fe fe3c 	bl	8009d2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0b6:	4905      	ldr	r1, [pc, #20]	; (800b0cc <CDC_Init_FS+0x24>)
 800b0b8:	4803      	ldr	r0, [pc, #12]	; (800b0c8 <CDC_Init_FS+0x20>)
 800b0ba:	f7fe fe51 	bl	8009d60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20000f60 	.word	0x20000f60
 800b0c8:	20000490 	.word	0x20000490
 800b0cc:	20000760 	.word	0x20000760

0800b0d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b0f0:	79fb      	ldrb	r3, [r7, #7]
 800b0f2:	2b23      	cmp	r3, #35	; 0x23
 800b0f4:	d84a      	bhi.n	800b18c <CDC_Control_FS+0xac>
 800b0f6:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <CDC_Control_FS+0x1c>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b18d 	.word	0x0800b18d
 800b100:	0800b18d 	.word	0x0800b18d
 800b104:	0800b18d 	.word	0x0800b18d
 800b108:	0800b18d 	.word	0x0800b18d
 800b10c:	0800b18d 	.word	0x0800b18d
 800b110:	0800b18d 	.word	0x0800b18d
 800b114:	0800b18d 	.word	0x0800b18d
 800b118:	0800b18d 	.word	0x0800b18d
 800b11c:	0800b18d 	.word	0x0800b18d
 800b120:	0800b18d 	.word	0x0800b18d
 800b124:	0800b18d 	.word	0x0800b18d
 800b128:	0800b18d 	.word	0x0800b18d
 800b12c:	0800b18d 	.word	0x0800b18d
 800b130:	0800b18d 	.word	0x0800b18d
 800b134:	0800b18d 	.word	0x0800b18d
 800b138:	0800b18d 	.word	0x0800b18d
 800b13c:	0800b18d 	.word	0x0800b18d
 800b140:	0800b18d 	.word	0x0800b18d
 800b144:	0800b18d 	.word	0x0800b18d
 800b148:	0800b18d 	.word	0x0800b18d
 800b14c:	0800b18d 	.word	0x0800b18d
 800b150:	0800b18d 	.word	0x0800b18d
 800b154:	0800b18d 	.word	0x0800b18d
 800b158:	0800b18d 	.word	0x0800b18d
 800b15c:	0800b18d 	.word	0x0800b18d
 800b160:	0800b18d 	.word	0x0800b18d
 800b164:	0800b18d 	.word	0x0800b18d
 800b168:	0800b18d 	.word	0x0800b18d
 800b16c:	0800b18d 	.word	0x0800b18d
 800b170:	0800b18d 	.word	0x0800b18d
 800b174:	0800b18d 	.word	0x0800b18d
 800b178:	0800b18d 	.word	0x0800b18d
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b18d 	.word	0x0800b18d
 800b184:	0800b18d 	.word	0x0800b18d
 800b188:	0800b18d 	.word	0x0800b18d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b18c:	bf00      	nop
  }

  return (USBD_OK);
 800b18e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	4805      	ldr	r0, [pc, #20]	; (800b1c0 <CDC_Receive_FS+0x24>)
 800b1aa:	f7fe fdd9 	bl	8009d60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1ae:	4804      	ldr	r0, [pc, #16]	; (800b1c0 <CDC_Receive_FS+0x24>)
 800b1b0:	f7fe fe1a 	bl	8009de8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	20000490 	.word	0x20000490

0800b1c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <CDC_Transmit_FS+0x48>)
 800b1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e00b      	b.n	800b202 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1ea:	887b      	ldrh	r3, [r7, #2]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4806      	ldr	r0, [pc, #24]	; (800b20c <CDC_Transmit_FS+0x48>)
 800b1f2:	f7fe fd9c 	bl	8009d2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b1f6:	4805      	ldr	r0, [pc, #20]	; (800b20c <CDC_Transmit_FS+0x48>)
 800b1f8:	f7fe fdc6 	bl	8009d88 <USBD_CDC_TransmitPacket>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b200:	7bfb      	ldrb	r3, [r7, #15]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20000490 	.word	0x20000490

0800b210 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	4613      	mov	r3, r2
 800b21c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b226:	4618      	mov	r0, r3
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
	...

0800b234 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2212      	movs	r2, #18
 800b244:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b246:	4b03      	ldr	r3, [pc, #12]	; (800b254 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b248:	4618      	mov	r0, r3
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	200001dc 	.word	0x200001dc

0800b258 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	6039      	str	r1, [r7, #0]
 800b262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	2204      	movs	r2, #4
 800b268:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b26a:	4b03      	ldr	r3, [pc, #12]	; (800b278 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	200001f0 	.word	0x200001f0

0800b27c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d105      	bne.n	800b29a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	4907      	ldr	r1, [pc, #28]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b292:	4808      	ldr	r0, [pc, #32]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b294:	f7ff fdf7 	bl	800ae86 <USBD_GetString>
 800b298:	e004      	b.n	800b2a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	4904      	ldr	r1, [pc, #16]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b29e:	4805      	ldr	r0, [pc, #20]	; (800b2b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b2a0:	f7ff fdf1 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20001760 	.word	0x20001760
 800b2b4:	0800ca3c 	.word	0x0800ca3c

0800b2b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	6039      	str	r1, [r7, #0]
 800b2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	4904      	ldr	r1, [pc, #16]	; (800b2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2c8:	4804      	ldr	r0, [pc, #16]	; (800b2dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2ca:	f7ff fddc 	bl	800ae86 <USBD_GetString>
  return USBD_StrDesc;
 800b2ce:	4b02      	ldr	r3, [pc, #8]	; (800b2d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20001760 	.word	0x20001760
 800b2dc:	0800ca50 	.word	0x0800ca50

0800b2e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	6039      	str	r1, [r7, #0]
 800b2ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	221a      	movs	r2, #26
 800b2f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2f2:	f000 f843 	bl	800b37c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2f6:	4b02      	ldr	r3, [pc, #8]	; (800b300 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	200001f4 	.word	0x200001f4

0800b304 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	4603      	mov	r3, r0
 800b30c:	6039      	str	r1, [r7, #0]
 800b30e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b310:	79fb      	ldrb	r3, [r7, #7]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d105      	bne.n	800b322 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	4907      	ldr	r1, [pc, #28]	; (800b338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b31a:	4808      	ldr	r0, [pc, #32]	; (800b33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b31c:	f7ff fdb3 	bl	800ae86 <USBD_GetString>
 800b320:	e004      	b.n	800b32c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	4904      	ldr	r1, [pc, #16]	; (800b338 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b326:	4805      	ldr	r0, [pc, #20]	; (800b33c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b328:	f7ff fdad 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20001760 	.word	0x20001760
 800b33c:	0800ca64 	.word	0x0800ca64

0800b340 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	6039      	str	r1, [r7, #0]
 800b34a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b34c:	79fb      	ldrb	r3, [r7, #7]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d105      	bne.n	800b35e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	4907      	ldr	r1, [pc, #28]	; (800b374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b356:	4808      	ldr	r0, [pc, #32]	; (800b378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b358:	f7ff fd95 	bl	800ae86 <USBD_GetString>
 800b35c:	e004      	b.n	800b368 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	4904      	ldr	r1, [pc, #16]	; (800b374 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b362:	4805      	ldr	r0, [pc, #20]	; (800b378 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b364:	f7ff fd8f 	bl	800ae86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b368:	4b02      	ldr	r3, [pc, #8]	; (800b374 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20001760 	.word	0x20001760
 800b378:	0800ca70 	.word	0x0800ca70

0800b37c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b382:	4b0f      	ldr	r3, [pc, #60]	; (800b3c0 <Get_SerialNum+0x44>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <Get_SerialNum+0x48>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b38e:	4b0e      	ldr	r3, [pc, #56]	; (800b3c8 <Get_SerialNum+0x4c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4413      	add	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3a2:	2208      	movs	r2, #8
 800b3a4:	4909      	ldr	r1, [pc, #36]	; (800b3cc <Get_SerialNum+0x50>)
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 f814 	bl	800b3d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	4908      	ldr	r1, [pc, #32]	; (800b3d0 <Get_SerialNum+0x54>)
 800b3b0:	68b8      	ldr	r0, [r7, #8]
 800b3b2:	f000 f80f 	bl	800b3d4 <IntToUnicode>
  }
}
 800b3b6:	bf00      	nop
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	1fff7a10 	.word	0x1fff7a10
 800b3c4:	1fff7a14 	.word	0x1fff7a14
 800b3c8:	1fff7a18 	.word	0x1fff7a18
 800b3cc:	200001f6 	.word	0x200001f6
 800b3d0:	20000206 	.word	0x20000206

0800b3d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	75fb      	strb	r3, [r7, #23]
 800b3ea:	e027      	b.n	800b43c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	0f1b      	lsrs	r3, r3, #28
 800b3f0:	2b09      	cmp	r3, #9
 800b3f2:	d80b      	bhi.n	800b40c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	0f1b      	lsrs	r3, r3, #28
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	7dfb      	ldrb	r3, [r7, #23]
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	4619      	mov	r1, r3
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	440b      	add	r3, r1
 800b404:	3230      	adds	r2, #48	; 0x30
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	701a      	strb	r2, [r3, #0]
 800b40a:	e00a      	b.n	800b422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	0f1b      	lsrs	r3, r3, #28
 800b410:	b2da      	uxtb	r2, r3
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4619      	mov	r1, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	440b      	add	r3, r1
 800b41c:	3237      	adds	r2, #55	; 0x37
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	3301      	adds	r3, #1
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	4413      	add	r3, r2
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	3301      	adds	r3, #1
 800b43a:	75fb      	strb	r3, [r7, #23]
 800b43c:	7dfa      	ldrb	r2, [r7, #23]
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	429a      	cmp	r2, r3
 800b442:	d3d3      	bcc.n	800b3ec <IntToUnicode+0x18>
  }
}
 800b444:	bf00      	nop
 800b446:	371c      	adds	r7, #28
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	; 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b458:	f107 0314 	add.w	r3, r7, #20
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	609a      	str	r2, [r3, #8]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b470:	d13a      	bne.n	800b4e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	4b1e      	ldr	r3, [pc, #120]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	4a1d      	ldr	r2, [pc, #116]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	6313      	str	r3, [r2, #48]	; 0x30
 800b482:	4b1b      	ldr	r3, [pc, #108]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b48e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b494:	2302      	movs	r3, #2
 800b496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b49c:	2303      	movs	r3, #3
 800b49e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4a0:	230a      	movs	r3, #10
 800b4a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4a4:	f107 0314 	add.w	r3, r7, #20
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4812      	ldr	r0, [pc, #72]	; (800b4f4 <HAL_PCD_MspInit+0xa4>)
 800b4ac:	f7f7 ff90 	bl	80033d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b4:	4a0e      	ldr	r2, [pc, #56]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ba:	6353      	str	r3, [r2, #52]	; 0x34
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c4:	4a0a      	ldr	r2, [pc, #40]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b4c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4ca:	6453      	str	r3, [r2, #68]	; 0x44
 800b4cc:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <HAL_PCD_MspInit+0xa0>)
 800b4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2100      	movs	r1, #0
 800b4dc:	2043      	movs	r0, #67	; 0x43
 800b4de:	f7f7 fba2 	bl	8002c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4e2:	2043      	movs	r0, #67	; 0x43
 800b4e4:	f7f7 fbbb 	bl	8002c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b4e8:	bf00      	nop
 800b4ea:	3728      	adds	r7, #40	; 0x28
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	40023800 	.word	0x40023800
 800b4f4:	40020000 	.word	0x40020000

0800b4f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f7fe fd36 	bl	8009f80 <USBD_LL_SetupStage>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b52e:	78fa      	ldrb	r2, [r7, #3]
 800b530:	6879      	ldr	r1, [r7, #4]
 800b532:	4613      	mov	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	1a9b      	subs	r3, r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	440b      	add	r3, r1
 800b53c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	78fb      	ldrb	r3, [r7, #3]
 800b544:	4619      	mov	r1, r3
 800b546:	f7fe fd6e 	bl	800a026 <USBD_LL_DataOutStage>
}
 800b54a:	bf00      	nop
 800b54c:	3708      	adds	r7, #8
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b082      	sub	sp, #8
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	460b      	mov	r3, r1
 800b55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b564:	78fa      	ldrb	r2, [r7, #3]
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	4613      	mov	r3, r2
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	1a9b      	subs	r3, r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	3348      	adds	r3, #72	; 0x48
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	78fb      	ldrb	r3, [r7, #3]
 800b578:	4619      	mov	r1, r3
 800b57a:	f7fe fdb7 	bl	800a0ec <USBD_LL_DataInStage>
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b082      	sub	sp, #8
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe febb 	bl	800a310 <USBD_LL_SOF>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d001      	beq.n	800b5ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b5b6:	f7f6 f83f 	bl	8001638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5c0:	7bfa      	ldrb	r2, [r7, #15]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fe68 	bl	800a29a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fe21 	bl	800a218 <USBD_LL_Reset>
}
 800b5d6:	bf00      	nop
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
	...

0800b5e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fe63 	bl	800a2ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	6812      	ldr	r2, [r2, #0]
 800b602:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d005      	beq.n	800b620 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <HAL_PCD_SuspendCallback+0x48>)
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	4a03      	ldr	r2, [pc, #12]	; (800b628 <HAL_PCD_SuspendCallback+0x48>)
 800b61a:	f043 0306 	orr.w	r3, r3, #6
 800b61e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	e000ed00 	.word	0xe000ed00

0800b62c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fe52 	bl	800a2e4 <USBD_LL_Resume>
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b65a:	78fa      	ldrb	r2, [r7, #3]
 800b65c:	4611      	mov	r1, r2
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fe fe7d 	bl	800a35e <USBD_LL_IsoOUTIncomplete>
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b67e:	78fa      	ldrb	r2, [r7, #3]
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fe5e 	bl	800a344 <USBD_LL_IsoINIncomplete>
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fe6a 	bl	800a378 <USBD_LL_DevConnected>
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe fe67 	bl	800a38e <USBD_LL_DevDisconnected>
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d13c      	bne.n	800b752 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b6d8:	4a20      	ldr	r2, [pc, #128]	; (800b75c <USBD_LL_Init+0x94>)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a1e      	ldr	r2, [pc, #120]	; (800b75c <USBD_LL_Init+0x94>)
 800b6e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b6e8:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <USBD_LL_Init+0x94>)
 800b6ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b6ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b6f0:	4b1a      	ldr	r3, [pc, #104]	; (800b75c <USBD_LL_Init+0x94>)
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b6f6:	4b19      	ldr	r3, [pc, #100]	; (800b75c <USBD_LL_Init+0x94>)
 800b6f8:	2202      	movs	r2, #2
 800b6fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b6fc:	4b17      	ldr	r3, [pc, #92]	; (800b75c <USBD_LL_Init+0x94>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b702:	4b16      	ldr	r3, [pc, #88]	; (800b75c <USBD_LL_Init+0x94>)
 800b704:	2202      	movs	r2, #2
 800b706:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b708:	4b14      	ldr	r3, [pc, #80]	; (800b75c <USBD_LL_Init+0x94>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <USBD_LL_Init+0x94>)
 800b710:	2200      	movs	r2, #0
 800b712:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b714:	4b11      	ldr	r3, [pc, #68]	; (800b75c <USBD_LL_Init+0x94>)
 800b716:	2200      	movs	r2, #0
 800b718:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b71a:	4b10      	ldr	r3, [pc, #64]	; (800b75c <USBD_LL_Init+0x94>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b720:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <USBD_LL_Init+0x94>)
 800b722:	2200      	movs	r2, #0
 800b724:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b726:	480d      	ldr	r0, [pc, #52]	; (800b75c <USBD_LL_Init+0x94>)
 800b728:	f7fa fc6e 	bl	8006008 <HAL_PCD_Init>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b732:	f7f5 ff81 	bl	8001638 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b736:	2180      	movs	r1, #128	; 0x80
 800b738:	4808      	ldr	r0, [pc, #32]	; (800b75c <USBD_LL_Init+0x94>)
 800b73a:	f7fb fdcc 	bl	80072d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b73e:	2240      	movs	r2, #64	; 0x40
 800b740:	2100      	movs	r1, #0
 800b742:	4806      	ldr	r0, [pc, #24]	; (800b75c <USBD_LL_Init+0x94>)
 800b744:	f7fb fd80 	bl	8007248 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b748:	2280      	movs	r2, #128	; 0x80
 800b74a:	2101      	movs	r1, #1
 800b74c:	4803      	ldr	r0, [pc, #12]	; (800b75c <USBD_LL_Init+0x94>)
 800b74e:	f7fb fd7b 	bl	8007248 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20001960 	.word	0x20001960

0800b760 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b776:	4618      	mov	r0, r3
 800b778:	f7fa fd63 	bl	8006242 <HAL_PCD_Start>
 800b77c:	4603      	mov	r3, r0
 800b77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b780:	7bfb      	ldrb	r3, [r7, #15]
 800b782:	4618      	mov	r0, r3
 800b784:	f000 f92a 	bl	800b9dc <USBD_Get_USB_Status>
 800b788:	4603      	mov	r3, r0
 800b78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	4608      	mov	r0, r1
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	70fb      	strb	r3, [r7, #3]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	70bb      	strb	r3, [r7, #2]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b7be:	78bb      	ldrb	r3, [r7, #2]
 800b7c0:	883a      	ldrh	r2, [r7, #0]
 800b7c2:	78f9      	ldrb	r1, [r7, #3]
 800b7c4:	f7fb f947 	bl	8006a56 <HAL_PCD_EP_Open>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7cc:	7bfb      	ldrb	r3, [r7, #15]
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 f904 	bl	800b9dc <USBD_Get_USB_Status>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7fc:	78fa      	ldrb	r2, [r7, #3]
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7fb f990 	bl	8006b26 <HAL_PCD_EP_Close>
 800b806:	4603      	mov	r3, r0
 800b808:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 f8e5 	bl	800b9dc <USBD_Get_USB_Status>
 800b812:	4603      	mov	r3, r0
 800b814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b816:	7bbb      	ldrb	r3, [r7, #14]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fb fa68 	bl	8006d14 <HAL_PCD_EP_SetStall>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f8c6 	bl	800b9dc <USBD_Get_USB_Status>
 800b850:	4603      	mov	r3, r0
 800b852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b854:	7bbb      	ldrb	r3, [r7, #14]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	460b      	mov	r3, r1
 800b868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	4611      	mov	r1, r2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fb faad 	bl	8006ddc <HAL_PCD_EP_ClrStall>
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 f8a7 	bl	800b9dc <USBD_Get_USB_Status>
 800b88e:	4603      	mov	r3, r0
 800b890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b892:	7bbb      	ldrb	r3, [r7, #14]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	da0b      	bge.n	800b8d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	333e      	adds	r3, #62	; 0x3e
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	e00b      	b.n	800b8e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8d6:	68f9      	ldr	r1, [r7, #12]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	00db      	lsls	r3, r3, #3
 800b8dc:	1a9b      	subs	r3, r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	440b      	add	r3, r1
 800b8e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	4611      	mov	r1, r2
 800b912:	4618      	mov	r0, r3
 800b914:	f7fb f87a 	bl	8006a0c <HAL_PCD_SetAddress>
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f85c 	bl	800b9dc <USBD_Get_USB_Status>
 800b924:	4603      	mov	r3, r0
 800b926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b928:	7bbb      	ldrb	r3, [r7, #14]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	60f8      	str	r0, [r7, #12]
 800b93a:	607a      	str	r2, [r7, #4]
 800b93c:	603b      	str	r3, [r7, #0]
 800b93e:	460b      	mov	r3, r1
 800b940:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b950:	7af9      	ldrb	r1, [r7, #11]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	f7fb f993 	bl	8006c80 <HAL_PCD_EP_Transmit>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	4618      	mov	r0, r3
 800b962:	f000 f83b 	bl	800b9dc <USBD_Get_USB_Status>
 800b966:	4603      	mov	r3, r0
 800b968:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b96a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	607a      	str	r2, [r7, #4]
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	460b      	mov	r3, r1
 800b982:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b984:	2300      	movs	r3, #0
 800b986:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b992:	7af9      	ldrb	r1, [r7, #11]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	f7fb f90f 	bl	8006bba <HAL_PCD_EP_Receive>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f81a 	bl	800b9dc <USBD_Get_USB_Status>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9c8:	78fa      	ldrb	r2, [r7, #3]
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fb f93f 	bl	8006c50 <HAL_PCD_EP_GetRxCount>
 800b9d2:	4603      	mov	r3, r0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9ea:	79fb      	ldrb	r3, [r7, #7]
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d817      	bhi.n	800ba20 <USBD_Get_USB_Status+0x44>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <USBD_Get_USB_Status+0x1c>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba09 	.word	0x0800ba09
 800b9fc:	0800ba0f 	.word	0x0800ba0f
 800ba00:	0800ba15 	.word	0x0800ba15
 800ba04:	0800ba1b 	.word	0x0800ba1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba0c:	e00b      	b.n	800ba26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]
    break;
 800ba12:	e008      	b.n	800ba26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba14:	2301      	movs	r3, #1
 800ba16:	73fb      	strb	r3, [r7, #15]
    break;
 800ba18:	e005      	b.n	800ba26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1e:	e002      	b.n	800ba26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba20:	2303      	movs	r3, #3
 800ba22:	73fb      	strb	r3, [r7, #15]
    break;
 800ba24:	bf00      	nop
  }
  return usb_status;
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <__errno>:
 800ba34:	4b01      	ldr	r3, [pc, #4]	; (800ba3c <__errno+0x8>)
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20000210 	.word	0x20000210

0800ba40 <__libc_init_array>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	4e0d      	ldr	r6, [pc, #52]	; (800ba78 <__libc_init_array+0x38>)
 800ba44:	4c0d      	ldr	r4, [pc, #52]	; (800ba7c <__libc_init_array+0x3c>)
 800ba46:	1ba4      	subs	r4, r4, r6
 800ba48:	10a4      	asrs	r4, r4, #2
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	42a5      	cmp	r5, r4
 800ba4e:	d109      	bne.n	800ba64 <__libc_init_array+0x24>
 800ba50:	4e0b      	ldr	r6, [pc, #44]	; (800ba80 <__libc_init_array+0x40>)
 800ba52:	4c0c      	ldr	r4, [pc, #48]	; (800ba84 <__libc_init_array+0x44>)
 800ba54:	f000 ffd0 	bl	800c9f8 <_init>
 800ba58:	1ba4      	subs	r4, r4, r6
 800ba5a:	10a4      	asrs	r4, r4, #2
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	42a5      	cmp	r5, r4
 800ba60:	d105      	bne.n	800ba6e <__libc_init_array+0x2e>
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba68:	4798      	blx	r3
 800ba6a:	3501      	adds	r5, #1
 800ba6c:	e7ee      	b.n	800ba4c <__libc_init_array+0xc>
 800ba6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba72:	4798      	blx	r3
 800ba74:	3501      	adds	r5, #1
 800ba76:	e7f2      	b.n	800ba5e <__libc_init_array+0x1e>
 800ba78:	0800cb28 	.word	0x0800cb28
 800ba7c:	0800cb28 	.word	0x0800cb28
 800ba80:	0800cb28 	.word	0x0800cb28
 800ba84:	0800cb2c 	.word	0x0800cb2c

0800ba88 <malloc>:
 800ba88:	4b02      	ldr	r3, [pc, #8]	; (800ba94 <malloc+0xc>)
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	f000 b861 	b.w	800bb54 <_malloc_r>
 800ba92:	bf00      	nop
 800ba94:	20000210 	.word	0x20000210

0800ba98 <free>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <free+0xc>)
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f000 b80b 	b.w	800bab8 <_free_r>
 800baa2:	bf00      	nop
 800baa4:	20000210 	.word	0x20000210

0800baa8 <memset>:
 800baa8:	4402      	add	r2, r0
 800baaa:	4603      	mov	r3, r0
 800baac:	4293      	cmp	r3, r2
 800baae:	d100      	bne.n	800bab2 <memset+0xa>
 800bab0:	4770      	bx	lr
 800bab2:	f803 1b01 	strb.w	r1, [r3], #1
 800bab6:	e7f9      	b.n	800baac <memset+0x4>

0800bab8 <_free_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	4605      	mov	r5, r0
 800babc:	2900      	cmp	r1, #0
 800babe:	d045      	beq.n	800bb4c <_free_r+0x94>
 800bac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac4:	1f0c      	subs	r4, r1, #4
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	bfb8      	it	lt
 800baca:	18e4      	addlt	r4, r4, r3
 800bacc:	f000 f8cc 	bl	800bc68 <__malloc_lock>
 800bad0:	4a1f      	ldr	r2, [pc, #124]	; (800bb50 <_free_r+0x98>)
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	4610      	mov	r0, r2
 800bad6:	b933      	cbnz	r3, 800bae6 <_free_r+0x2e>
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	6014      	str	r4, [r2, #0]
 800badc:	4628      	mov	r0, r5
 800bade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae2:	f000 b8c2 	b.w	800bc6a <__malloc_unlock>
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	d90c      	bls.n	800bb04 <_free_r+0x4c>
 800baea:	6821      	ldr	r1, [r4, #0]
 800baec:	1862      	adds	r2, r4, r1
 800baee:	4293      	cmp	r3, r2
 800baf0:	bf04      	itt	eq
 800baf2:	681a      	ldreq	r2, [r3, #0]
 800baf4:	685b      	ldreq	r3, [r3, #4]
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	bf04      	itt	eq
 800bafa:	1852      	addeq	r2, r2, r1
 800bafc:	6022      	streq	r2, [r4, #0]
 800bafe:	6004      	str	r4, [r0, #0]
 800bb00:	e7ec      	b.n	800badc <_free_r+0x24>
 800bb02:	4613      	mov	r3, r2
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	b10a      	cbz	r2, 800bb0c <_free_r+0x54>
 800bb08:	42a2      	cmp	r2, r4
 800bb0a:	d9fa      	bls.n	800bb02 <_free_r+0x4a>
 800bb0c:	6819      	ldr	r1, [r3, #0]
 800bb0e:	1858      	adds	r0, r3, r1
 800bb10:	42a0      	cmp	r0, r4
 800bb12:	d10b      	bne.n	800bb2c <_free_r+0x74>
 800bb14:	6820      	ldr	r0, [r4, #0]
 800bb16:	4401      	add	r1, r0
 800bb18:	1858      	adds	r0, r3, r1
 800bb1a:	4282      	cmp	r2, r0
 800bb1c:	6019      	str	r1, [r3, #0]
 800bb1e:	d1dd      	bne.n	800badc <_free_r+0x24>
 800bb20:	6810      	ldr	r0, [r2, #0]
 800bb22:	6852      	ldr	r2, [r2, #4]
 800bb24:	605a      	str	r2, [r3, #4]
 800bb26:	4401      	add	r1, r0
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	e7d7      	b.n	800badc <_free_r+0x24>
 800bb2c:	d902      	bls.n	800bb34 <_free_r+0x7c>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	e7d3      	b.n	800badc <_free_r+0x24>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	1821      	adds	r1, r4, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	bf04      	itt	eq
 800bb3c:	6811      	ldreq	r1, [r2, #0]
 800bb3e:	6852      	ldreq	r2, [r2, #4]
 800bb40:	6062      	str	r2, [r4, #4]
 800bb42:	bf04      	itt	eq
 800bb44:	1809      	addeq	r1, r1, r0
 800bb46:	6021      	streq	r1, [r4, #0]
 800bb48:	605c      	str	r4, [r3, #4]
 800bb4a:	e7c7      	b.n	800badc <_free_r+0x24>
 800bb4c:	bd38      	pop	{r3, r4, r5, pc}
 800bb4e:	bf00      	nop
 800bb50:	200002c0 	.word	0x200002c0

0800bb54 <_malloc_r>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	1ccd      	adds	r5, r1, #3
 800bb58:	f025 0503 	bic.w	r5, r5, #3
 800bb5c:	3508      	adds	r5, #8
 800bb5e:	2d0c      	cmp	r5, #12
 800bb60:	bf38      	it	cc
 800bb62:	250c      	movcc	r5, #12
 800bb64:	2d00      	cmp	r5, #0
 800bb66:	4606      	mov	r6, r0
 800bb68:	db01      	blt.n	800bb6e <_malloc_r+0x1a>
 800bb6a:	42a9      	cmp	r1, r5
 800bb6c:	d903      	bls.n	800bb76 <_malloc_r+0x22>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6033      	str	r3, [r6, #0]
 800bb72:	2000      	movs	r0, #0
 800bb74:	bd70      	pop	{r4, r5, r6, pc}
 800bb76:	f000 f877 	bl	800bc68 <__malloc_lock>
 800bb7a:	4a21      	ldr	r2, [pc, #132]	; (800bc00 <_malloc_r+0xac>)
 800bb7c:	6814      	ldr	r4, [r2, #0]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	b991      	cbnz	r1, 800bba8 <_malloc_r+0x54>
 800bb82:	4c20      	ldr	r4, [pc, #128]	; (800bc04 <_malloc_r+0xb0>)
 800bb84:	6823      	ldr	r3, [r4, #0]
 800bb86:	b91b      	cbnz	r3, 800bb90 <_malloc_r+0x3c>
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f000 f83d 	bl	800bc08 <_sbrk_r>
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	4629      	mov	r1, r5
 800bb92:	4630      	mov	r0, r6
 800bb94:	f000 f838 	bl	800bc08 <_sbrk_r>
 800bb98:	1c43      	adds	r3, r0, #1
 800bb9a:	d124      	bne.n	800bbe6 <_malloc_r+0x92>
 800bb9c:	230c      	movs	r3, #12
 800bb9e:	6033      	str	r3, [r6, #0]
 800bba0:	4630      	mov	r0, r6
 800bba2:	f000 f862 	bl	800bc6a <__malloc_unlock>
 800bba6:	e7e4      	b.n	800bb72 <_malloc_r+0x1e>
 800bba8:	680b      	ldr	r3, [r1, #0]
 800bbaa:	1b5b      	subs	r3, r3, r5
 800bbac:	d418      	bmi.n	800bbe0 <_malloc_r+0x8c>
 800bbae:	2b0b      	cmp	r3, #11
 800bbb0:	d90f      	bls.n	800bbd2 <_malloc_r+0x7e>
 800bbb2:	600b      	str	r3, [r1, #0]
 800bbb4:	50cd      	str	r5, [r1, r3]
 800bbb6:	18cc      	adds	r4, r1, r3
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f000 f856 	bl	800bc6a <__malloc_unlock>
 800bbbe:	f104 000b 	add.w	r0, r4, #11
 800bbc2:	1d23      	adds	r3, r4, #4
 800bbc4:	f020 0007 	bic.w	r0, r0, #7
 800bbc8:	1ac3      	subs	r3, r0, r3
 800bbca:	d0d3      	beq.n	800bb74 <_malloc_r+0x20>
 800bbcc:	425a      	negs	r2, r3
 800bbce:	50e2      	str	r2, [r4, r3]
 800bbd0:	e7d0      	b.n	800bb74 <_malloc_r+0x20>
 800bbd2:	428c      	cmp	r4, r1
 800bbd4:	684b      	ldr	r3, [r1, #4]
 800bbd6:	bf16      	itet	ne
 800bbd8:	6063      	strne	r3, [r4, #4]
 800bbda:	6013      	streq	r3, [r2, #0]
 800bbdc:	460c      	movne	r4, r1
 800bbde:	e7eb      	b.n	800bbb8 <_malloc_r+0x64>
 800bbe0:	460c      	mov	r4, r1
 800bbe2:	6849      	ldr	r1, [r1, #4]
 800bbe4:	e7cc      	b.n	800bb80 <_malloc_r+0x2c>
 800bbe6:	1cc4      	adds	r4, r0, #3
 800bbe8:	f024 0403 	bic.w	r4, r4, #3
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d005      	beq.n	800bbfc <_malloc_r+0xa8>
 800bbf0:	1a21      	subs	r1, r4, r0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f000 f808 	bl	800bc08 <_sbrk_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d0cf      	beq.n	800bb9c <_malloc_r+0x48>
 800bbfc:	6025      	str	r5, [r4, #0]
 800bbfe:	e7db      	b.n	800bbb8 <_malloc_r+0x64>
 800bc00:	200002c0 	.word	0x200002c0
 800bc04:	200002c4 	.word	0x200002c4

0800bc08 <_sbrk_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4c06      	ldr	r4, [pc, #24]	; (800bc24 <_sbrk_r+0x1c>)
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	4605      	mov	r5, r0
 800bc10:	4608      	mov	r0, r1
 800bc12:	6023      	str	r3, [r4, #0]
 800bc14:	f7f6 f97c 	bl	8001f10 <_sbrk>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_sbrk_r+0x1a>
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_sbrk_r+0x1a>
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	20001d68 	.word	0x20001d68

0800bc28 <siprintf>:
 800bc28:	b40e      	push	{r1, r2, r3}
 800bc2a:	b500      	push	{lr}
 800bc2c:	b09c      	sub	sp, #112	; 0x70
 800bc2e:	ab1d      	add	r3, sp, #116	; 0x74
 800bc30:	9002      	str	r0, [sp, #8]
 800bc32:	9006      	str	r0, [sp, #24]
 800bc34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc38:	4809      	ldr	r0, [pc, #36]	; (800bc60 <siprintf+0x38>)
 800bc3a:	9107      	str	r1, [sp, #28]
 800bc3c:	9104      	str	r1, [sp, #16]
 800bc3e:	4909      	ldr	r1, [pc, #36]	; (800bc64 <siprintf+0x3c>)
 800bc40:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc44:	9105      	str	r1, [sp, #20]
 800bc46:	6800      	ldr	r0, [r0, #0]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	a902      	add	r1, sp, #8
 800bc4c:	f000 f868 	bl	800bd20 <_svfiprintf_r>
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	2200      	movs	r2, #0
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	b01c      	add	sp, #112	; 0x70
 800bc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc5c:	b003      	add	sp, #12
 800bc5e:	4770      	bx	lr
 800bc60:	20000210 	.word	0x20000210
 800bc64:	ffff0208 	.word	0xffff0208

0800bc68 <__malloc_lock>:
 800bc68:	4770      	bx	lr

0800bc6a <__malloc_unlock>:
 800bc6a:	4770      	bx	lr

0800bc6c <__ssputs_r>:
 800bc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	688e      	ldr	r6, [r1, #8]
 800bc72:	429e      	cmp	r6, r3
 800bc74:	4682      	mov	sl, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4690      	mov	r8, r2
 800bc7a:	4699      	mov	r9, r3
 800bc7c:	d837      	bhi.n	800bcee <__ssputs_r+0x82>
 800bc7e:	898a      	ldrh	r2, [r1, #12]
 800bc80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc84:	d031      	beq.n	800bcea <__ssputs_r+0x7e>
 800bc86:	6825      	ldr	r5, [r4, #0]
 800bc88:	6909      	ldr	r1, [r1, #16]
 800bc8a:	1a6f      	subs	r7, r5, r1
 800bc8c:	6965      	ldr	r5, [r4, #20]
 800bc8e:	2302      	movs	r3, #2
 800bc90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc94:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc98:	f109 0301 	add.w	r3, r9, #1
 800bc9c:	443b      	add	r3, r7
 800bc9e:	429d      	cmp	r5, r3
 800bca0:	bf38      	it	cc
 800bca2:	461d      	movcc	r5, r3
 800bca4:	0553      	lsls	r3, r2, #21
 800bca6:	d530      	bpl.n	800bd0a <__ssputs_r+0x9e>
 800bca8:	4629      	mov	r1, r5
 800bcaa:	f7ff ff53 	bl	800bb54 <_malloc_r>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	b950      	cbnz	r0, 800bcc8 <__ssputs_r+0x5c>
 800bcb2:	230c      	movs	r3, #12
 800bcb4:	f8ca 3000 	str.w	r3, [sl]
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbe:	81a3      	strh	r3, [r4, #12]
 800bcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc8:	463a      	mov	r2, r7
 800bcca:	6921      	ldr	r1, [r4, #16]
 800bccc:	f000 faa8 	bl	800c220 <memcpy>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcda:	81a3      	strh	r3, [r4, #12]
 800bcdc:	6126      	str	r6, [r4, #16]
 800bcde:	6165      	str	r5, [r4, #20]
 800bce0:	443e      	add	r6, r7
 800bce2:	1bed      	subs	r5, r5, r7
 800bce4:	6026      	str	r6, [r4, #0]
 800bce6:	60a5      	str	r5, [r4, #8]
 800bce8:	464e      	mov	r6, r9
 800bcea:	454e      	cmp	r6, r9
 800bcec:	d900      	bls.n	800bcf0 <__ssputs_r+0x84>
 800bcee:	464e      	mov	r6, r9
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	f000 fa9e 	bl	800c236 <memmove>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	1b9b      	subs	r3, r3, r6
 800bcfe:	60a3      	str	r3, [r4, #8]
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	441e      	add	r6, r3
 800bd04:	6026      	str	r6, [r4, #0]
 800bd06:	2000      	movs	r0, #0
 800bd08:	e7dc      	b.n	800bcc4 <__ssputs_r+0x58>
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	f000 faac 	bl	800c268 <_realloc_r>
 800bd10:	4606      	mov	r6, r0
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d1e2      	bne.n	800bcdc <__ssputs_r+0x70>
 800bd16:	6921      	ldr	r1, [r4, #16]
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f7ff fecd 	bl	800bab8 <_free_r>
 800bd1e:	e7c8      	b.n	800bcb2 <__ssputs_r+0x46>

0800bd20 <_svfiprintf_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	461d      	mov	r5, r3
 800bd26:	898b      	ldrh	r3, [r1, #12]
 800bd28:	061f      	lsls	r7, r3, #24
 800bd2a:	b09d      	sub	sp, #116	; 0x74
 800bd2c:	4680      	mov	r8, r0
 800bd2e:	460c      	mov	r4, r1
 800bd30:	4616      	mov	r6, r2
 800bd32:	d50f      	bpl.n	800bd54 <_svfiprintf_r+0x34>
 800bd34:	690b      	ldr	r3, [r1, #16]
 800bd36:	b96b      	cbnz	r3, 800bd54 <_svfiprintf_r+0x34>
 800bd38:	2140      	movs	r1, #64	; 0x40
 800bd3a:	f7ff ff0b 	bl	800bb54 <_malloc_r>
 800bd3e:	6020      	str	r0, [r4, #0]
 800bd40:	6120      	str	r0, [r4, #16]
 800bd42:	b928      	cbnz	r0, 800bd50 <_svfiprintf_r+0x30>
 800bd44:	230c      	movs	r3, #12
 800bd46:	f8c8 3000 	str.w	r3, [r8]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4e:	e0c8      	b.n	800bee2 <_svfiprintf_r+0x1c2>
 800bd50:	2340      	movs	r3, #64	; 0x40
 800bd52:	6163      	str	r3, [r4, #20]
 800bd54:	2300      	movs	r3, #0
 800bd56:	9309      	str	r3, [sp, #36]	; 0x24
 800bd58:	2320      	movs	r3, #32
 800bd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd5e:	2330      	movs	r3, #48	; 0x30
 800bd60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd64:	9503      	str	r5, [sp, #12]
 800bd66:	f04f 0b01 	mov.w	fp, #1
 800bd6a:	4637      	mov	r7, r6
 800bd6c:	463d      	mov	r5, r7
 800bd6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd72:	b10b      	cbz	r3, 800bd78 <_svfiprintf_r+0x58>
 800bd74:	2b25      	cmp	r3, #37	; 0x25
 800bd76:	d13e      	bne.n	800bdf6 <_svfiprintf_r+0xd6>
 800bd78:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd7c:	d00b      	beq.n	800bd96 <_svfiprintf_r+0x76>
 800bd7e:	4653      	mov	r3, sl
 800bd80:	4632      	mov	r2, r6
 800bd82:	4621      	mov	r1, r4
 800bd84:	4640      	mov	r0, r8
 800bd86:	f7ff ff71 	bl	800bc6c <__ssputs_r>
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	f000 80a4 	beq.w	800bed8 <_svfiprintf_r+0x1b8>
 800bd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd92:	4453      	add	r3, sl
 800bd94:	9309      	str	r3, [sp, #36]	; 0x24
 800bd96:	783b      	ldrb	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 809d 	beq.w	800bed8 <_svfiprintf_r+0x1b8>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	9307      	str	r3, [sp, #28]
 800bdac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdb0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb2:	462f      	mov	r7, r5
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bdba:	4850      	ldr	r0, [pc, #320]	; (800befc <_svfiprintf_r+0x1dc>)
 800bdbc:	f7f4 fa10 	bl	80001e0 <memchr>
 800bdc0:	9b04      	ldr	r3, [sp, #16]
 800bdc2:	b9d0      	cbnz	r0, 800bdfa <_svfiprintf_r+0xda>
 800bdc4:	06d9      	lsls	r1, r3, #27
 800bdc6:	bf44      	itt	mi
 800bdc8:	2220      	movmi	r2, #32
 800bdca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdce:	071a      	lsls	r2, r3, #28
 800bdd0:	bf44      	itt	mi
 800bdd2:	222b      	movmi	r2, #43	; 0x2b
 800bdd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bdd8:	782a      	ldrb	r2, [r5, #0]
 800bdda:	2a2a      	cmp	r2, #42	; 0x2a
 800bddc:	d015      	beq.n	800be0a <_svfiprintf_r+0xea>
 800bdde:	9a07      	ldr	r2, [sp, #28]
 800bde0:	462f      	mov	r7, r5
 800bde2:	2000      	movs	r0, #0
 800bde4:	250a      	movs	r5, #10
 800bde6:	4639      	mov	r1, r7
 800bde8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdec:	3b30      	subs	r3, #48	; 0x30
 800bdee:	2b09      	cmp	r3, #9
 800bdf0:	d94d      	bls.n	800be8e <_svfiprintf_r+0x16e>
 800bdf2:	b1b8      	cbz	r0, 800be24 <_svfiprintf_r+0x104>
 800bdf4:	e00f      	b.n	800be16 <_svfiprintf_r+0xf6>
 800bdf6:	462f      	mov	r7, r5
 800bdf8:	e7b8      	b.n	800bd6c <_svfiprintf_r+0x4c>
 800bdfa:	4a40      	ldr	r2, [pc, #256]	; (800befc <_svfiprintf_r+0x1dc>)
 800bdfc:	1a80      	subs	r0, r0, r2
 800bdfe:	fa0b f000 	lsl.w	r0, fp, r0
 800be02:	4318      	orrs	r0, r3
 800be04:	9004      	str	r0, [sp, #16]
 800be06:	463d      	mov	r5, r7
 800be08:	e7d3      	b.n	800bdb2 <_svfiprintf_r+0x92>
 800be0a:	9a03      	ldr	r2, [sp, #12]
 800be0c:	1d11      	adds	r1, r2, #4
 800be0e:	6812      	ldr	r2, [r2, #0]
 800be10:	9103      	str	r1, [sp, #12]
 800be12:	2a00      	cmp	r2, #0
 800be14:	db01      	blt.n	800be1a <_svfiprintf_r+0xfa>
 800be16:	9207      	str	r2, [sp, #28]
 800be18:	e004      	b.n	800be24 <_svfiprintf_r+0x104>
 800be1a:	4252      	negs	r2, r2
 800be1c:	f043 0302 	orr.w	r3, r3, #2
 800be20:	9207      	str	r2, [sp, #28]
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	783b      	ldrb	r3, [r7, #0]
 800be26:	2b2e      	cmp	r3, #46	; 0x2e
 800be28:	d10c      	bne.n	800be44 <_svfiprintf_r+0x124>
 800be2a:	787b      	ldrb	r3, [r7, #1]
 800be2c:	2b2a      	cmp	r3, #42	; 0x2a
 800be2e:	d133      	bne.n	800be98 <_svfiprintf_r+0x178>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	1d1a      	adds	r2, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	9203      	str	r2, [sp, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfb8      	it	lt
 800be3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800be40:	3702      	adds	r7, #2
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	4d2e      	ldr	r5, [pc, #184]	; (800bf00 <_svfiprintf_r+0x1e0>)
 800be46:	7839      	ldrb	r1, [r7, #0]
 800be48:	2203      	movs	r2, #3
 800be4a:	4628      	mov	r0, r5
 800be4c:	f7f4 f9c8 	bl	80001e0 <memchr>
 800be50:	b138      	cbz	r0, 800be62 <_svfiprintf_r+0x142>
 800be52:	2340      	movs	r3, #64	; 0x40
 800be54:	1b40      	subs	r0, r0, r5
 800be56:	fa03 f000 	lsl.w	r0, r3, r0
 800be5a:	9b04      	ldr	r3, [sp, #16]
 800be5c:	4303      	orrs	r3, r0
 800be5e:	3701      	adds	r7, #1
 800be60:	9304      	str	r3, [sp, #16]
 800be62:	7839      	ldrb	r1, [r7, #0]
 800be64:	4827      	ldr	r0, [pc, #156]	; (800bf04 <_svfiprintf_r+0x1e4>)
 800be66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be6a:	2206      	movs	r2, #6
 800be6c:	1c7e      	adds	r6, r7, #1
 800be6e:	f7f4 f9b7 	bl	80001e0 <memchr>
 800be72:	2800      	cmp	r0, #0
 800be74:	d038      	beq.n	800bee8 <_svfiprintf_r+0x1c8>
 800be76:	4b24      	ldr	r3, [pc, #144]	; (800bf08 <_svfiprintf_r+0x1e8>)
 800be78:	bb13      	cbnz	r3, 800bec0 <_svfiprintf_r+0x1a0>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	3307      	adds	r3, #7
 800be7e:	f023 0307 	bic.w	r3, r3, #7
 800be82:	3308      	adds	r3, #8
 800be84:	9303      	str	r3, [sp, #12]
 800be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be88:	444b      	add	r3, r9
 800be8a:	9309      	str	r3, [sp, #36]	; 0x24
 800be8c:	e76d      	b.n	800bd6a <_svfiprintf_r+0x4a>
 800be8e:	fb05 3202 	mla	r2, r5, r2, r3
 800be92:	2001      	movs	r0, #1
 800be94:	460f      	mov	r7, r1
 800be96:	e7a6      	b.n	800bde6 <_svfiprintf_r+0xc6>
 800be98:	2300      	movs	r3, #0
 800be9a:	3701      	adds	r7, #1
 800be9c:	9305      	str	r3, [sp, #20]
 800be9e:	4619      	mov	r1, r3
 800bea0:	250a      	movs	r5, #10
 800bea2:	4638      	mov	r0, r7
 800bea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea8:	3a30      	subs	r2, #48	; 0x30
 800beaa:	2a09      	cmp	r2, #9
 800beac:	d903      	bls.n	800beb6 <_svfiprintf_r+0x196>
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d0c8      	beq.n	800be44 <_svfiprintf_r+0x124>
 800beb2:	9105      	str	r1, [sp, #20]
 800beb4:	e7c6      	b.n	800be44 <_svfiprintf_r+0x124>
 800beb6:	fb05 2101 	mla	r1, r5, r1, r2
 800beba:	2301      	movs	r3, #1
 800bebc:	4607      	mov	r7, r0
 800bebe:	e7f0      	b.n	800bea2 <_svfiprintf_r+0x182>
 800bec0:	ab03      	add	r3, sp, #12
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	4622      	mov	r2, r4
 800bec6:	4b11      	ldr	r3, [pc, #68]	; (800bf0c <_svfiprintf_r+0x1ec>)
 800bec8:	a904      	add	r1, sp, #16
 800beca:	4640      	mov	r0, r8
 800becc:	f3af 8000 	nop.w
 800bed0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bed4:	4681      	mov	r9, r0
 800bed6:	d1d6      	bne.n	800be86 <_svfiprintf_r+0x166>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	065b      	lsls	r3, r3, #25
 800bedc:	f53f af35 	bmi.w	800bd4a <_svfiprintf_r+0x2a>
 800bee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bee2:	b01d      	add	sp, #116	; 0x74
 800bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee8:	ab03      	add	r3, sp, #12
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	4622      	mov	r2, r4
 800beee:	4b07      	ldr	r3, [pc, #28]	; (800bf0c <_svfiprintf_r+0x1ec>)
 800bef0:	a904      	add	r1, sp, #16
 800bef2:	4640      	mov	r0, r8
 800bef4:	f000 f882 	bl	800bffc <_printf_i>
 800bef8:	e7ea      	b.n	800bed0 <_svfiprintf_r+0x1b0>
 800befa:	bf00      	nop
 800befc:	0800caa0 	.word	0x0800caa0
 800bf00:	0800caa6 	.word	0x0800caa6
 800bf04:	0800caaa 	.word	0x0800caaa
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	0800bc6d 	.word	0x0800bc6d

0800bf10 <_printf_common>:
 800bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	4691      	mov	r9, r2
 800bf16:	461f      	mov	r7, r3
 800bf18:	688a      	ldr	r2, [r1, #8]
 800bf1a:	690b      	ldr	r3, [r1, #16]
 800bf1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf20:	4293      	cmp	r3, r2
 800bf22:	bfb8      	it	lt
 800bf24:	4613      	movlt	r3, r2
 800bf26:	f8c9 3000 	str.w	r3, [r9]
 800bf2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460c      	mov	r4, r1
 800bf32:	b112      	cbz	r2, 800bf3a <_printf_common+0x2a>
 800bf34:	3301      	adds	r3, #1
 800bf36:	f8c9 3000 	str.w	r3, [r9]
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	0699      	lsls	r1, r3, #26
 800bf3e:	bf42      	ittt	mi
 800bf40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf44:	3302      	addmi	r3, #2
 800bf46:	f8c9 3000 	strmi.w	r3, [r9]
 800bf4a:	6825      	ldr	r5, [r4, #0]
 800bf4c:	f015 0506 	ands.w	r5, r5, #6
 800bf50:	d107      	bne.n	800bf62 <_printf_common+0x52>
 800bf52:	f104 0a19 	add.w	sl, r4, #25
 800bf56:	68e3      	ldr	r3, [r4, #12]
 800bf58:	f8d9 2000 	ldr.w	r2, [r9]
 800bf5c:	1a9b      	subs	r3, r3, r2
 800bf5e:	42ab      	cmp	r3, r5
 800bf60:	dc28      	bgt.n	800bfb4 <_printf_common+0xa4>
 800bf62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	3300      	adds	r3, #0
 800bf6a:	bf18      	it	ne
 800bf6c:	2301      	movne	r3, #1
 800bf6e:	0692      	lsls	r2, r2, #26
 800bf70:	d42d      	bmi.n	800bfce <_printf_common+0xbe>
 800bf72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf76:	4639      	mov	r1, r7
 800bf78:	4630      	mov	r0, r6
 800bf7a:	47c0      	blx	r8
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d020      	beq.n	800bfc2 <_printf_common+0xb2>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	68e5      	ldr	r5, [r4, #12]
 800bf84:	f8d9 2000 	ldr.w	r2, [r9]
 800bf88:	f003 0306 	and.w	r3, r3, #6
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	bf08      	it	eq
 800bf90:	1aad      	subeq	r5, r5, r2
 800bf92:	68a3      	ldr	r3, [r4, #8]
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	bf0c      	ite	eq
 800bf98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf9c:	2500      	movne	r5, #0
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	bfc4      	itt	gt
 800bfa2:	1a9b      	subgt	r3, r3, r2
 800bfa4:	18ed      	addgt	r5, r5, r3
 800bfa6:	f04f 0900 	mov.w	r9, #0
 800bfaa:	341a      	adds	r4, #26
 800bfac:	454d      	cmp	r5, r9
 800bfae:	d11a      	bne.n	800bfe6 <_printf_common+0xd6>
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	e008      	b.n	800bfc6 <_printf_common+0xb6>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4652      	mov	r2, sl
 800bfb8:	4639      	mov	r1, r7
 800bfba:	4630      	mov	r0, r6
 800bfbc:	47c0      	blx	r8
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	d103      	bne.n	800bfca <_printf_common+0xba>
 800bfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfca:	3501      	adds	r5, #1
 800bfcc:	e7c3      	b.n	800bf56 <_printf_common+0x46>
 800bfce:	18e1      	adds	r1, r4, r3
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	2030      	movs	r0, #48	; 0x30
 800bfd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfd8:	4422      	add	r2, r4
 800bfda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfe2:	3302      	adds	r3, #2
 800bfe4:	e7c5      	b.n	800bf72 <_printf_common+0x62>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4639      	mov	r1, r7
 800bfec:	4630      	mov	r0, r6
 800bfee:	47c0      	blx	r8
 800bff0:	3001      	adds	r0, #1
 800bff2:	d0e6      	beq.n	800bfc2 <_printf_common+0xb2>
 800bff4:	f109 0901 	add.w	r9, r9, #1
 800bff8:	e7d8      	b.n	800bfac <_printf_common+0x9c>
	...

0800bffc <_printf_i>:
 800bffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c000:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c004:	460c      	mov	r4, r1
 800c006:	7e09      	ldrb	r1, [r1, #24]
 800c008:	b085      	sub	sp, #20
 800c00a:	296e      	cmp	r1, #110	; 0x6e
 800c00c:	4617      	mov	r7, r2
 800c00e:	4606      	mov	r6, r0
 800c010:	4698      	mov	r8, r3
 800c012:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c014:	f000 80b3 	beq.w	800c17e <_printf_i+0x182>
 800c018:	d822      	bhi.n	800c060 <_printf_i+0x64>
 800c01a:	2963      	cmp	r1, #99	; 0x63
 800c01c:	d036      	beq.n	800c08c <_printf_i+0x90>
 800c01e:	d80a      	bhi.n	800c036 <_printf_i+0x3a>
 800c020:	2900      	cmp	r1, #0
 800c022:	f000 80b9 	beq.w	800c198 <_printf_i+0x19c>
 800c026:	2958      	cmp	r1, #88	; 0x58
 800c028:	f000 8083 	beq.w	800c132 <_printf_i+0x136>
 800c02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c030:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c034:	e032      	b.n	800c09c <_printf_i+0xa0>
 800c036:	2964      	cmp	r1, #100	; 0x64
 800c038:	d001      	beq.n	800c03e <_printf_i+0x42>
 800c03a:	2969      	cmp	r1, #105	; 0x69
 800c03c:	d1f6      	bne.n	800c02c <_printf_i+0x30>
 800c03e:	6820      	ldr	r0, [r4, #0]
 800c040:	6813      	ldr	r3, [r2, #0]
 800c042:	0605      	lsls	r5, r0, #24
 800c044:	f103 0104 	add.w	r1, r3, #4
 800c048:	d52a      	bpl.n	800c0a0 <_printf_i+0xa4>
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6011      	str	r1, [r2, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	da03      	bge.n	800c05a <_printf_i+0x5e>
 800c052:	222d      	movs	r2, #45	; 0x2d
 800c054:	425b      	negs	r3, r3
 800c056:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c05a:	486f      	ldr	r0, [pc, #444]	; (800c218 <_printf_i+0x21c>)
 800c05c:	220a      	movs	r2, #10
 800c05e:	e039      	b.n	800c0d4 <_printf_i+0xd8>
 800c060:	2973      	cmp	r1, #115	; 0x73
 800c062:	f000 809d 	beq.w	800c1a0 <_printf_i+0x1a4>
 800c066:	d808      	bhi.n	800c07a <_printf_i+0x7e>
 800c068:	296f      	cmp	r1, #111	; 0x6f
 800c06a:	d020      	beq.n	800c0ae <_printf_i+0xb2>
 800c06c:	2970      	cmp	r1, #112	; 0x70
 800c06e:	d1dd      	bne.n	800c02c <_printf_i+0x30>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	f043 0320 	orr.w	r3, r3, #32
 800c076:	6023      	str	r3, [r4, #0]
 800c078:	e003      	b.n	800c082 <_printf_i+0x86>
 800c07a:	2975      	cmp	r1, #117	; 0x75
 800c07c:	d017      	beq.n	800c0ae <_printf_i+0xb2>
 800c07e:	2978      	cmp	r1, #120	; 0x78
 800c080:	d1d4      	bne.n	800c02c <_printf_i+0x30>
 800c082:	2378      	movs	r3, #120	; 0x78
 800c084:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c088:	4864      	ldr	r0, [pc, #400]	; (800c21c <_printf_i+0x220>)
 800c08a:	e055      	b.n	800c138 <_printf_i+0x13c>
 800c08c:	6813      	ldr	r3, [r2, #0]
 800c08e:	1d19      	adds	r1, r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6011      	str	r1, [r2, #0]
 800c094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c09c:	2301      	movs	r3, #1
 800c09e:	e08c      	b.n	800c1ba <_printf_i+0x1be>
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6011      	str	r1, [r2, #0]
 800c0a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c0a8:	bf18      	it	ne
 800c0aa:	b21b      	sxthne	r3, r3
 800c0ac:	e7cf      	b.n	800c04e <_printf_i+0x52>
 800c0ae:	6813      	ldr	r3, [r2, #0]
 800c0b0:	6825      	ldr	r5, [r4, #0]
 800c0b2:	1d18      	adds	r0, r3, #4
 800c0b4:	6010      	str	r0, [r2, #0]
 800c0b6:	0628      	lsls	r0, r5, #24
 800c0b8:	d501      	bpl.n	800c0be <_printf_i+0xc2>
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	e002      	b.n	800c0c4 <_printf_i+0xc8>
 800c0be:	0668      	lsls	r0, r5, #25
 800c0c0:	d5fb      	bpl.n	800c0ba <_printf_i+0xbe>
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	4854      	ldr	r0, [pc, #336]	; (800c218 <_printf_i+0x21c>)
 800c0c6:	296f      	cmp	r1, #111	; 0x6f
 800c0c8:	bf14      	ite	ne
 800c0ca:	220a      	movne	r2, #10
 800c0cc:	2208      	moveq	r2, #8
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0d4:	6865      	ldr	r5, [r4, #4]
 800c0d6:	60a5      	str	r5, [r4, #8]
 800c0d8:	2d00      	cmp	r5, #0
 800c0da:	f2c0 8095 	blt.w	800c208 <_printf_i+0x20c>
 800c0de:	6821      	ldr	r1, [r4, #0]
 800c0e0:	f021 0104 	bic.w	r1, r1, #4
 800c0e4:	6021      	str	r1, [r4, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d13d      	bne.n	800c166 <_printf_i+0x16a>
 800c0ea:	2d00      	cmp	r5, #0
 800c0ec:	f040 808e 	bne.w	800c20c <_printf_i+0x210>
 800c0f0:	4665      	mov	r5, ip
 800c0f2:	2a08      	cmp	r2, #8
 800c0f4:	d10b      	bne.n	800c10e <_printf_i+0x112>
 800c0f6:	6823      	ldr	r3, [r4, #0]
 800c0f8:	07db      	lsls	r3, r3, #31
 800c0fa:	d508      	bpl.n	800c10e <_printf_i+0x112>
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	6862      	ldr	r2, [r4, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	bfde      	ittt	le
 800c104:	2330      	movle	r3, #48	; 0x30
 800c106:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c10a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c10e:	ebac 0305 	sub.w	r3, ip, r5
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	f8cd 8000 	str.w	r8, [sp]
 800c118:	463b      	mov	r3, r7
 800c11a:	aa03      	add	r2, sp, #12
 800c11c:	4621      	mov	r1, r4
 800c11e:	4630      	mov	r0, r6
 800c120:	f7ff fef6 	bl	800bf10 <_printf_common>
 800c124:	3001      	adds	r0, #1
 800c126:	d14d      	bne.n	800c1c4 <_printf_i+0x1c8>
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	b005      	add	sp, #20
 800c12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c132:	4839      	ldr	r0, [pc, #228]	; (800c218 <_printf_i+0x21c>)
 800c134:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c138:	6813      	ldr	r3, [r2, #0]
 800c13a:	6821      	ldr	r1, [r4, #0]
 800c13c:	1d1d      	adds	r5, r3, #4
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6015      	str	r5, [r2, #0]
 800c142:	060a      	lsls	r2, r1, #24
 800c144:	d50b      	bpl.n	800c15e <_printf_i+0x162>
 800c146:	07ca      	lsls	r2, r1, #31
 800c148:	bf44      	itt	mi
 800c14a:	f041 0120 	orrmi.w	r1, r1, #32
 800c14e:	6021      	strmi	r1, [r4, #0]
 800c150:	b91b      	cbnz	r3, 800c15a <_printf_i+0x15e>
 800c152:	6822      	ldr	r2, [r4, #0]
 800c154:	f022 0220 	bic.w	r2, r2, #32
 800c158:	6022      	str	r2, [r4, #0]
 800c15a:	2210      	movs	r2, #16
 800c15c:	e7b7      	b.n	800c0ce <_printf_i+0xd2>
 800c15e:	064d      	lsls	r5, r1, #25
 800c160:	bf48      	it	mi
 800c162:	b29b      	uxthmi	r3, r3
 800c164:	e7ef      	b.n	800c146 <_printf_i+0x14a>
 800c166:	4665      	mov	r5, ip
 800c168:	fbb3 f1f2 	udiv	r1, r3, r2
 800c16c:	fb02 3311 	mls	r3, r2, r1, r3
 800c170:	5cc3      	ldrb	r3, [r0, r3]
 800c172:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c176:	460b      	mov	r3, r1
 800c178:	2900      	cmp	r1, #0
 800c17a:	d1f5      	bne.n	800c168 <_printf_i+0x16c>
 800c17c:	e7b9      	b.n	800c0f2 <_printf_i+0xf6>
 800c17e:	6813      	ldr	r3, [r2, #0]
 800c180:	6825      	ldr	r5, [r4, #0]
 800c182:	6961      	ldr	r1, [r4, #20]
 800c184:	1d18      	adds	r0, r3, #4
 800c186:	6010      	str	r0, [r2, #0]
 800c188:	0628      	lsls	r0, r5, #24
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	d501      	bpl.n	800c192 <_printf_i+0x196>
 800c18e:	6019      	str	r1, [r3, #0]
 800c190:	e002      	b.n	800c198 <_printf_i+0x19c>
 800c192:	066a      	lsls	r2, r5, #25
 800c194:	d5fb      	bpl.n	800c18e <_printf_i+0x192>
 800c196:	8019      	strh	r1, [r3, #0]
 800c198:	2300      	movs	r3, #0
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	4665      	mov	r5, ip
 800c19e:	e7b9      	b.n	800c114 <_printf_i+0x118>
 800c1a0:	6813      	ldr	r3, [r2, #0]
 800c1a2:	1d19      	adds	r1, r3, #4
 800c1a4:	6011      	str	r1, [r2, #0]
 800c1a6:	681d      	ldr	r5, [r3, #0]
 800c1a8:	6862      	ldr	r2, [r4, #4]
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f7f4 f817 	bl	80001e0 <memchr>
 800c1b2:	b108      	cbz	r0, 800c1b8 <_printf_i+0x1bc>
 800c1b4:	1b40      	subs	r0, r0, r5
 800c1b6:	6060      	str	r0, [r4, #4]
 800c1b8:	6863      	ldr	r3, [r4, #4]
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1c2:	e7a7      	b.n	800c114 <_printf_i+0x118>
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	47c0      	blx	r8
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d0aa      	beq.n	800c128 <_printf_i+0x12c>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	079b      	lsls	r3, r3, #30
 800c1d6:	d413      	bmi.n	800c200 <_printf_i+0x204>
 800c1d8:	68e0      	ldr	r0, [r4, #12]
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	4298      	cmp	r0, r3
 800c1de:	bfb8      	it	lt
 800c1e0:	4618      	movlt	r0, r3
 800c1e2:	e7a3      	b.n	800c12c <_printf_i+0x130>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	464a      	mov	r2, r9
 800c1e8:	4639      	mov	r1, r7
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	47c0      	blx	r8
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d09a      	beq.n	800c128 <_printf_i+0x12c>
 800c1f2:	3501      	adds	r5, #1
 800c1f4:	68e3      	ldr	r3, [r4, #12]
 800c1f6:	9a03      	ldr	r2, [sp, #12]
 800c1f8:	1a9b      	subs	r3, r3, r2
 800c1fa:	42ab      	cmp	r3, r5
 800c1fc:	dcf2      	bgt.n	800c1e4 <_printf_i+0x1e8>
 800c1fe:	e7eb      	b.n	800c1d8 <_printf_i+0x1dc>
 800c200:	2500      	movs	r5, #0
 800c202:	f104 0919 	add.w	r9, r4, #25
 800c206:	e7f5      	b.n	800c1f4 <_printf_i+0x1f8>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1ac      	bne.n	800c166 <_printf_i+0x16a>
 800c20c:	7803      	ldrb	r3, [r0, #0]
 800c20e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c212:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c216:	e76c      	b.n	800c0f2 <_printf_i+0xf6>
 800c218:	0800cab1 	.word	0x0800cab1
 800c21c:	0800cac2 	.word	0x0800cac2

0800c220 <memcpy>:
 800c220:	b510      	push	{r4, lr}
 800c222:	1e43      	subs	r3, r0, #1
 800c224:	440a      	add	r2, r1
 800c226:	4291      	cmp	r1, r2
 800c228:	d100      	bne.n	800c22c <memcpy+0xc>
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c230:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c234:	e7f7      	b.n	800c226 <memcpy+0x6>

0800c236 <memmove>:
 800c236:	4288      	cmp	r0, r1
 800c238:	b510      	push	{r4, lr}
 800c23a:	eb01 0302 	add.w	r3, r1, r2
 800c23e:	d807      	bhi.n	800c250 <memmove+0x1a>
 800c240:	1e42      	subs	r2, r0, #1
 800c242:	4299      	cmp	r1, r3
 800c244:	d00a      	beq.n	800c25c <memmove+0x26>
 800c246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c24a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c24e:	e7f8      	b.n	800c242 <memmove+0xc>
 800c250:	4283      	cmp	r3, r0
 800c252:	d9f5      	bls.n	800c240 <memmove+0xa>
 800c254:	1881      	adds	r1, r0, r2
 800c256:	1ad2      	subs	r2, r2, r3
 800c258:	42d3      	cmn	r3, r2
 800c25a:	d100      	bne.n	800c25e <memmove+0x28>
 800c25c:	bd10      	pop	{r4, pc}
 800c25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c262:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c266:	e7f7      	b.n	800c258 <memmove+0x22>

0800c268 <_realloc_r>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	4607      	mov	r7, r0
 800c26c:	4614      	mov	r4, r2
 800c26e:	460e      	mov	r6, r1
 800c270:	b921      	cbnz	r1, 800c27c <_realloc_r+0x14>
 800c272:	4611      	mov	r1, r2
 800c274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c278:	f7ff bc6c 	b.w	800bb54 <_malloc_r>
 800c27c:	b922      	cbnz	r2, 800c288 <_realloc_r+0x20>
 800c27e:	f7ff fc1b 	bl	800bab8 <_free_r>
 800c282:	4625      	mov	r5, r4
 800c284:	4628      	mov	r0, r5
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	f000 f814 	bl	800c2b4 <_malloc_usable_size_r>
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d20f      	bcs.n	800c2b0 <_realloc_r+0x48>
 800c290:	4621      	mov	r1, r4
 800c292:	4638      	mov	r0, r7
 800c294:	f7ff fc5e 	bl	800bb54 <_malloc_r>
 800c298:	4605      	mov	r5, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d0f2      	beq.n	800c284 <_realloc_r+0x1c>
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4622      	mov	r2, r4
 800c2a2:	f7ff ffbd 	bl	800c220 <memcpy>
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff fc05 	bl	800bab8 <_free_r>
 800c2ae:	e7e9      	b.n	800c284 <_realloc_r+0x1c>
 800c2b0:	4635      	mov	r5, r6
 800c2b2:	e7e7      	b.n	800c284 <_realloc_r+0x1c>

0800c2b4 <_malloc_usable_size_r>:
 800c2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b8:	1f18      	subs	r0, r3, #4
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bfbc      	itt	lt
 800c2be:	580b      	ldrlt	r3, [r1, r0]
 800c2c0:	18c0      	addlt	r0, r0, r3
 800c2c2:	4770      	bx	lr
 800c2c4:	0000      	movs	r0, r0
	...

0800c2c8 <atan>:
 800c2c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2cc:	ec55 4b10 	vmov	r4, r5, d0
 800c2d0:	4bc3      	ldr	r3, [pc, #780]	; (800c5e0 <atan+0x318>)
 800c2d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2d6:	429e      	cmp	r6, r3
 800c2d8:	46ab      	mov	fp, r5
 800c2da:	dd18      	ble.n	800c30e <atan+0x46>
 800c2dc:	4bc1      	ldr	r3, [pc, #772]	; (800c5e4 <atan+0x31c>)
 800c2de:	429e      	cmp	r6, r3
 800c2e0:	dc01      	bgt.n	800c2e6 <atan+0x1e>
 800c2e2:	d109      	bne.n	800c2f8 <atan+0x30>
 800c2e4:	b144      	cbz	r4, 800c2f8 <atan+0x30>
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	462b      	mov	r3, r5
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	f7f3 ffcd 	bl	800028c <__adddf3>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	460d      	mov	r5, r1
 800c2f6:	e006      	b.n	800c306 <atan+0x3e>
 800c2f8:	f1bb 0f00 	cmp.w	fp, #0
 800c2fc:	f340 8131 	ble.w	800c562 <atan+0x29a>
 800c300:	a59b      	add	r5, pc, #620	; (adr r5, 800c570 <atan+0x2a8>)
 800c302:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c306:	ec45 4b10 	vmov	d0, r4, r5
 800c30a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30e:	4bb6      	ldr	r3, [pc, #728]	; (800c5e8 <atan+0x320>)
 800c310:	429e      	cmp	r6, r3
 800c312:	dc14      	bgt.n	800c33e <atan+0x76>
 800c314:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c318:	429e      	cmp	r6, r3
 800c31a:	dc0d      	bgt.n	800c338 <atan+0x70>
 800c31c:	a396      	add	r3, pc, #600	; (adr r3, 800c578 <atan+0x2b0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	ee10 0a10 	vmov	r0, s0
 800c326:	4629      	mov	r1, r5
 800c328:	f7f3 ffb0 	bl	800028c <__adddf3>
 800c32c:	2200      	movs	r2, #0
 800c32e:	4baf      	ldr	r3, [pc, #700]	; (800c5ec <atan+0x324>)
 800c330:	f7f4 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 800c334:	2800      	cmp	r0, #0
 800c336:	d1e6      	bne.n	800c306 <atan+0x3e>
 800c338:	f04f 3aff 	mov.w	sl, #4294967295
 800c33c:	e02b      	b.n	800c396 <atan+0xce>
 800c33e:	f000 f963 	bl	800c608 <fabs>
 800c342:	4bab      	ldr	r3, [pc, #684]	; (800c5f0 <atan+0x328>)
 800c344:	429e      	cmp	r6, r3
 800c346:	ec55 4b10 	vmov	r4, r5, d0
 800c34a:	f300 80bf 	bgt.w	800c4cc <atan+0x204>
 800c34e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c352:	429e      	cmp	r6, r3
 800c354:	f300 80a0 	bgt.w	800c498 <atan+0x1d0>
 800c358:	ee10 2a10 	vmov	r2, s0
 800c35c:	ee10 0a10 	vmov	r0, s0
 800c360:	462b      	mov	r3, r5
 800c362:	4629      	mov	r1, r5
 800c364:	f7f3 ff92 	bl	800028c <__adddf3>
 800c368:	2200      	movs	r2, #0
 800c36a:	4ba0      	ldr	r3, [pc, #640]	; (800c5ec <atan+0x324>)
 800c36c:	f7f3 ff8c 	bl	8000288 <__aeabi_dsub>
 800c370:	2200      	movs	r2, #0
 800c372:	4606      	mov	r6, r0
 800c374:	460f      	mov	r7, r1
 800c376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c37a:	4620      	mov	r0, r4
 800c37c:	4629      	mov	r1, r5
 800c37e:	f7f3 ff85 	bl	800028c <__adddf3>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	f7f4 fa5f 	bl	800084c <__aeabi_ddiv>
 800c38e:	f04f 0a00 	mov.w	sl, #0
 800c392:	4604      	mov	r4, r0
 800c394:	460d      	mov	r5, r1
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4689      	mov	r9, r1
 800c3aa:	f7f4 f925 	bl	80005f8 <__aeabi_dmul>
 800c3ae:	a374      	add	r3, pc, #464	; (adr r3, 800c580 <atan+0x2b8>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	460f      	mov	r7, r1
 800c3b8:	f7f4 f91e 	bl	80005f8 <__aeabi_dmul>
 800c3bc:	a372      	add	r3, pc, #456	; (adr r3, 800c588 <atan+0x2c0>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	f7f3 ff63 	bl	800028c <__adddf3>
 800c3c6:	4632      	mov	r2, r6
 800c3c8:	463b      	mov	r3, r7
 800c3ca:	f7f4 f915 	bl	80005f8 <__aeabi_dmul>
 800c3ce:	a370      	add	r3, pc, #448	; (adr r3, 800c590 <atan+0x2c8>)
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f7f3 ff5a 	bl	800028c <__adddf3>
 800c3d8:	4632      	mov	r2, r6
 800c3da:	463b      	mov	r3, r7
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	a36d      	add	r3, pc, #436	; (adr r3, 800c598 <atan+0x2d0>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f3 ff51 	bl	800028c <__adddf3>
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	463b      	mov	r3, r7
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	a36b      	add	r3, pc, #428	; (adr r3, 800c5a0 <atan+0x2d8>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	463b      	mov	r3, r7
 800c400:	f7f4 f8fa 	bl	80005f8 <__aeabi_dmul>
 800c404:	a368      	add	r3, pc, #416	; (adr r3, 800c5a8 <atan+0x2e0>)
 800c406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40a:	f7f3 ff3f 	bl	800028c <__adddf3>
 800c40e:	4642      	mov	r2, r8
 800c410:	464b      	mov	r3, r9
 800c412:	f7f4 f8f1 	bl	80005f8 <__aeabi_dmul>
 800c416:	a366      	add	r3, pc, #408	; (adr r3, 800c5b0 <atan+0x2e8>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	4680      	mov	r8, r0
 800c41e:	4689      	mov	r9, r1
 800c420:	4630      	mov	r0, r6
 800c422:	4639      	mov	r1, r7
 800c424:	f7f4 f8e8 	bl	80005f8 <__aeabi_dmul>
 800c428:	a363      	add	r3, pc, #396	; (adr r3, 800c5b8 <atan+0x2f0>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f3 ff2b 	bl	8000288 <__aeabi_dsub>
 800c432:	4632      	mov	r2, r6
 800c434:	463b      	mov	r3, r7
 800c436:	f7f4 f8df 	bl	80005f8 <__aeabi_dmul>
 800c43a:	a361      	add	r3, pc, #388	; (adr r3, 800c5c0 <atan+0x2f8>)
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f7f3 ff22 	bl	8000288 <__aeabi_dsub>
 800c444:	4632      	mov	r2, r6
 800c446:	463b      	mov	r3, r7
 800c448:	f7f4 f8d6 	bl	80005f8 <__aeabi_dmul>
 800c44c:	a35e      	add	r3, pc, #376	; (adr r3, 800c5c8 <atan+0x300>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 ff19 	bl	8000288 <__aeabi_dsub>
 800c456:	4632      	mov	r2, r6
 800c458:	463b      	mov	r3, r7
 800c45a:	f7f4 f8cd 	bl	80005f8 <__aeabi_dmul>
 800c45e:	a35c      	add	r3, pc, #368	; (adr r3, 800c5d0 <atan+0x308>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f3 ff10 	bl	8000288 <__aeabi_dsub>
 800c468:	4632      	mov	r2, r6
 800c46a:	463b      	mov	r3, r7
 800c46c:	f7f4 f8c4 	bl	80005f8 <__aeabi_dmul>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4640      	mov	r0, r8
 800c476:	4649      	mov	r1, r9
 800c478:	f7f3 ff08 	bl	800028c <__adddf3>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f8ba 	bl	80005f8 <__aeabi_dmul>
 800c484:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	d14b      	bne.n	800c526 <atan+0x25e>
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7f3 fef9 	bl	8000288 <__aeabi_dsub>
 800c496:	e72c      	b.n	800c2f2 <atan+0x2a>
 800c498:	ee10 0a10 	vmov	r0, s0
 800c49c:	2200      	movs	r2, #0
 800c49e:	4b53      	ldr	r3, [pc, #332]	; (800c5ec <atan+0x324>)
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f3 fef1 	bl	8000288 <__aeabi_dsub>
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	460f      	mov	r7, r1
 800c4ac:	4b4f      	ldr	r3, [pc, #316]	; (800c5ec <atan+0x324>)
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f3 feeb 	bl	800028c <__adddf3>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	460b      	mov	r3, r1
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	4639      	mov	r1, r7
 800c4be:	f7f4 f9c5 	bl	800084c <__aeabi_ddiv>
 800c4c2:	f04f 0a01 	mov.w	sl, #1
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	e764      	b.n	800c396 <atan+0xce>
 800c4cc:	4b49      	ldr	r3, [pc, #292]	; (800c5f4 <atan+0x32c>)
 800c4ce:	429e      	cmp	r6, r3
 800c4d0:	dc1d      	bgt.n	800c50e <atan+0x246>
 800c4d2:	ee10 0a10 	vmov	r0, s0
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4b47      	ldr	r3, [pc, #284]	; (800c5f8 <atan+0x330>)
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f3 fed4 	bl	8000288 <__aeabi_dsub>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460f      	mov	r7, r1
 800c4e6:	4b44      	ldr	r3, [pc, #272]	; (800c5f8 <atan+0x330>)
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	4b3e      	ldr	r3, [pc, #248]	; (800c5ec <atan+0x324>)
 800c4f4:	f7f3 feca 	bl	800028c <__adddf3>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f4 f9a4 	bl	800084c <__aeabi_ddiv>
 800c504:	f04f 0a02 	mov.w	sl, #2
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	e743      	b.n	800c396 <atan+0xce>
 800c50e:	462b      	mov	r3, r5
 800c510:	ee10 2a10 	vmov	r2, s0
 800c514:	2000      	movs	r0, #0
 800c516:	4939      	ldr	r1, [pc, #228]	; (800c5fc <atan+0x334>)
 800c518:	f7f4 f998 	bl	800084c <__aeabi_ddiv>
 800c51c:	f04f 0a03 	mov.w	sl, #3
 800c520:	4604      	mov	r4, r0
 800c522:	460d      	mov	r5, r1
 800c524:	e737      	b.n	800c396 <atan+0xce>
 800c526:	4b36      	ldr	r3, [pc, #216]	; (800c600 <atan+0x338>)
 800c528:	4e36      	ldr	r6, [pc, #216]	; (800c604 <atan+0x33c>)
 800c52a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c52e:	4456      	add	r6, sl
 800c530:	449a      	add	sl, r3
 800c532:	e9da 2300 	ldrd	r2, r3, [sl]
 800c536:	f7f3 fea7 	bl	8000288 <__aeabi_dsub>
 800c53a:	4622      	mov	r2, r4
 800c53c:	462b      	mov	r3, r5
 800c53e:	f7f3 fea3 	bl	8000288 <__aeabi_dsub>
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c54a:	f7f3 fe9d 	bl	8000288 <__aeabi_dsub>
 800c54e:	f1bb 0f00 	cmp.w	fp, #0
 800c552:	4604      	mov	r4, r0
 800c554:	460d      	mov	r5, r1
 800c556:	f6bf aed6 	bge.w	800c306 <atan+0x3e>
 800c55a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c55e:	461d      	mov	r5, r3
 800c560:	e6d1      	b.n	800c306 <atan+0x3e>
 800c562:	a51d      	add	r5, pc, #116	; (adr r5, 800c5d8 <atan+0x310>)
 800c564:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c568:	e6cd      	b.n	800c306 <atan+0x3e>
 800c56a:	bf00      	nop
 800c56c:	f3af 8000 	nop.w
 800c570:	54442d18 	.word	0x54442d18
 800c574:	3ff921fb 	.word	0x3ff921fb
 800c578:	8800759c 	.word	0x8800759c
 800c57c:	7e37e43c 	.word	0x7e37e43c
 800c580:	e322da11 	.word	0xe322da11
 800c584:	3f90ad3a 	.word	0x3f90ad3a
 800c588:	24760deb 	.word	0x24760deb
 800c58c:	3fa97b4b 	.word	0x3fa97b4b
 800c590:	a0d03d51 	.word	0xa0d03d51
 800c594:	3fb10d66 	.word	0x3fb10d66
 800c598:	c54c206e 	.word	0xc54c206e
 800c59c:	3fb745cd 	.word	0x3fb745cd
 800c5a0:	920083ff 	.word	0x920083ff
 800c5a4:	3fc24924 	.word	0x3fc24924
 800c5a8:	5555550d 	.word	0x5555550d
 800c5ac:	3fd55555 	.word	0x3fd55555
 800c5b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c5b4:	bfa2b444 	.word	0xbfa2b444
 800c5b8:	52defd9a 	.word	0x52defd9a
 800c5bc:	3fadde2d 	.word	0x3fadde2d
 800c5c0:	af749a6d 	.word	0xaf749a6d
 800c5c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c5c8:	fe231671 	.word	0xfe231671
 800c5cc:	3fbc71c6 	.word	0x3fbc71c6
 800c5d0:	9998ebc4 	.word	0x9998ebc4
 800c5d4:	3fc99999 	.word	0x3fc99999
 800c5d8:	54442d18 	.word	0x54442d18
 800c5dc:	bff921fb 	.word	0xbff921fb
 800c5e0:	440fffff 	.word	0x440fffff
 800c5e4:	7ff00000 	.word	0x7ff00000
 800c5e8:	3fdbffff 	.word	0x3fdbffff
 800c5ec:	3ff00000 	.word	0x3ff00000
 800c5f0:	3ff2ffff 	.word	0x3ff2ffff
 800c5f4:	40037fff 	.word	0x40037fff
 800c5f8:	3ff80000 	.word	0x3ff80000
 800c5fc:	bff00000 	.word	0xbff00000
 800c600:	0800caf8 	.word	0x0800caf8
 800c604:	0800cad8 	.word	0x0800cad8

0800c608 <fabs>:
 800c608:	ec51 0b10 	vmov	r0, r1, d0
 800c60c:	ee10 2a10 	vmov	r2, s0
 800c610:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c614:	ec43 2b10 	vmov	d0, r2, r3
 800c618:	4770      	bx	lr

0800c61a <atan2>:
 800c61a:	f000 b85d 	b.w	800c6d8 <__ieee754_atan2>
	...

0800c620 <sqrt>:
 800c620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c624:	ed2d 8b02 	vpush	{d8}
 800c628:	b08b      	sub	sp, #44	; 0x2c
 800c62a:	ec55 4b10 	vmov	r4, r5, d0
 800c62e:	f000 f931 	bl	800c894 <__ieee754_sqrt>
 800c632:	4b26      	ldr	r3, [pc, #152]	; (800c6cc <sqrt+0xac>)
 800c634:	eeb0 8a40 	vmov.f32	s16, s0
 800c638:	eef0 8a60 	vmov.f32	s17, s1
 800c63c:	f993 6000 	ldrsb.w	r6, [r3]
 800c640:	1c73      	adds	r3, r6, #1
 800c642:	d02a      	beq.n	800c69a <sqrt+0x7a>
 800c644:	4622      	mov	r2, r4
 800c646:	462b      	mov	r3, r5
 800c648:	4620      	mov	r0, r4
 800c64a:	4629      	mov	r1, r5
 800c64c:	f7f4 fa6e 	bl	8000b2c <__aeabi_dcmpun>
 800c650:	4607      	mov	r7, r0
 800c652:	bb10      	cbnz	r0, 800c69a <sqrt+0x7a>
 800c654:	f04f 0800 	mov.w	r8, #0
 800c658:	f04f 0900 	mov.w	r9, #0
 800c65c:	4642      	mov	r2, r8
 800c65e:	464b      	mov	r3, r9
 800c660:	4620      	mov	r0, r4
 800c662:	4629      	mov	r1, r5
 800c664:	f7f4 fa3a 	bl	8000adc <__aeabi_dcmplt>
 800c668:	b1b8      	cbz	r0, 800c69a <sqrt+0x7a>
 800c66a:	2301      	movs	r3, #1
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	4b18      	ldr	r3, [pc, #96]	; (800c6d0 <sqrt+0xb0>)
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	9708      	str	r7, [sp, #32]
 800c674:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c678:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c67c:	b9b6      	cbnz	r6, 800c6ac <sqrt+0x8c>
 800c67e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c682:	4668      	mov	r0, sp
 800c684:	f000 f9b6 	bl	800c9f4 <matherr>
 800c688:	b1d0      	cbz	r0, 800c6c0 <sqrt+0xa0>
 800c68a:	9b08      	ldr	r3, [sp, #32]
 800c68c:	b11b      	cbz	r3, 800c696 <sqrt+0x76>
 800c68e:	f7ff f9d1 	bl	800ba34 <__errno>
 800c692:	9b08      	ldr	r3, [sp, #32]
 800c694:	6003      	str	r3, [r0, #0]
 800c696:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c69a:	eeb0 0a48 	vmov.f32	s0, s16
 800c69e:	eef0 0a68 	vmov.f32	s1, s17
 800c6a2:	b00b      	add	sp, #44	; 0x2c
 800c6a4:	ecbd 8b02 	vpop	{d8}
 800c6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	464b      	mov	r3, r9
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f4 f8ca 	bl	800084c <__aeabi_ddiv>
 800c6b8:	2e02      	cmp	r6, #2
 800c6ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c6be:	d1e0      	bne.n	800c682 <sqrt+0x62>
 800c6c0:	f7ff f9b8 	bl	800ba34 <__errno>
 800c6c4:	2321      	movs	r3, #33	; 0x21
 800c6c6:	6003      	str	r3, [r0, #0]
 800c6c8:	e7df      	b.n	800c68a <sqrt+0x6a>
 800c6ca:	bf00      	nop
 800c6cc:	20000274 	.word	0x20000274
 800c6d0:	0800cb18 	.word	0x0800cb18
 800c6d4:	00000000 	.word	0x00000000

0800c6d8 <__ieee754_atan2>:
 800c6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6dc:	ec57 6b11 	vmov	r6, r7, d1
 800c6e0:	4273      	negs	r3, r6
 800c6e2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c6e6:	4333      	orrs	r3, r6
 800c6e8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c890 <__ieee754_atan2+0x1b8>
 800c6ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c6f0:	4573      	cmp	r3, lr
 800c6f2:	ec51 0b10 	vmov	r0, r1, d0
 800c6f6:	ee11 8a10 	vmov	r8, s2
 800c6fa:	d80a      	bhi.n	800c712 <__ieee754_atan2+0x3a>
 800c6fc:	4244      	negs	r4, r0
 800c6fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c702:	4304      	orrs	r4, r0
 800c704:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c708:	4574      	cmp	r4, lr
 800c70a:	468c      	mov	ip, r1
 800c70c:	ee10 9a10 	vmov	r9, s0
 800c710:	d907      	bls.n	800c722 <__ieee754_atan2+0x4a>
 800c712:	4632      	mov	r2, r6
 800c714:	463b      	mov	r3, r7
 800c716:	f7f3 fdb9 	bl	800028c <__adddf3>
 800c71a:	ec41 0b10 	vmov	d0, r0, r1
 800c71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c722:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c726:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c72a:	4334      	orrs	r4, r6
 800c72c:	d103      	bne.n	800c736 <__ieee754_atan2+0x5e>
 800c72e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c732:	f7ff bdc9 	b.w	800c2c8 <atan>
 800c736:	17bc      	asrs	r4, r7, #30
 800c738:	f004 0402 	and.w	r4, r4, #2
 800c73c:	ea53 0909 	orrs.w	r9, r3, r9
 800c740:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c744:	d107      	bne.n	800c756 <__ieee754_atan2+0x7e>
 800c746:	2c02      	cmp	r4, #2
 800c748:	d073      	beq.n	800c832 <__ieee754_atan2+0x15a>
 800c74a:	2c03      	cmp	r4, #3
 800c74c:	d1e5      	bne.n	800c71a <__ieee754_atan2+0x42>
 800c74e:	a13e      	add	r1, pc, #248	; (adr r1, 800c848 <__ieee754_atan2+0x170>)
 800c750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c754:	e7e1      	b.n	800c71a <__ieee754_atan2+0x42>
 800c756:	ea52 0808 	orrs.w	r8, r2, r8
 800c75a:	d106      	bne.n	800c76a <__ieee754_atan2+0x92>
 800c75c:	f1bc 0f00 	cmp.w	ip, #0
 800c760:	da6b      	bge.n	800c83a <__ieee754_atan2+0x162>
 800c762:	a13b      	add	r1, pc, #236	; (adr r1, 800c850 <__ieee754_atan2+0x178>)
 800c764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c768:	e7d7      	b.n	800c71a <__ieee754_atan2+0x42>
 800c76a:	4572      	cmp	r2, lr
 800c76c:	d120      	bne.n	800c7b0 <__ieee754_atan2+0xd8>
 800c76e:	4293      	cmp	r3, r2
 800c770:	d111      	bne.n	800c796 <__ieee754_atan2+0xbe>
 800c772:	2c02      	cmp	r4, #2
 800c774:	d007      	beq.n	800c786 <__ieee754_atan2+0xae>
 800c776:	2c03      	cmp	r4, #3
 800c778:	d009      	beq.n	800c78e <__ieee754_atan2+0xb6>
 800c77a:	2c01      	cmp	r4, #1
 800c77c:	d155      	bne.n	800c82a <__ieee754_atan2+0x152>
 800c77e:	a136      	add	r1, pc, #216	; (adr r1, 800c858 <__ieee754_atan2+0x180>)
 800c780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c784:	e7c9      	b.n	800c71a <__ieee754_atan2+0x42>
 800c786:	a136      	add	r1, pc, #216	; (adr r1, 800c860 <__ieee754_atan2+0x188>)
 800c788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c78c:	e7c5      	b.n	800c71a <__ieee754_atan2+0x42>
 800c78e:	a136      	add	r1, pc, #216	; (adr r1, 800c868 <__ieee754_atan2+0x190>)
 800c790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c794:	e7c1      	b.n	800c71a <__ieee754_atan2+0x42>
 800c796:	2c02      	cmp	r4, #2
 800c798:	d04b      	beq.n	800c832 <__ieee754_atan2+0x15a>
 800c79a:	2c03      	cmp	r4, #3
 800c79c:	d0d7      	beq.n	800c74e <__ieee754_atan2+0x76>
 800c79e:	2c01      	cmp	r4, #1
 800c7a0:	f04f 0000 	mov.w	r0, #0
 800c7a4:	d102      	bne.n	800c7ac <__ieee754_atan2+0xd4>
 800c7a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c7aa:	e7b6      	b.n	800c71a <__ieee754_atan2+0x42>
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	e7b4      	b.n	800c71a <__ieee754_atan2+0x42>
 800c7b0:	4573      	cmp	r3, lr
 800c7b2:	d0d3      	beq.n	800c75c <__ieee754_atan2+0x84>
 800c7b4:	1a9b      	subs	r3, r3, r2
 800c7b6:	151b      	asrs	r3, r3, #20
 800c7b8:	2b3c      	cmp	r3, #60	; 0x3c
 800c7ba:	dc1e      	bgt.n	800c7fa <__ieee754_atan2+0x122>
 800c7bc:	2f00      	cmp	r7, #0
 800c7be:	da01      	bge.n	800c7c4 <__ieee754_atan2+0xec>
 800c7c0:	333c      	adds	r3, #60	; 0x3c
 800c7c2:	db1e      	blt.n	800c802 <__ieee754_atan2+0x12a>
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	f7f4 f840 	bl	800084c <__aeabi_ddiv>
 800c7cc:	ec41 0b10 	vmov	d0, r0, r1
 800c7d0:	f7ff ff1a 	bl	800c608 <fabs>
 800c7d4:	f7ff fd78 	bl	800c2c8 <atan>
 800c7d8:	ec51 0b10 	vmov	r0, r1, d0
 800c7dc:	2c01      	cmp	r4, #1
 800c7de:	d013      	beq.n	800c808 <__ieee754_atan2+0x130>
 800c7e0:	2c02      	cmp	r4, #2
 800c7e2:	d015      	beq.n	800c810 <__ieee754_atan2+0x138>
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d098      	beq.n	800c71a <__ieee754_atan2+0x42>
 800c7e8:	a321      	add	r3, pc, #132	; (adr r3, 800c870 <__ieee754_atan2+0x198>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd4b 	bl	8000288 <__aeabi_dsub>
 800c7f2:	a321      	add	r3, pc, #132	; (adr r3, 800c878 <__ieee754_atan2+0x1a0>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	e014      	b.n	800c824 <__ieee754_atan2+0x14c>
 800c7fa:	a121      	add	r1, pc, #132	; (adr r1, 800c880 <__ieee754_atan2+0x1a8>)
 800c7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c800:	e7ec      	b.n	800c7dc <__ieee754_atan2+0x104>
 800c802:	2000      	movs	r0, #0
 800c804:	2100      	movs	r1, #0
 800c806:	e7e9      	b.n	800c7dc <__ieee754_atan2+0x104>
 800c808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c80c:	4619      	mov	r1, r3
 800c80e:	e784      	b.n	800c71a <__ieee754_atan2+0x42>
 800c810:	a317      	add	r3, pc, #92	; (adr r3, 800c870 <__ieee754_atan2+0x198>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f3 fd37 	bl	8000288 <__aeabi_dsub>
 800c81a:	4602      	mov	r2, r0
 800c81c:	460b      	mov	r3, r1
 800c81e:	a116      	add	r1, pc, #88	; (adr r1, 800c878 <__ieee754_atan2+0x1a0>)
 800c820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c824:	f7f3 fd30 	bl	8000288 <__aeabi_dsub>
 800c828:	e777      	b.n	800c71a <__ieee754_atan2+0x42>
 800c82a:	a117      	add	r1, pc, #92	; (adr r1, 800c888 <__ieee754_atan2+0x1b0>)
 800c82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c830:	e773      	b.n	800c71a <__ieee754_atan2+0x42>
 800c832:	a111      	add	r1, pc, #68	; (adr r1, 800c878 <__ieee754_atan2+0x1a0>)
 800c834:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c838:	e76f      	b.n	800c71a <__ieee754_atan2+0x42>
 800c83a:	a111      	add	r1, pc, #68	; (adr r1, 800c880 <__ieee754_atan2+0x1a8>)
 800c83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c840:	e76b      	b.n	800c71a <__ieee754_atan2+0x42>
 800c842:	bf00      	nop
 800c844:	f3af 8000 	nop.w
 800c848:	54442d18 	.word	0x54442d18
 800c84c:	c00921fb 	.word	0xc00921fb
 800c850:	54442d18 	.word	0x54442d18
 800c854:	bff921fb 	.word	0xbff921fb
 800c858:	54442d18 	.word	0x54442d18
 800c85c:	bfe921fb 	.word	0xbfe921fb
 800c860:	7f3321d2 	.word	0x7f3321d2
 800c864:	4002d97c 	.word	0x4002d97c
 800c868:	7f3321d2 	.word	0x7f3321d2
 800c86c:	c002d97c 	.word	0xc002d97c
 800c870:	33145c07 	.word	0x33145c07
 800c874:	3ca1a626 	.word	0x3ca1a626
 800c878:	54442d18 	.word	0x54442d18
 800c87c:	400921fb 	.word	0x400921fb
 800c880:	54442d18 	.word	0x54442d18
 800c884:	3ff921fb 	.word	0x3ff921fb
 800c888:	54442d18 	.word	0x54442d18
 800c88c:	3fe921fb 	.word	0x3fe921fb
 800c890:	7ff00000 	.word	0x7ff00000

0800c894 <__ieee754_sqrt>:
 800c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c898:	4955      	ldr	r1, [pc, #340]	; (800c9f0 <__ieee754_sqrt+0x15c>)
 800c89a:	ec55 4b10 	vmov	r4, r5, d0
 800c89e:	43a9      	bics	r1, r5
 800c8a0:	462b      	mov	r3, r5
 800c8a2:	462a      	mov	r2, r5
 800c8a4:	d112      	bne.n	800c8cc <__ieee754_sqrt+0x38>
 800c8a6:	ee10 2a10 	vmov	r2, s0
 800c8aa:	ee10 0a10 	vmov	r0, s0
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7f3 fea2 	bl	80005f8 <__aeabi_dmul>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fce6 	bl	800028c <__adddf3>
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	ec45 4b10 	vmov	d0, r4, r5
 800c8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8cc:	2d00      	cmp	r5, #0
 800c8ce:	ee10 0a10 	vmov	r0, s0
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	dc0f      	bgt.n	800c8f6 <__ieee754_sqrt+0x62>
 800c8d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8da:	4330      	orrs	r0, r6
 800c8dc:	d0f2      	beq.n	800c8c4 <__ieee754_sqrt+0x30>
 800c8de:	b155      	cbz	r5, 800c8f6 <__ieee754_sqrt+0x62>
 800c8e0:	ee10 2a10 	vmov	r2, s0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fcce 	bl	8000288 <__aeabi_dsub>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	f7f3 ffac 	bl	800084c <__aeabi_ddiv>
 800c8f4:	e7e4      	b.n	800c8c0 <__ieee754_sqrt+0x2c>
 800c8f6:	151b      	asrs	r3, r3, #20
 800c8f8:	d073      	beq.n	800c9e2 <__ieee754_sqrt+0x14e>
 800c8fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c8fe:	07dd      	lsls	r5, r3, #31
 800c900:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c904:	bf48      	it	mi
 800c906:	0fc8      	lsrmi	r0, r1, #31
 800c908:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c90c:	bf44      	itt	mi
 800c90e:	0049      	lslmi	r1, r1, #1
 800c910:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c914:	2500      	movs	r5, #0
 800c916:	1058      	asrs	r0, r3, #1
 800c918:	0fcb      	lsrs	r3, r1, #31
 800c91a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c91e:	0049      	lsls	r1, r1, #1
 800c920:	2316      	movs	r3, #22
 800c922:	462c      	mov	r4, r5
 800c924:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c928:	19a7      	adds	r7, r4, r6
 800c92a:	4297      	cmp	r7, r2
 800c92c:	bfde      	ittt	le
 800c92e:	19bc      	addle	r4, r7, r6
 800c930:	1bd2      	suble	r2, r2, r7
 800c932:	19ad      	addle	r5, r5, r6
 800c934:	0fcf      	lsrs	r7, r1, #31
 800c936:	3b01      	subs	r3, #1
 800c938:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c93c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c940:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c944:	d1f0      	bne.n	800c928 <__ieee754_sqrt+0x94>
 800c946:	f04f 0c20 	mov.w	ip, #32
 800c94a:	469e      	mov	lr, r3
 800c94c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c950:	42a2      	cmp	r2, r4
 800c952:	eb06 070e 	add.w	r7, r6, lr
 800c956:	dc02      	bgt.n	800c95e <__ieee754_sqrt+0xca>
 800c958:	d112      	bne.n	800c980 <__ieee754_sqrt+0xec>
 800c95a:	428f      	cmp	r7, r1
 800c95c:	d810      	bhi.n	800c980 <__ieee754_sqrt+0xec>
 800c95e:	2f00      	cmp	r7, #0
 800c960:	eb07 0e06 	add.w	lr, r7, r6
 800c964:	da42      	bge.n	800c9ec <__ieee754_sqrt+0x158>
 800c966:	f1be 0f00 	cmp.w	lr, #0
 800c96a:	db3f      	blt.n	800c9ec <__ieee754_sqrt+0x158>
 800c96c:	f104 0801 	add.w	r8, r4, #1
 800c970:	1b12      	subs	r2, r2, r4
 800c972:	428f      	cmp	r7, r1
 800c974:	bf88      	it	hi
 800c976:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c97a:	1bc9      	subs	r1, r1, r7
 800c97c:	4433      	add	r3, r6
 800c97e:	4644      	mov	r4, r8
 800c980:	0052      	lsls	r2, r2, #1
 800c982:	f1bc 0c01 	subs.w	ip, ip, #1
 800c986:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c98a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c98e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c992:	d1dd      	bne.n	800c950 <__ieee754_sqrt+0xbc>
 800c994:	430a      	orrs	r2, r1
 800c996:	d006      	beq.n	800c9a6 <__ieee754_sqrt+0x112>
 800c998:	1c5c      	adds	r4, r3, #1
 800c99a:	bf13      	iteet	ne
 800c99c:	3301      	addne	r3, #1
 800c99e:	3501      	addeq	r5, #1
 800c9a0:	4663      	moveq	r3, ip
 800c9a2:	f023 0301 	bicne.w	r3, r3, #1
 800c9a6:	106a      	asrs	r2, r5, #1
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	07e9      	lsls	r1, r5, #31
 800c9ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c9b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c9b4:	bf48      	it	mi
 800c9b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c9ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c9be:	461c      	mov	r4, r3
 800c9c0:	e780      	b.n	800c8c4 <__ieee754_sqrt+0x30>
 800c9c2:	0aca      	lsrs	r2, r1, #11
 800c9c4:	3815      	subs	r0, #21
 800c9c6:	0549      	lsls	r1, r1, #21
 800c9c8:	2a00      	cmp	r2, #0
 800c9ca:	d0fa      	beq.n	800c9c2 <__ieee754_sqrt+0x12e>
 800c9cc:	02d6      	lsls	r6, r2, #11
 800c9ce:	d50a      	bpl.n	800c9e6 <__ieee754_sqrt+0x152>
 800c9d0:	f1c3 0420 	rsb	r4, r3, #32
 800c9d4:	fa21 f404 	lsr.w	r4, r1, r4
 800c9d8:	1e5d      	subs	r5, r3, #1
 800c9da:	4099      	lsls	r1, r3
 800c9dc:	4322      	orrs	r2, r4
 800c9de:	1b43      	subs	r3, r0, r5
 800c9e0:	e78b      	b.n	800c8fa <__ieee754_sqrt+0x66>
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	e7f0      	b.n	800c9c8 <__ieee754_sqrt+0x134>
 800c9e6:	0052      	lsls	r2, r2, #1
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	e7ef      	b.n	800c9cc <__ieee754_sqrt+0x138>
 800c9ec:	46a0      	mov	r8, r4
 800c9ee:	e7bf      	b.n	800c970 <__ieee754_sqrt+0xdc>
 800c9f0:	7ff00000 	.word	0x7ff00000

0800c9f4 <matherr>:
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	4770      	bx	lr

0800c9f8 <_init>:
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fa:	bf00      	nop
 800c9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fe:	bc08      	pop	{r3}
 800ca00:	469e      	mov	lr, r3
 800ca02:	4770      	bx	lr

0800ca04 <_fini>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	bf00      	nop
 800ca08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca0a:	bc08      	pop	{r3}
 800ca0c:	469e      	mov	lr, r3
 800ca0e:	4770      	bx	lr
