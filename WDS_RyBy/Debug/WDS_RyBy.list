
WDS_RyBy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800cba8  0800cba8  0001cba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cce0  0800cce0  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cce0  0800cce0  0001cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cce8  0800cce8  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cce8  0800cce8  0001cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccec  0800ccec  0001ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800ccf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001afc  20000278  0800cf68  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d74  0800cf68  00021d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edad  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004261  00000000  00000000  0003f055  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  000432b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  000448d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c015  00000000  00000000  00045cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016dcd  00000000  00000000  00061d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096e26  00000000  00000000  00078ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f900  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  0010f97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb90 	.word	0x0800cb90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800cb90 	.word	0x0800cb90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <MX_ADC1_Init+0xb8>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_ADC1_Init+0xbc>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000efa:	f001 fa5b 	bl	80023b4 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fc20 	bl	8001748 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f10:	2307      	movs	r3, #7
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f1a:	f001 fb81 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fc10 	bl	8001748 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f36:	f001 fb73 	bl	8002620 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f40:	f000 fc02 	bl	8001748 <Error_Handler>
  }

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002c8 	.word	0x200002c8
 8000f50:	40012000 	.word	0x40012000
 8000f54:	0f000001 	.word	0x0f000001

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_ADC_MspInit+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d157      	bne.n	800102a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JOY_HORIZONTAL_Pin|JOY_VERTICAL_Pin;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <HAL_ADC_MspInit+0xe4>)
 8000fc6:	f002 fad1 	bl	800356c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001010:	f001 ff0e 	bl	8002e30 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800101a:	f000 fb95 	bl	8001748 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012000 	.word	0x40012000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	20000310 	.word	0x20000310
 8001044:	40026410 	.word	0x40026410

08001048 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_CRC_Init+0x20>)
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <MX_CRC_Init+0x24>)
 8001050:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_CRC_Init+0x20>)
 8001054:	f001 fea5 	bl	8002da2 <HAL_CRC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800105e:	f000 fb73 	bl	8001748 <Error_Handler>
  }

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000370 	.word	0x20000370
 800106c:	40023000 	.word	0x40023000

08001070 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_CRC_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023000 	.word	0x40023000
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2038      	movs	r0, #56	; 0x38
 80010dc:	f001 fe2b 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010e0:	2038      	movs	r0, #56	; 0x38
 80010e2:	f001 fe44 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_GPIO_Init+0x12c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_GPIO_Init+0x12c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <MX_GPIO_Init+0x12c>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_LED_Pin|VIBROMOTOR_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f244 0102 	movw	r1, #16386	; 0x4002
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <MX_GPIO_Init+0x130>)
 8001182:	f002 fb75 	bl	8003870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT_1_IT_Pin|BUT_2_IT_Pin;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_GPIO_Init+0x134>)
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x138>)
 800119a:	f002 f9e7 	bl	800356c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|VIBROMOTOR_Pin;
 800119e:	f244 0302 	movw	r3, #16386	; 0x4002
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_GPIO_Init+0x130>)
 80011b8:	f002 f9d8 	bl	800356c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOY_BUT_IT_Pin|ROT_BUT_IT_Pin;
 80011bc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_GPIO_Init+0x134>)
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x130>)
 80011d2:	f002 f9cb 	bl	800356c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2006      	movs	r0, #6
 80011dc:	f001 fdab 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f001 fdc4 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2007      	movs	r0, #7
 80011ec:	f001 fda3 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f001 fdbc 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200a      	movs	r0, #10
 80011fc:	f001 fd9b 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001200:	200a      	movs	r0, #10
 8001202:	f001 fdb4 	bl	8002d6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2028      	movs	r0, #40	; 0x28
 800120c:	f001 fd93 	bl	8002d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001210:	2028      	movs	r0, #40	; 0x28
 8001212:	f001 fdac 	bl	8002d6e <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400
 8001228:	10210000 	.word	0x10210000
 800122c:	40020000 	.word	0x40020000

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f002 fb31 	bl	80038d4 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fa66 	bl	8001748 <Error_Handler>
  }

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000378 	.word	0x20000378
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_I2C_MspInit+0xa4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d13b      	bne.n	8001326 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23c0      	movs	r3, #192	; 0xc0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012da:	2304      	movs	r3, #4
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <HAL_I2C_MspInit+0xac>)
 80012e6:	f002 f941 	bl	800356c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201f      	movs	r0, #31
 800130c:	f001 fd13 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001310:	201f      	movs	r0, #31
 8001312:	f001 fd2c 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2020      	movs	r0, #32
 800131c:	f001 fd0b 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001320:	2020      	movs	r0, #32
 8001322:	f001 fd24 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	00000000 	.word	0x00000000

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b093      	sub	sp, #76	; 0x4c
 8001344:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 ffa1 	bl	800228c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f95b 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f7ff fed1 	bl	80010f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f7ff feaf 	bl	80010b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001356:	f7ff fd9f 	bl	8000e98 <MX_ADC1_Init>
  MX_I2C1_Init();
 800135a:	f7ff ff69 	bl	8001230 <MX_I2C1_Init>
  MX_TIM1_Init();
 800135e:	f000 feab 	bl	80020b8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001362:	f009 ff3f 	bl	800b1e4 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8001366:	f7ff fe6f 	bl	8001048 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	//---- Akcelerometr i żyroskop
	while (MPU6050_Init(&hi2c1) == 1);
 800136a:	bf00      	nop
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <main+0x280>)
 800136e:	f000 f9f2 	bl	8001756 <MPU6050_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d0f9      	beq.n	800136c <main+0x2c>
	//MPU6050_Init(&hi2c1);

	//---- Joystick ciągły pomiar
	HAL_ADC_Start_DMA(&hadc1, Joystick, 2);
 8001378:	2202      	movs	r2, #2
 800137a:	4992      	ldr	r1, [pc, #584]	; (80015c4 <main+0x284>)
 800137c:	4892      	ldr	r0, [pc, #584]	; (80015c8 <main+0x288>)
 800137e:	f001 f85d 	bl	800243c <HAL_ADC_Start_DMA>

	//---- Inicjalizacja enkodera
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001382:	213c      	movs	r1, #60	; 0x3c
 8001384:	4891      	ldr	r0, [pc, #580]	; (80015cc <main+0x28c>)
 8001386:	f006 fd4b 	bl	8007e20 <HAL_TIM_Encoder_Start_IT>


	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	2102      	movs	r1, #2
 800138e:	4890      	ldr	r0, [pc, #576]	; (80015d0 <main+0x290>)
 8001390:	f002 fa6e 	bl	8003870 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		++MessageCounter;
 8001394:	4b8f      	ldr	r3, [pc, #572]	; (80015d4 <main+0x294>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b8d      	ldr	r3, [pc, #564]	; (80015d4 <main+0x294>)
 800139e:	701a      	strb	r2, [r3, #0]
		Joystick[0] /= 40.96;
 80013a0:	4b88      	ldr	r3, [pc, #544]	; (80015c4 <main+0x284>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	a383      	add	r3, pc, #524	; (adr r3, 80015b8 <main+0x278>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa4c 	bl	800084c <__aeabi_ddiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fbcc 	bl	8000b58 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <main+0x284>)
 80013c6:	801a      	strh	r2, [r3, #0]
		Joystick[1] /= 40.96;
 80013c8:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <main+0x284>)
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8a9 	bl	8000524 <__aeabi_i2d>
 80013d2:	a379      	add	r3, pc, #484	; (adr r3, 80015b8 <main+0x278>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4618      	mov	r0, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	f7ff fbb8 	bl	8000b58 <__aeabi_d2uiz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <main+0x284>)
 80013ee:	805a      	strh	r2, [r3, #2]
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80013f0:	4979      	ldr	r1, [pc, #484]	; (80015d8 <main+0x298>)
 80013f2:	4873      	ldr	r0, [pc, #460]	; (80015c0 <main+0x280>)
 80013f4:	f000 fa08 	bl	8001808 <MPU6050_Read_All>
		akcelerometr[0] = MPU6050.Ax;
 80013f8:	4b77      	ldr	r3, [pc, #476]	; (80015d8 <main+0x298>)
 80013fa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	f7ff fba9 	bl	8000b58 <__aeabi_d2uiz>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b74      	ldr	r3, [pc, #464]	; (80015dc <main+0x29c>)
 800140c:	801a      	strh	r2, [r3, #0]
		akcelerometr[1] = MPU6050.Ay;
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <main+0x298>)
 8001410:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001414:	4618      	mov	r0, r3
 8001416:	4621      	mov	r1, r4
 8001418:	f7ff fb9e 	bl	8000b58 <__aeabi_d2uiz>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <main+0x29c>)
 8001422:	805a      	strh	r2, [r3, #2]
		akcelerometr[2] = MPU6050.Az;
 8001424:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <main+0x298>)
 8001426:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fb93 	bl	8000b58 <__aeabi_d2uiz>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <main+0x29c>)
 8001438:	809a      	strh	r2, [r3, #4]
		zyroskop[0] = MPU6050.Gx;
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <main+0x298>)
 800143c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fb88 	bl	8000b58 <__aeabi_d2uiz>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <main+0x2a0>)
 800144e:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gy;
 8001450:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <main+0x298>)
 8001452:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001456:	4618      	mov	r0, r3
 8001458:	4621      	mov	r1, r4
 800145a:	f7ff fb7d 	bl	8000b58 <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <main+0x2a0>)
 8001464:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gz;
 8001466:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <main+0x298>)
 8001468:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800146c:	4618      	mov	r0, r3
 800146e:	4621      	mov	r1, r4
 8001470:	f7ff fb72 	bl	8000b58 <__aeabi_d2uiz>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <main+0x2a0>)
 800147a:	801a      	strh	r2, [r3, #0]
		MessageLength = sprintf(DataToSend, "W %d %d %d %d %d %d %d %d %d %d %d %d \n\r", akcelerometr[0], akcelerometr[1], akcelerometr[2], zyroskop[0], zyroskop[0], zyroskop[0], przyciski[0], przyciski[1], Joystick[0], Joystick[1], JoyBut, count);
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <main+0x29c>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	469c      	mov	ip, r3
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <main+0x29c>)
 8001484:	885b      	ldrh	r3, [r3, #2]
 8001486:	469e      	mov	lr, r3
 8001488:	4b54      	ldr	r3, [pc, #336]	; (80015dc <main+0x29c>)
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <main+0x2a0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <main+0x2a0>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <main+0x2a0>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461c      	mov	r4, r3
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <main+0x2a4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461d      	mov	r5, r3
 80014a8:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <main+0x2a4>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461e      	mov	r6, r3
 80014b0:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <main+0x284>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <main+0x284>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <main+0x2a8>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b49      	ldr	r3, [pc, #292]	; (80015ec <main+0x2ac>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	9605      	str	r6, [sp, #20]
 80014da:	9504      	str	r5, [sp, #16]
 80014dc:	9403      	str	r4, [sp, #12]
 80014de:	9002      	str	r0, [sp, #8]
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	4673      	mov	r3, lr
 80014e6:	4662      	mov	r2, ip
 80014e8:	4941      	ldr	r1, [pc, #260]	; (80015f0 <main+0x2b0>)
 80014ea:	4842      	ldr	r0, [pc, #264]	; (80015f4 <main+0x2b4>)
 80014ec:	f00a fc6a 	bl	800bdc4 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <main+0x2b8>)
 80014f6:	701a      	strb	r2, [r3, #0]
		uint16_t crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*)DataToSend, sizeof(DataToSend)/(sizeof(uint32_t)));
 80014f8:	220a      	movs	r2, #10
 80014fa:	493e      	ldr	r1, [pc, #248]	; (80015f4 <main+0x2b4>)
 80014fc:	483f      	ldr	r0, [pc, #252]	; (80015fc <main+0x2bc>)
 80014fe:	f001 fc6c 	bl	8002dda <HAL_CRC_Accumulate>
 8001502:	4603      	mov	r3, r0
 8001504:	82fb      	strh	r3, [r7, #22]
		MessageLength = sprintf(DataToSend, "W %d %d %d %d %d %d %d %d %d %d %d %d %d \n\r", akcelerometr[0], akcelerometr[1], akcelerometr[2], zyroskop[0], zyroskop[0], zyroskop[0], przyciski[0], przyciski[1], Joystick[0], Joystick[1], JoyBut, count, crc);
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <main+0x29c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	469c      	mov	ip, r3
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <main+0x29c>)
 800150e:	885b      	ldrh	r3, [r3, #2]
 8001510:	469e      	mov	lr, r3
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <main+0x29c>)
 8001514:	889b      	ldrh	r3, [r3, #4]
 8001516:	461a      	mov	r2, r3
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <main+0x2a0>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <main+0x2a0>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <main+0x2a0>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461c      	mov	r4, r3
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <main+0x2a4>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461d      	mov	r5, r3
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <main+0x2a4>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461e      	mov	r6, r3
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <main+0x284>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <main+0x284>)
 8001542:	885b      	ldrh	r3, [r3, #2]
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <main+0x2a8>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <main+0x2ac>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b21b      	sxth	r3, r3
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	8afb      	ldrh	r3, [r7, #22]
 8001558:	930a      	str	r3, [sp, #40]	; 0x28
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	9308      	str	r3, [sp, #32]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	9307      	str	r3, [sp, #28]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	9306      	str	r3, [sp, #24]
 800156a:	9605      	str	r6, [sp, #20]
 800156c:	9504      	str	r5, [sp, #16]
 800156e:	9403      	str	r4, [sp, #12]
 8001570:	9002      	str	r0, [sp, #8]
 8001572:	9101      	str	r1, [sp, #4]
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	4673      	mov	r3, lr
 8001578:	4662      	mov	r2, ip
 800157a:	4921      	ldr	r1, [pc, #132]	; (8001600 <main+0x2c0>)
 800157c:	481d      	ldr	r0, [pc, #116]	; (80015f4 <main+0x2b4>)
 800157e:	f00a fc21 	bl	800bdc4 <siprintf>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <main+0x2b8>)
 8001588:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(DataToSend, MessageLength);
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <main+0x2b8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <main+0x2b4>)
 8001594:	f009 fee4 	bl	800b360 <CDC_Transmit_FS>
		przyciski[0] = 0;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <main+0x2a4>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
		przyciski[1] = 0;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <main+0x2a4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	705a      	strb	r2, [r3, #1]
		JoyBut = 0;
 80015a4:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <main+0x2a8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(VIBROMOTOR_GPIO_Port, VIBROMOTOR_Pin);
		HAL_Delay(1000);
 80015aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ae:	f000 fedf 	bl	8002370 <HAL_Delay>
	{
 80015b2:	e6ef      	b.n	8001394 <main+0x54>
 80015b4:	f3af 8000 	nop.w
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	40447ae1 	.word	0x40447ae1
 80015c0:	20000378 	.word	0x20000378
 80015c4:	200002a8 	.word	0x200002a8
 80015c8:	200002c8 	.word	0x200002c8
 80015cc:	20000454 	.word	0x20000454
 80015d0:	40020400 	.word	0x40020400
 80015d4:	200002b6 	.word	0x200002b6
 80015d8:	200003d0 	.word	0x200003d0
 80015dc:	20000294 	.word	0x20000294
 80015e0:	2000029c 	.word	0x2000029c
 80015e4:	200002a4 	.word	0x200002a4
 80015e8:	200002ac 	.word	0x200002ac
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	0800cba8 	.word	0x0800cba8
 80015f4:	20000428 	.word	0x20000428
 80015f8:	200002b7 	.word	0x200002b7
 80015fc:	20000370 	.word	0x20000370
 8001600:	0800cbd4 	.word	0x0800cbd4

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	; 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	2230      	movs	r2, #48	; 0x30
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00a fb16 	bl	800bc44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <SystemClock_Config+0xc8>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <SystemClock_Config+0xc8>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <SystemClock_Config+0xc8>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <SystemClock_Config+0xcc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <SystemClock_Config+0xcc>)
 800164e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <SystemClock_Config+0xcc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001674:	2319      	movs	r3, #25
 8001676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001678:	23c0      	movs	r3, #192	; 0xc0
 800167a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167c:	2302      	movs	r3, #2
 800167e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	4618      	mov	r0, r3
 800168a:	f005 ff0f 	bl	80074ac <HAL_RCC_OscConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001694:	f000 f858 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001698:	230f      	movs	r3, #15
 800169a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169c:	2302      	movs	r3, #2
 800169e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2103      	movs	r1, #3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f006 f969 	bl	800798c <HAL_RCC_ClockConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016c0:	f000 f842 	bl	8001748 <Error_Handler>
  }
}
 80016c4:	bf00      	nop
 80016c6:	3750      	adds	r7, #80	; 0x50
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x28>)
 80016e4:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_TIM_IC_CaptureCallback+0x28>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80016ee:	801a      	strh	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	200002b0 	.word	0x200002b0
 8001700:	200002b4 	.word	0x200002b4

08001704 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == JOY_BUT_IT_Pin){
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001714:	d102      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0x18>
		JoyBut = 1;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_1_IT_Pin){
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x24>
		przyciski[0] = 1;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_GPIO_EXTI_Callback+0x40>)
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_2_IT_Pin){
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_EXTI_Callback+0x30>
		przyciski[1] = 1;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_GPIO_EXTI_Callback+0x40>)
 8001730:	2201      	movs	r2, #1
 8001732:	705a      	strb	r2, [r3, #1]
	}
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	200002ac 	.word	0x200002ac
 8001744:	200002a4 	.word	0x200002a4

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b088      	sub	sp, #32
 800175a:	af04      	add	r7, sp, #16
 800175c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030f 	add.w	r3, r7, #15
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2275      	movs	r2, #117	; 0x75
 8001770:	21d0      	movs	r1, #208	; 0xd0
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f002 fae0 	bl	8003d38 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b68      	cmp	r3, #104	; 0x68
 800177c:	d13d      	bne.n	80017fa <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 030e 	add.w	r3, r7, #14
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	226b      	movs	r2, #107	; 0x6b
 8001794:	21d0      	movs	r1, #208	; 0xd0
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f002 f9d4 	bl	8003b44 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800179c:	2307      	movs	r3, #7
 800179e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80017a0:	2364      	movs	r3, #100	; 0x64
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	2301      	movs	r3, #1
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	f107 030e 	add.w	r3, r7, #14
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2301      	movs	r3, #1
 80017b0:	2219      	movs	r2, #25
 80017b2:	21d0      	movs	r1, #208	; 0xd0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f002 f9c5 	bl	8003b44 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017be:	2364      	movs	r3, #100	; 0x64
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	2301      	movs	r3, #1
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	f107 030e 	add.w	r3, r7, #14
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	221c      	movs	r2, #28
 80017d0:	21d0      	movs	r1, #208	; 0xd0
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f002 f9b6 	bl	8003b44 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80017d8:	2300      	movs	r3, #0
 80017da:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017dc:	2364      	movs	r3, #100	; 0x64
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	f107 030e 	add.w	r3, r7, #14
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	221b      	movs	r2, #27
 80017ee:	21d0      	movs	r1, #208	; 0xd0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f002 f9a7 	bl	8003b44 <HAL_I2C_Mem_Write>
        return 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <MPU6050_Init+0xa6>
    }
    return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0000      	movs	r0, r0
	...

08001808 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b094      	sub	sp, #80	; 0x50
 800180e:	af04      	add	r7, sp, #16
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	230e      	movs	r3, #14
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	223b      	movs	r2, #59	; 0x3b
 8001826:	21d0      	movs	r1, #208	; 0xd0
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f002 fa85 	bl	8003d38 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b21a      	sxth	r2, r3
 8001834:	7a7b      	ldrb	r3, [r7, #9]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21a      	sxth	r2, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001840:	7abb      	ldrb	r3, [r7, #10]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21a      	sxth	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001872:	7c3b      	ldrb	r3, [r7, #16]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	7c7b      	ldrb	r3, [r7, #17]
 800187a:	b21b      	sxth	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b21a      	sxth	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001884:	7cbb      	ldrb	r3, [r7, #18]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	7cfb      	ldrb	r3, [r7, #19]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21a      	sxth	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001896:	7d3b      	ldrb	r3, [r7, #20]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	7d7b      	ldrb	r3, [r7, #21]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	4313      	orrs	r3, r2
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fe38 	bl	8000524 <__aeabi_i2d>
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4bbd      	ldr	r3, [pc, #756]	; (8001bb0 <MPU6050_Read_All+0x3a8>)
 80018ba:	f7fe ffc7 	bl	800084c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe28 	bl	8000524 <__aeabi_i2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4bb5      	ldr	r3, [pc, #724]	; (8001bb0 <MPU6050_Read_All+0x3a8>)
 80018da:	f7fe ffb7 	bl	800084c <__aeabi_ddiv>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe18 	bl	8000524 <__aeabi_i2d>
 80018f4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b98 <MPU6050_Read_All+0x390>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe ffa7 	bl	800084c <__aeabi_ddiv>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001908:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001914:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001bb4 <MPU6050_Read_All+0x3ac>
 8001918:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800191c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001bb8 <MPU6050_Read_All+0x3b0>
 8001920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fdf7 	bl	8000524 <__aeabi_i2d>
 8001936:	a39a      	add	r3, pc, #616	; (adr r3, 8001ba0 <MPU6050_Read_All+0x398>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe ff86 	bl	800084c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	6839      	ldr	r1, [r7, #0]
 8001946:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fde7 	bl	8000524 <__aeabi_i2d>
 8001956:	a392      	add	r3, pc, #584	; (adr r3, 8001ba0 <MPU6050_Read_All+0x398>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe ff76 	bl	800084c <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	6839      	ldr	r1, [r7, #0]
 8001966:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdd7 	bl	8000524 <__aeabi_i2d>
 8001976:	a38a      	add	r3, pc, #552	; (adr r3, 8001ba0 <MPU6050_Read_All+0x398>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe ff66 	bl	800084c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	6839      	ldr	r1, [r7, #0]
 8001986:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800198a:	f000 fce5 	bl	8002358 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <MPU6050_Read_All+0x3b4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4b87      	ldr	r3, [pc, #540]	; (8001bc0 <MPU6050_Read_All+0x3b8>)
 80019a2:	f7fe ff53 	bl	800084c <__aeabi_ddiv>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80019ae:	f000 fcd3 	bl	8002358 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b81      	ldr	r3, [pc, #516]	; (8001bbc <MPU6050_Read_All+0x3b4>)
 80019b6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	461a      	mov	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	fb03 f202 	mul.w	r2, r3, r2
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d0:	4619      	mov	r1, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d8:	fb03 f301 	mul.w	r3, r3, r1
 80019dc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fda0 	bl	8000524 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	ec43 2b10 	vmov	d0, r2, r3
 80019ec:	f00a fee4 	bl	800c7b8 <sqrt>
 80019f0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a00:	f7ff f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d11f      	bne.n	8001a4a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd87 	bl	8000524 <__aeabi_i2d>
 8001a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a1a:	f7fe ff17 	bl	800084c <__aeabi_ddiv>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b17 	vmov	d7, r2, r3
 8001a26:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2a:	eef0 0a67 	vmov.f32	s1, s15
 8001a2e:	f00a fd17 	bl	800c460 <atan>
 8001a32:	ec51 0b10 	vmov	r0, r1, d0
 8001a36:	a35c      	add	r3, pc, #368	; (adr r3, 8001ba8 <MPU6050_Read_All+0x3a0>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fddc 	bl	80005f8 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a48:	e005      	b.n	8001a56 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd60 	bl	8000524 <__aeabi_i2d>
 8001a64:	4682      	mov	sl, r0
 8001a66:	468b      	mov	fp, r1
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd58 	bl	8000524 <__aeabi_i2d>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	ec43 2b11 	vmov	d1, r2, r3
 8001a7c:	ec4b ab10 	vmov	d0, sl, fp
 8001a80:	f00a fe97 	bl	800c7b2 <atan2>
 8001a84:	ec51 0b10 	vmov	r0, r1, d0
 8001a88:	a347      	add	r3, pc, #284	; (adr r3, 8001ba8 <MPU6050_Read_All+0x3a0>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <MPU6050_Read_All+0x3bc>)
 8001aa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aa4:	f7ff f81a 	bl	8000adc <__aeabi_dcmplt>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <MPU6050_Read_All+0x2bc>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <MPU6050_Read_All+0x3c0>)
 8001aba:	f7ff f82d 	bl	8000b18 <__aeabi_dcmpgt>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d114      	bne.n	8001aee <MPU6050_Read_All+0x2e6>
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <MPU6050_Read_All+0x3c0>)
 8001aca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ace:	f7ff f823 	bl	8000b18 <__aeabi_dcmpgt>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <MPU6050_Read_All+0x2fc>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <MPU6050_Read_All+0x3bc>)
 8001ae4:	f7fe fffa 	bl	8000adc <__aeabi_dcmplt>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001aee:	4937      	ldr	r1, [pc, #220]	; (8001bcc <MPU6050_Read_All+0x3c4>)
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b02:	e014      	b.n	8001b2e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b0a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b0e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b12:	eef0 1a67 	vmov.f32	s3, s15
 8001b16:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b1a:	482c      	ldr	r0, [pc, #176]	; (8001bcc <MPU6050_Read_All+0x3c4>)
 8001b1c:	f000 f85a 	bl	8001bd4 <Kalman_getAngle>
 8001b20:	eeb0 7a40 	vmov.f32	s14, s0
 8001b24:	eef0 7a60 	vmov.f32	s15, s1
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b34:	4690      	mov	r8, r2
 8001b36:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <MPU6050_Read_All+0x3c0>)
 8001b40:	4640      	mov	r0, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	f7fe ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b54:	4614      	mov	r4, r2
 8001b56:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001b66:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b6a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b6e:	eef0 1a67 	vmov.f32	s3, s15
 8001b72:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001b76:	4816      	ldr	r0, [pc, #88]	; (8001bd0 <MPU6050_Read_All+0x3c8>)
 8001b78:	f000 f82c 	bl	8001bd4 <Kalman_getAngle>
 8001b7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b80:	eef0 7a60 	vmov.f32	s15, s1
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001b8a:	bf00      	nop
 8001b8c:	3740      	adds	r7, #64	; 0x40
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b94:	f3af 8000 	nop.w
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40cc2900 	.word	0x40cc2900
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40606000 	.word	0x40606000
 8001ba8:	1a63c1f8 	.word	0x1a63c1f8
 8001bac:	404ca5dc 	.word	0x404ca5dc
 8001bb0:	40d00000 	.word	0x40d00000
 8001bb4:	43aa0000 	.word	0x43aa0000
 8001bb8:	42121eb8 	.word	0x42121eb8
 8001bbc:	20000450 	.word	0x20000450
 8001bc0:	408f4000 	.word	0x408f4000
 8001bc4:	c0568000 	.word	0xc0568000
 8001bc8:	40568000 	.word	0x40568000
 8001bcc:	20000048 	.word	0x20000048
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b096      	sub	sp, #88	; 0x58
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	61f8      	str	r0, [r7, #28]
 8001bdc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001be0:	ed87 1b02 	vstr	d1, [r7, #8]
 8001be4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bf6:	f7fe fb47 	bl	8000288 <__aeabi_dsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c10:	f7fe fcf2 	bl	80005f8 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fb36 	bl	800028c <__adddf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c3a:	f7fe fcdd 	bl	80005f8 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c4c:	f7fe fb1c 	bl	8000288 <__aeabi_dsub>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c5e:	f7fe fb13 	bl	8000288 <__aeabi_dsub>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fb0c 	bl	800028c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c80:	f7fe fcba 	bl	80005f8 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe fafe 	bl	800028c <__adddf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ca6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fae7 	bl	8000288 <__aeabi_dsub>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cd4:	f7fe fc90 	bl	80005f8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fad2 	bl	8000288 <__aeabi_dsub>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cfe:	f7fe fc7b 	bl	80005f8 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4620      	mov	r0, r4
 8001d08:	4629      	mov	r1, r5
 8001d0a:	f7fe fabf 	bl	800028c <__adddf3>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	460c      	mov	r4, r1
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	f7fe fab0 	bl	800028c <__adddf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d3e:	f7fe fd85 	bl	800084c <__aeabi_ddiv>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d54:	f7fe fd7a 	bl	800084c <__aeabi_ddiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001d66:	461a      	mov	r2, r3
 8001d68:	4623      	mov	r3, r4
 8001d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d6e:	f7fe fa8b 	bl	8000288 <__aeabi_dsub>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d88:	f7fe fc36 	bl	80005f8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fa7a 	bl	800028c <__adddf3>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001da8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001db0:	f7fe fc22 	bl	80005f8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fa66 	bl	800028c <__adddf3>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001dd0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001dda:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001de4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dec:	f7fe fc04 	bl	80005f8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fa46 	bl	8000288 <__aeabi_dsub>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	460c      	mov	r4, r1
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e14:	f7fe fbf0 	bl	80005f8 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fa32 	bl	8000288 <__aeabi_dsub>
 8001e24:	4603      	mov	r3, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e3c:	f7fe fbdc 	bl	80005f8 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fa1e 	bl	8000288 <__aeabi_dsub>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e64:	f7fe fbc8 	bl	80005f8 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7fe fa0a 	bl	8000288 <__aeabi_dsub>
 8001e74:	4603      	mov	r3, r0
 8001e76:	460c      	mov	r4, r1
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001e84:	ec44 3b17 	vmov	d7, r3, r4
};
 8001e88:	eeb0 0a47 	vmov.f32	s0, s14
 8001e8c:	eef0 0a67 	vmov.f32	s1, s15
 8001e90:	3758      	adds	r7, #88	; 0x58
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler+0x4>

08001f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3c:	f000 f9f8 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f001 fcab 	bl	80038a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f56:	2002      	movs	r0, #2
 8001f58:	f001 fca4 	bl	80038a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f64:	2010      	movs	r0, #16
 8001f66:	f001 fc9d 	bl	80038a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001f76:	f005 ffaa 	bl	8007ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000454 	.word	0x20000454

08001f84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f8a:	f005 ffa0 	bl	8007ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000454 	.word	0x20000454

08001f98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f9c:	4802      	ldr	r0, [pc, #8]	; (8001fa8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f9e:	f005 ff96 	bl	8007ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000454 	.word	0x20000454

08001fac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <TIM1_CC_IRQHandler+0x10>)
 8001fb2:	f005 ff8c 	bl	8007ece <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000454 	.word	0x20000454

08001fc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <I2C1_EV_IRQHandler+0x10>)
 8001fc6:	f002 f8dd 	bl	8004184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000378 	.word	0x20000378

08001fd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <I2C1_ER_IRQHandler+0x10>)
 8001fda:	f002 fa40 	bl	800445e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000378 	.word	0x20000378

08001fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001fec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ff0:	f001 fc58 	bl	80038a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA2_Stream0_IRQHandler+0x10>)
 8001ffe:	f001 f83f 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000310 	.word	0x20000310

0800200c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <OTG_FS_IRQHandler+0x10>)
 8002012:	f004 fa17 	bl	8006444 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20001968 	.word	0x20001968

08002020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <_sbrk+0x5c>)
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <_sbrk+0x60>)
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <_sbrk+0x64>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <_sbrk+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d207      	bcs.n	8002060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002050:	f009 fdbe 	bl	800bbd0 <__errno>
 8002054:	4602      	mov	r2, r0
 8002056:	230c      	movs	r3, #12
 8002058:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205e:	e009      	b.n	8002074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <_sbrk+0x64>)
 8002070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20020000 	.word	0x20020000
 8002080:	00000400 	.word	0x00000400
 8002084:	200002b8 	.word	0x200002b8
 8002088:	20001d78 	.word	0x20001d78

0800208c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <SystemInit+0x28>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <SystemInit+0x28>)
 8002098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800209c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <SystemInit+0x28>)
 80020a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020a6:	609a      	str	r2, [r3, #8]
#endif
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f009 fdbc 	bl	800bc44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020d6:	4a23      	ldr	r2, [pc, #140]	; (8002164 <MX_TIM1_Init+0xac>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <MX_TIM1_Init+0xa8>)
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002100:	2303      	movs	r3, #3
 8002102:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002108:	2301      	movs	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002110:	230a      	movs	r3, #10
 8002112:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002118:	2301      	movs	r3, #1
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002120:	230a      	movs	r3, #10
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4619      	mov	r1, r3
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <MX_TIM1_Init+0xa8>)
 800212c:	f005 fde6 	bl	8007cfc <HAL_TIM_Encoder_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002136:	f7ff fb07 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <MX_TIM1_Init+0xa8>)
 8002148:	f006 f898 	bl	800827c <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002152:	f7ff faf9 	bl	8001748 <Error_Handler>
  }

}
 8002156:	bf00      	nop
 8002158:	3730      	adds	r7, #48	; 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000454 	.word	0x20000454
 8002164:	40010000 	.word	0x40010000

08002168 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <HAL_TIM_Encoder_MspInit+0xc4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d14c      	bne.n	8002224 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a20      	ldr	r2, [pc, #128]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4815      	ldr	r0, [pc, #84]	; (8002234 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021e0:	f001 f9c4 	bl	800356c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2018      	movs	r0, #24
 80021ea:	f000 fda4 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021ee:	2018      	movs	r0, #24
 80021f0:	f000 fdbd 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2019      	movs	r0, #25
 80021fa:	f000 fd9c 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021fe:	2019      	movs	r0, #25
 8002200:	f000 fdb5 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	201a      	movs	r0, #26
 800220a:	f000 fd94 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800220e:	201a      	movs	r0, #26
 8002210:	f000 fdad 	bl	8002d6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	201b      	movs	r0, #27
 800221a:	f000 fd8c 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800221e:	201b      	movs	r0, #27
 8002220:	f000 fda5 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002224:	bf00      	nop
 8002226:	3728      	adds	r7, #40	; 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40010000 	.word	0x40010000
 8002230:	40023800 	.word	0x40023800
 8002234:	40020000 	.word	0x40020000

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800223c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800223e:	e003      	b.n	8002248 <LoopCopyDataInit>

08002240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002246:	3104      	adds	r1, #4

08002248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800224c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800224e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002250:	d3f6      	bcc.n	8002240 <CopyDataInit>
  ldr  r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002254:	e002      	b.n	800225c <LoopFillZerobss>

08002256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002258:	f842 3b04 	str.w	r3, [r2], #4

0800225c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002260:	d3f9      	bcc.n	8002256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002262:	f7ff ff13 	bl	800208c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f009 fcb9 	bl	800bbdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff f869 	bl	8001340 <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002274:	0800ccf0 	.word	0x0800ccf0
  ldr  r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800227c:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 8002280:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 8002284:	20001d74 	.word	0x20001d74

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>
	...

0800228c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_Init+0x40>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_Init+0x40>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_Init+0x40>)
 80022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x40>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 fd33 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fdea 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023c00 	.word	0x40023c00

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fd4b 	bl	8002d8a <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800230c:	f000 fd13 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000090 	.word	0x20000090
 8002328:	20000098 	.word	0x20000098
 800232c:	20000094 	.word	0x20000094

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000098 	.word	0x20000098
 8002354:	20000494 	.word	0x20000494

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000494 	.word	0x20000494

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_Delay+0x40>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000098 	.word	0x20000098

080023b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e033      	b.n	8002432 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fdc0 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa3c 	bl	8002884 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
 8002422:	e001      	b.n	8002428 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_ADC_Start_DMA+0x1e>
 8002456:	2302      	movs	r3, #2
 8002458:	e0b1      	b.n	80025be <HAL_ADC_Start_DMA+0x182>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d018      	beq.n	80024a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_ADC_Start_DMA+0x18c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_ADC_Start_DMA+0x190>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9a      	lsrs	r2, r3, #18
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002494:	e002      	b.n	800249c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3b01      	subs	r3, #1
 800249a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	f040 8085 	bne.w	80025bc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f023 0206 	bic.w	r2, r3, #6
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
 80024fe:	e002      	b.n	8002506 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_ADC_Start_DMA+0x194>)
 8002510:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_ADC_Start_DMA+0x198>)
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	4a2e      	ldr	r2, [pc, #184]	; (80025d8 <HAL_ADC_Start_DMA+0x19c>)
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <HAL_ADC_Start_DMA+0x1a0>)
 8002528:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002532:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002542:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002552:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	334c      	adds	r3, #76	; 0x4c
 800255e:	4619      	mov	r1, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f000 fd12 	bl	8002f8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10f      	bne.n	8002594 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11c      	bne.n	80025bc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e013      	b.n	80025bc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a11      	ldr	r2, [pc, #68]	; (80025e0 <HAL_ADC_Start_DMA+0x1a4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d10e      	bne.n	80025bc <HAL_ADC_Start_DMA+0x180>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000090 	.word	0x20000090
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	40012300 	.word	0x40012300
 80025d4:	08002a7d 	.word	0x08002a7d
 80025d8:	08002b37 	.word	0x08002b37
 80025dc:	08002b53 	.word	0x08002b53
 80025e0:	40012000 	.word	0x40012000

080025e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1c>
 8002638:	2302      	movs	r3, #2
 800263a:	e113      	b.n	8002864 <HAL_ADC_ConfigChannel+0x244>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b09      	cmp	r3, #9
 800264a:	d925      	bls.n	8002698 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68d9      	ldr	r1, [r3, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	3b1e      	subs	r3, #30
 8002662:	2207      	movs	r2, #7
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43da      	mvns	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	400a      	ands	r2, r1
 8002670:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4618      	mov	r0, r3
 8002684:	4603      	mov	r3, r0
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4403      	add	r3, r0
 800268a:	3b1e      	subs	r3, #30
 800268c:	409a      	lsls	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	e022      	b.n	80026de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	2207      	movs	r2, #7
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	400a      	ands	r2, r1
 80026ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4403      	add	r3, r0
 80026d4:	409a      	lsls	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d824      	bhi.n	8002730 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b05      	subs	r3, #5
 80026f8:	221f      	movs	r2, #31
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b05      	subs	r3, #5
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	e04c      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d824      	bhi.n	8002782 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	3b23      	subs	r3, #35	; 0x23
 800274a:	221f      	movs	r2, #31
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	400a      	ands	r2, r1
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	4618      	mov	r0, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b23      	subs	r3, #35	; 0x23
 8002774:	fa00 f203 	lsl.w	r2, r0, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	e023      	b.n	80027ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	3b41      	subs	r3, #65	; 0x41
 8002794:	221f      	movs	r2, #31
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b41      	subs	r3, #65	; 0x41
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_ADC_ConfigChannel+0x250>)
 80027cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a28      	ldr	r2, [pc, #160]	; (8002874 <HAL_ADC_ConfigChannel+0x254>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10f      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d8>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b12      	cmp	r3, #18
 80027de:	d10b      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_ADC_ConfigChannel+0x254>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d12b      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1c      	ldr	r2, [pc, #112]	; (8002878 <HAL_ADC_ConfigChannel+0x258>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x1f4>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b11      	cmp	r3, #17
 8002812:	d122      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a11      	ldr	r2, [pc, #68]	; (8002878 <HAL_ADC_ConfigChannel+0x258>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d111      	bne.n	800285a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_ADC_ConfigChannel+0x25c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <HAL_ADC_ConfigChannel+0x260>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9a      	lsrs	r2, r3, #18
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012300 	.word	0x40012300
 8002874:	40012000 	.word	0x40012000
 8002878:	10000012 	.word	0x10000012
 800287c:	20000090 	.word	0x20000090
 8002880:	431bde83 	.word	0x431bde83

08002884 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <ADC_Init+0x1f0>)
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <ADC_Init+0x1f4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d022      	beq.n	8002962 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800292a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6899      	ldr	r1, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e00f      	b.n	8002982 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002970:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0202 	bic.w	r2, r2, #2
 8002990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6899      	ldr	r1, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	005a      	lsls	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01b      	beq.n	80029e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	3b01      	subs	r3, #1
 80029dc:	035a      	lsls	r2, r3, #13
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e007      	b.n	80029f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	051a      	lsls	r2, r3, #20
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6899      	ldr	r1, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a3a:	025a      	lsls	r2, r3, #9
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6899      	ldr	r1, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	029a      	lsls	r2, r3, #10
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40012300 	.word	0x40012300
 8002a78:	0f000001 	.word	0x0f000001

08002a7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d13c      	bne.n	8002b10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12b      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d127      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d119      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff fd6b 	bl	80025e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b0e:	e00e      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fd75 	bl	800260c <HAL_ADC_ErrorCallback>
}
 8002b22:	e004      	b.n	8002b2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4798      	blx	r3
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fd57 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fd4a 	bl	800260c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	; (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	; (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	; 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	; 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e00e      	b.n	8002dd2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	795b      	ldrb	r3, [r3, #5]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d105      	bne.n	8002dca <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe f953 	bl	8001070 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b087      	sub	sp, #28
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2202      	movs	r2, #2
 8002dee:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e00a      	b.n	8002e0c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d3f0      	bcc.n	8002df6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002e22:	693b      	ldr	r3, [r7, #16]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fa8c 	bl	8002358 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e099      	b.n	8002f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e00f      	b.n	8002e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fa73 	bl	8002358 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d908      	bls.n	8002e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e078      	b.n	8002f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e8      	bne.n	8002e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_DMA_Init+0x158>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d117      	bne.n	8002f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fa9f 	bl	8003478 <DMA_CheckFifoParam>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	; 0x40
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa56 	bl	800340c <DMA_CalcBaseAndBitshift>
 8002f60:	4603      	mov	r3, r0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f68:	223f      	movs	r2, #63	; 0x3f
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	f010803f 	.word	0xf010803f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Start_IT+0x26>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e040      	b.n	8003034 <HAL_DMA_Start_IT+0xa8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12f      	bne.n	8003026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f9e8 	bl	80033b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0216 	orr.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e005      	b.n	8003032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800302e:	2302      	movs	r3, #2
 8003030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d004      	beq.n	800305a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00c      	b.n	8003074 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2205      	movs	r2, #5
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800308c:	4b92      	ldr	r3, [pc, #584]	; (80032d8 <HAL_DMA_IRQHandler+0x258>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a92      	ldr	r2, [pc, #584]	; (80032dc <HAL_DMA_IRQHandler+0x25c>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2208      	movs	r2, #8
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d01a      	beq.n	80030ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0204 	bic.w	r2, r2, #4
 80030d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	2208      	movs	r2, #8
 80030da:	409a      	lsls	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	2201      	movs	r2, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d012      	beq.n	8003122 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	2201      	movs	r2, #1
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f043 0202 	orr.w	r2, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	2204      	movs	r2, #4
 8003128:	409a      	lsls	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d012      	beq.n	8003158 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	2204      	movs	r2, #4
 8003146:	409a      	lsls	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	2210      	movs	r2, #16
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d043      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03c      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	2210      	movs	r2, #16
 800317c:	409a      	lsls	r2, r3
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d018      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d108      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d024      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
 80031ae:	e01f      	b.n	80031f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e016      	b.n	80031f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0208 	bic.w	r2, r2, #8
 80031de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	2220      	movs	r2, #32
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 808e 	beq.w	800331e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8086 	beq.w	800331e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	2220      	movs	r2, #32
 8003218:	409a      	lsls	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b05      	cmp	r3, #5
 8003228:	d136      	bne.n	8003298 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0216 	bic.w	r2, r2, #22
 8003238:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003248:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_DMA_IRQHandler+0x1da>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0208 	bic.w	r2, r2, #8
 8003268:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	223f      	movs	r2, #63	; 0x3f
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	2b00      	cmp	r3, #0
 800328c:	d07d      	beq.n	800338a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
        }
        return;
 8003296:	e078      	b.n	800338a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d01c      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d030      	beq.n	800331e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
 80032c4:	e02b      	b.n	800331e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d027      	beq.n	800331e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	4798      	blx	r3
 80032d6:	e022      	b.n	800331e <HAL_DMA_IRQHandler+0x29e>
 80032d8:	20000090 	.word	0x20000090
 80032dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0210 	bic.w	r2, r2, #16
 80032fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	2b00      	cmp	r3, #0
 8003324:	d032      	beq.n	800338c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d022      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2205      	movs	r2, #5
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3301      	adds	r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	429a      	cmp	r2, r3
 8003354:	d307      	bcc.n	8003366 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f2      	bne.n	800334a <HAL_DMA_IRQHandler+0x2ca>
 8003364:	e000      	b.n	8003368 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003366:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e000      	b.n	800338c <HAL_DMA_IRQHandler+0x30c>
        return;
 800338a:	bf00      	nop
    }
  }
}
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop

08003394 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d108      	bne.n	80033f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ee:	e007      	b.n	8003400 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]
}
 8003400:	bf00      	nop
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3b10      	subs	r3, #16
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <DMA_CalcBaseAndBitshift+0x64>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <DMA_CalcBaseAndBitshift+0x68>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b03      	cmp	r3, #3
 8003438:	d909      	bls.n	800344e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	659a      	str	r2, [r3, #88]	; 0x58
 800344c:	e007      	b.n	800345e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	aaaaaaab 	.word	0xaaaaaaab
 8003474:	0800cc5c 	.word	0x0800cc5c

08003478 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d11f      	bne.n	80034d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d855      	bhi.n	8003544 <DMA_CheckFifoParam+0xcc>
 8003498:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x28>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	08003545 	.word	0x08003545
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d045      	beq.n	8003548 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e042      	b.n	8003548 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ca:	d13f      	bne.n	800354c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d0:	e03c      	b.n	800354c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d121      	bne.n	8003520 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d836      	bhi.n	8003550 <DMA_CheckFifoParam+0xd8>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <DMA_CheckFifoParam+0x70>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	080034ff 	.word	0x080034ff
 80034f0:	080034f9 	.word	0x080034f9
 80034f4:	08003511 	.word	0x08003511
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e02f      	b.n	800355e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e021      	b.n	8003554 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003518:	d11e      	bne.n	8003558 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800351e:	e01b      	b.n	8003558 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <DMA_CheckFifoParam+0xb4>
 8003526:	2b03      	cmp	r3, #3
 8003528:	d003      	beq.n	8003532 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800352a:	e018      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e015      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	73fb      	strb	r3, [r7, #15]
      break;
 8003542:	e00b      	b.n	800355c <DMA_CheckFifoParam+0xe4>
      break;
 8003544:	bf00      	nop
 8003546:	e00a      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 8003548:	bf00      	nop
 800354a:	e008      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 800354c:	bf00      	nop
 800354e:	e006      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;   
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <DMA_CheckFifoParam+0xe6>
      break;
 800355c:	bf00      	nop
    }
  } 
  
  return status; 
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	; 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e159      	b.n	800383c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003588:	2201      	movs	r2, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	f040 8148 	bne.w	8003836 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00b      	beq.n	80035c6 <HAL_GPIO_Init+0x5a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ba:	2b11      	cmp	r3, #17
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b12      	cmp	r3, #18
 80035c4:	d130      	bne.n	8003628 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0201 	and.w	r2, r3, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0xfc>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b12      	cmp	r3, #18
 8003666:	d123      	bne.n	80036b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	220f      	movs	r2, #15
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	69b9      	ldr	r1, [r7, #24]
 80036ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0203 	and.w	r2, r3, #3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a2 	beq.w	8003836 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b56      	ldr	r3, [pc, #344]	; (8003850 <HAL_GPIO_Init+0x2e4>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	4a55      	ldr	r2, [pc, #340]	; (8003850 <HAL_GPIO_Init+0x2e4>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003700:	6453      	str	r3, [r2, #68]	; 0x44
 8003702:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_GPIO_Init+0x2e4>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370e:	4a51      	ldr	r2, [pc, #324]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	220f      	movs	r2, #15
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <HAL_GPIO_Init+0x2ec>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d019      	beq.n	800376e <HAL_GPIO_Init+0x202>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a47      	ldr	r2, [pc, #284]	; (800385c <HAL_GPIO_Init+0x2f0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x1fe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a46      	ldr	r2, [pc, #280]	; (8003860 <HAL_GPIO_Init+0x2f4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_Init+0x1fa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_GPIO_Init+0x2f8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x1f6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a44      	ldr	r2, [pc, #272]	; (8003868 <HAL_GPIO_Init+0x2fc>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_Init+0x1f2>
 800375a:	2304      	movs	r3, #4
 800375c:	e008      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800375e:	2307      	movs	r3, #7
 8003760:	e006      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376e:	2300      	movs	r3, #0
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_GPIO_Init+0x2e8>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378e:	4b37      	ldr	r3, [pc, #220]	; (800386c <HAL_GPIO_Init+0x300>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <HAL_GPIO_Init+0x300>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037b8:	4b2c      	ldr	r3, [pc, #176]	; (800386c <HAL_GPIO_Init+0x300>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037dc:	4a23      	ldr	r2, [pc, #140]	; (800386c <HAL_GPIO_Init+0x300>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_GPIO_Init+0x300>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003806:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_GPIO_Init+0x300>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <HAL_GPIO_Init+0x300>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003830:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_GPIO_Init+0x300>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	f67f aea2 	bls.w	8003588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	40023800 	.word	0x40023800
 8003854:	40013800 	.word	0x40013800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400
 8003860:	40020800 	.word	0x40020800
 8003864:	40020c00 	.word	0x40020c00
 8003868:	40021000 	.word	0x40021000
 800386c:	40013c00 	.word	0x40013c00

08003870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
 800387c:	4613      	mov	r3, r2
 800387e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003880:	787b      	ldrb	r3, [r7, #1]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800388c:	e003      	b.n	8003896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	619a      	str	r2, [r3, #24]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd ff1e 	bl	8001704 <HAL_GPIO_EXTI_Callback>
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e11f      	b.n	8003b26 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fcc6 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	; 0x24
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003938:	f004 f9cc 	bl	8007cd4 <HAL_RCC_GetPCLK1Freq>
 800393c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4a7b      	ldr	r2, [pc, #492]	; (8003b30 <HAL_I2C_Init+0x25c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d807      	bhi.n	8003958 <HAL_I2C_Init+0x84>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4a7a      	ldr	r2, [pc, #488]	; (8003b34 <HAL_I2C_Init+0x260>)
 800394c:	4293      	cmp	r3, r2
 800394e:	bf94      	ite	ls
 8003950:	2301      	movls	r3, #1
 8003952:	2300      	movhi	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e006      	b.n	8003966 <HAL_I2C_Init+0x92>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a77      	ldr	r2, [pc, #476]	; (8003b38 <HAL_I2C_Init+0x264>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0db      	b.n	8003b26 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a72      	ldr	r2, [pc, #456]	; (8003b3c <HAL_I2C_Init+0x268>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0c9b      	lsrs	r3, r3, #18
 8003978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a64      	ldr	r2, [pc, #400]	; (8003b30 <HAL_I2C_Init+0x25c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d802      	bhi.n	80039a8 <HAL_I2C_Init+0xd4>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3301      	adds	r3, #1
 80039a6:	e009      	b.n	80039bc <HAL_I2C_Init+0xe8>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	4a63      	ldr	r2, [pc, #396]	; (8003b40 <HAL_I2C_Init+0x26c>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	3301      	adds	r3, #1
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4956      	ldr	r1, [pc, #344]	; (8003b30 <HAL_I2C_Init+0x25c>)
 80039d8:	428b      	cmp	r3, r1
 80039da:	d80d      	bhi.n	80039f8 <HAL_I2C_Init+0x124>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1e59      	subs	r1, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	bf38      	it	cc
 80039f4:	2304      	movcc	r3, #4
 80039f6:	e04f      	b.n	8003a98 <HAL_I2C_Init+0x1c4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_I2C_Init+0x150>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1e58      	subs	r0, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	440b      	add	r3, r1
 8003a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e012      	b.n	8003a4a <HAL_I2C_Init+0x176>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1e58      	subs	r0, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	0099      	lsls	r1, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Init+0x17e>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e022      	b.n	8003a98 <HAL_I2C_Init+0x1c4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <HAL_I2C_Init+0x1a4>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1e58      	subs	r0, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	440b      	add	r3, r1
 8003a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a76:	e00f      	b.n	8003a98 <HAL_I2C_Init+0x1c4>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6809      	ldr	r1, [r1, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69da      	ldr	r2, [r3, #28]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6911      	ldr	r1, [r2, #16]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	000186a0 	.word	0x000186a0
 8003b34:	001e847f 	.word	0x001e847f
 8003b38:	003d08ff 	.word	0x003d08ff
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5e:	f7fe fbfb 	bl	8002358 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	f040 80d9 	bne.w	8003d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2319      	movs	r3, #25
 8003b78:	2201      	movs	r2, #1
 8003b7a:	496d      	ldr	r1, [pc, #436]	; (8003d30 <HAL_I2C_Mem_Write+0x1ec>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f002 f8e7 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e0cc      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Mem_Write+0x56>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0c5      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d007      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2221      	movs	r2, #33	; 0x21
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2240      	movs	r2, #64	; 0x40
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a4d      	ldr	r2, [pc, #308]	; (8003d34 <HAL_I2C_Mem_Write+0x1f0>)
 8003c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c02:	88f8      	ldrh	r0, [r7, #6]
 8003c04:	893a      	ldrh	r2, [r7, #8]
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	4603      	mov	r3, r0
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f001 fe76 	bl	8005904 <I2C_RequestMemoryWrite>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d052      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e081      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f002 f968 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d107      	bne.n	8003c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06b      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_I2C_Mem_Write+0x180>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1aa      	bne.n	8003c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f002 f954 	bl	8005f7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e016      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	00100002 	.word	0x00100002
 8003d34:	ffff0000 	.word	0xffff0000

08003d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08c      	sub	sp, #48	; 0x30
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	817b      	strh	r3, [r7, #10]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	813b      	strh	r3, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d52:	f7fe fb01 	bl	8002358 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	f040 8208 	bne.w	8004176 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2319      	movs	r3, #25
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	497b      	ldr	r1, [pc, #492]	; (8003f5c <HAL_I2C_Mem_Read+0x224>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f001 ffed 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e1fb      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x56>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e1f4      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d007      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2222      	movs	r2, #34	; 0x22
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2240      	movs	r2, #64	; 0x40
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <HAL_I2C_Mem_Read+0x228>)
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df6:	88f8      	ldrh	r0, [r7, #6]
 8003df8:	893a      	ldrh	r2, [r7, #8]
 8003dfa:	8979      	ldrh	r1, [r7, #10]
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4603      	mov	r3, r0
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f001 fe12 	bl	8005a30 <I2C_RequestMemoryRead>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1b0      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d113      	bne.n	8003e46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	623b      	str	r3, [r7, #32]
 8003e32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e184      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d11b      	bne.n	8003e86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e164      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d11b      	bne.n	8003ec6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	e144      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003edc:	e138      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	f200 80f1 	bhi.w	80040ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d123      	bne.n	8003f38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f002 f8b5 	bl	8006064 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e139      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f36:	e10b      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d14e      	bne.n	8003fde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	2200      	movs	r2, #0
 8003f48:	4906      	ldr	r1, [pc, #24]	; (8003f64 <HAL_I2C_Mem_Read+0x22c>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f001 ff00 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e10e      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
 8003f5a:	bf00      	nop
 8003f5c:	00100002 	.word	0x00100002
 8003f60:	ffff0000 	.word	0xffff0000
 8003f64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fdc:	e0b8      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4966      	ldr	r1, [pc, #408]	; (8004180 <HAL_I2C_Mem_Read+0x448>)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f001 feb1 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0bf      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2200      	movs	r2, #0
 8004042:	494f      	ldr	r1, [pc, #316]	; (8004180 <HAL_I2C_Mem_Read+0x448>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f001 fe83 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e091      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040c8:	e042      	b.n	8004150 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 ffc8 	bl	8006064 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e04c      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	b2d2      	uxtb	r2, r2
 80040ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d118      	bne.n	8004150 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f aec2 	bne.w	8003ede <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3728      	adds	r7, #40	; 0x28
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	00010004 	.word	0x00010004

08004184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b088      	sub	sp, #32
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d003      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x38>
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	f040 80bd 	bne.w	8004336 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041dc:	d003      	beq.n	80041e6 <HAL_I2C_EV_IRQHandler+0x62>
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041e4:	d101      	bne.n	80041ea <HAL_I2C_EV_IRQHandler+0x66>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_I2C_EV_IRQHandler+0x68>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	f000 812e 	beq.w	800444e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x92>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	0a5b      	lsrs	r3, r3, #9
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f001 ffb0 	bl	800616e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fd62 	bl	8004cd8 <I2C_Master_SB>
 8004214:	e08e      	b.n	8004334 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	08db      	lsrs	r3, r3, #3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0xb2>
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	0a5b      	lsrs	r3, r3, #9
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fdd8 	bl	8004de4 <I2C_Master_ADD10>
 8004234:	e07e      	b.n	8004334 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0xd2>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	0a5b      	lsrs	r3, r3, #9
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fdf2 	bl	8004e38 <I2C_Master_ADDR>
 8004254:	e06e      	b.n	8004334 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d037      	beq.n	80042d2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	f000 80ef 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	09db      	lsrs	r3, r3, #7
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00f      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d103      	bne.n	80042a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f9ef 	bl	800467c <I2C_MasterTransmit_TXE>
 800429e:	e049      	b.n	8004334 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80d2 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	0a5b      	lsrs	r3, r3, #9
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80cb 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d103      	bne.n	80042ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa76 	bl	80047b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c8:	e0c3      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fada 	bl	8004884 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	e0bf      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e0:	f000 80b7 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <HAL_I2C_EV_IRQHandler+0x18c>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_I2C_EV_IRQHandler+0x18c>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fb4a 	bl	80049a2 <I2C_MasterReceive_RXNE>
 800430e:	e011      	b.n	8004334 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 809a 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	0a5b      	lsrs	r3, r3, #9
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8093 	beq.w	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fbe9 	bl	8004b04 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004332:	e08e      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004334:	e08d      	b.n	8004452 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	e007      	b.n	8004358 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d012      	beq.n	800438a <HAL_I2C_EV_IRQHandler+0x206>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	0a5b      	lsrs	r3, r3, #9
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 ffa7 	bl	80052d6 <I2C_Slave_ADDR>
 8004388:	e066      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x226>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	0a5b      	lsrs	r3, r3, #9
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 ffdc 	bl	8005360 <I2C_Slave_STOPF>
 80043a8:	e056      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043aa:	7bbb      	ldrb	r3, [r7, #14]
 80043ac:	2b21      	cmp	r3, #33	; 0x21
 80043ae:	d002      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x232>
 80043b0:	7bbb      	ldrb	r3, [r7, #14]
 80043b2:	2b29      	cmp	r3, #41	; 0x29
 80043b4:	d125      	bne.n	8004402 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	09db      	lsrs	r3, r3, #7
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00f      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x25e>
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	0a9b      	lsrs	r3, r3, #10
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x25e>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 febd 	bl	800515a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e0:	e039      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d033      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d2>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d02d      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 feea 	bl	80051d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004400:	e029      	b.n	8004456 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00f      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x2aa>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	0a9b      	lsrs	r3, r3, #10
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_I2C_EV_IRQHandler+0x2aa>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fef5 	bl	8005216 <I2C_SlaveReceive_RXNE>
 800442c:	e014      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	089b      	lsrs	r3, r3, #2
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	0a5b      	lsrs	r3, r3, #9
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 ff23 	bl	8005292 <I2C_SlaveReceive_BTF>
 800444c:	e004      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004456:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b08a      	sub	sp, #40	; 0x28
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004480:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	0a1b      	lsrs	r3, r3, #8
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00e      	beq.n	80044ac <HAL_I2C_ER_IRQHandler+0x4e>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	0a5b      	lsrs	r3, r3, #9
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00e      	beq.n	80044d6 <HAL_I2C_ER_IRQHandler+0x78>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80044d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	0a9b      	lsrs	r3, r3, #10
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d03f      	beq.n	8004562 <HAL_I2C_ER_IRQHandler+0x104>
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d039      	beq.n	8004562 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80044ee:	7efb      	ldrb	r3, [r7, #27]
 80044f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004506:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004508:	7ebb      	ldrb	r3, [r7, #26]
 800450a:	2b20      	cmp	r3, #32
 800450c:	d112      	bne.n	8004534 <HAL_I2C_ER_IRQHandler+0xd6>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_I2C_ER_IRQHandler+0xd6>
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	2b21      	cmp	r3, #33	; 0x21
 8004518:	d008      	beq.n	800452c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b29      	cmp	r3, #41	; 0x29
 800451e:	d005      	beq.n	800452c <HAL_I2C_ER_IRQHandler+0xce>
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b28      	cmp	r3, #40	; 0x28
 8004524:	d106      	bne.n	8004534 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b21      	cmp	r3, #33	; 0x21
 800452a:	d103      	bne.n	8004534 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f847 	bl	80055c0 <I2C_Slave_AF>
 8004532:	e016      	b.n	8004562 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800453c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004546:	7efb      	ldrb	r3, [r7, #27]
 8004548:	2b10      	cmp	r3, #16
 800454a:	d002      	beq.n	8004552 <HAL_I2C_ER_IRQHandler+0xf4>
 800454c:	7efb      	ldrb	r3, [r7, #27]
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d107      	bne.n	8004562 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004560:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	0adb      	lsrs	r3, r3, #11
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00e      	beq.n	800458c <HAL_I2C_ER_IRQHandler+0x12e>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800458a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 f87e 	bl	80056a0 <I2C_ITError>
  }
}
 80045a4:	bf00      	nop
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
 8004608:	4613      	mov	r3, r2
 800460a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004692:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d150      	bne.n	8004744 <I2C_MasterTransmit_TXE+0xc8>
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d14d      	bne.n	8004744 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d01d      	beq.n	80046ea <I2C_MasterTransmit_TXE+0x6e>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d01a      	beq.n	80046ea <I2C_MasterTransmit_TXE+0x6e>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ba:	d016      	beq.n	80046ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2211      	movs	r2, #17
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff ff62 	bl	80045ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046e8:	e060      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004708:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d107      	bne.n	8004734 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff7d 	bl	800462c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004732:	e03b      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff35 	bl	80045ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004742:	e033      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b21      	cmp	r3, #33	; 0x21
 8004748:	d005      	beq.n	8004756 <I2C_MasterTransmit_TXE+0xda>
 800474a:	7bbb      	ldrb	r3, [r7, #14]
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d12d      	bne.n	80047ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b22      	cmp	r3, #34	; 0x22
 8004754:	d12a      	bne.n	80047ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800476e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004770:	e01c      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d103      	bne.n	8004786 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f880 	bl	8004884 <I2C_MemoryTransmit_TXE_BTF>
}
 8004784:	e012      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047aa:	e7ff      	b.n	80047ac <I2C_MasterTransmit_TXE+0x130>
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b21      	cmp	r3, #33	; 0x21
 80047cc:	d156      	bne.n	800487c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80047fc:	e03e      	b.n	800487c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d01d      	beq.n	8004840 <I2C_MasterTransmit_BTF+0x8c>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b20      	cmp	r3, #32
 8004808:	d01a      	beq.n	8004840 <I2C_MasterTransmit_BTF+0x8c>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004810:	d016      	beq.n	8004840 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004820:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2211      	movs	r2, #17
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff feb7 	bl	80045ac <HAL_I2C_MasterTxCpltCallback>
}
 800483e:	e01d      	b.n	800487c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800484e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fe98 	bl	80045ac <HAL_I2C_MasterTxCpltCallback>
}
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11d      	bne.n	80048d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d10b      	bne.n	80048bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	1c9a      	adds	r2, r3, #2
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048ba:	e06e      	b.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	121b      	asrs	r3, r3, #8
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048d6:	e060      	b.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d10b      	bne.n	80048f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048f6:	e050      	b.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d14c      	bne.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b22      	cmp	r3, #34	; 0x22
 8004904:	d108      	bne.n	8004918 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	e040      	b.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b21      	cmp	r3, #33	; 0x21
 8004926:	d112      	bne.n	800494e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	781a      	ldrb	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800494c:	e025      	b.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d120      	bne.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b21      	cmp	r3, #33	; 0x21
 800495c:	d11d      	bne.n	800499a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fe49 	bl	800462c <HAL_I2C_MemTxCpltCallback>
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b22      	cmp	r3, #34	; 0x22
 80049b4:	f040 80a2 	bne.w	8004afc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d921      	bls.n	8004a0a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	f040 8082 	bne.w	8004afc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a06:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004a08:	e078      	b.n	8004afc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d074      	beq.n	8004afc <I2C_MasterReceive_RXNE+0x15a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <I2C_MasterReceive_RXNE+0x7c>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d16e      	bne.n	8004afc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 faee 	bl	8006000 <I2C_WaitOnSTOPRequestThroughIT>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d142      	bne.n	8004ab0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691a      	ldr	r2, [r3, #16]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d10a      	bne.n	8004a9a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fdd4 	bl	8004640 <HAL_I2C_MemRxCpltCallback>
}
 8004a98:	e030      	b.n	8004afc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2212      	movs	r2, #18
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fd89 	bl	80045c0 <HAL_I2C_MasterRxCpltCallback>
}
 8004aae:	e025      	b.n	8004afc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004abe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fdac 	bl	8004654 <HAL_I2C_ErrorCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d11b      	bne.n	8004b54 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b52:	e0bd      	b.n	8004cd0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d129      	bne.n	8004bb2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d00a      	beq.n	8004b8a <I2C_MasterReceive_BTF+0x86>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d007      	beq.n	8004b8a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bb0:	e08e      	b.n	8004cd0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d176      	bne.n	8004caa <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d002      	beq.n	8004bc8 <I2C_MasterReceive_BTF+0xc4>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d108      	bne.n	8004bda <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e019      	b.n	8004c0e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d002      	beq.n	8004be6 <I2C_MasterReceive_BTF+0xe2>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d108      	bne.n	8004bf8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e00a      	b.n	8004c0e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d007      	beq.n	8004c0e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d10a      	bne.n	8004c94 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fcd7 	bl	8004640 <HAL_I2C_MemRxCpltCallback>
}
 8004c92:	e01d      	b.n	8004cd0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2212      	movs	r2, #18
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fc8c 	bl	80045c0 <HAL_I2C_MasterRxCpltCallback>
}
 8004ca8:	e012      	b.n	8004cd0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d117      	bne.n	8004d1c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d04:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d06:	e067      	b.n	8004dd8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]
}
 8004d1a:	e05d      	b.n	8004dd8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d24:	d133      	bne.n	8004d8e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b21      	cmp	r3, #33	; 0x21
 8004d30:	d109      	bne.n	8004d46 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d42:	611a      	str	r2, [r3, #16]
 8004d44:	e008      	b.n	8004d58 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <I2C_Master_SB+0x92>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d032      	beq.n	8004dd8 <I2C_Master_SB+0x100>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d02d      	beq.n	8004dd8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8a:	605a      	str	r2, [r3, #4]
}
 8004d8c:	e024      	b.n	8004dd8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10e      	bne.n	8004db4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	11db      	asrs	r3, r3, #7
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0306 	and.w	r3, r3, #6
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f063 030f 	orn	r3, r3, #15
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]
}
 8004db2:	e011      	b.n	8004dd8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10d      	bne.n	8004dd8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	11db      	asrs	r3, r3, #7
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	f063 030e 	orn	r3, r3, #14
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <I2C_Master_ADD10+0x24>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d011      	beq.n	8004e2c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <I2C_Master_ADD10+0x38>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e2a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b091      	sub	sp, #68	; 0x44
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b22      	cmp	r3, #34	; 0x22
 8004e60:	f040 8169 	bne.w	8005136 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <I2C_Master_ADDR+0x54>
 8004e6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d10b      	bne.n	8004e8c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e74:	2300      	movs	r3, #0
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	e160      	b.n	800514e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11d      	bne.n	8004ed0 <I2C_Master_ADDR+0x98>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e9c:	d118      	bne.n	8004ed0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50
 8004ece:	e13e      	b.n	800514e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d113      	bne.n	8004f02 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e115      	b.n	800512e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	f040 808a 	bne.w	8005022 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f14:	d137      	bne.n	8004f86 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f34:	d113      	bne.n	8004f5e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	e0e7      	b.n	800512e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e0d3      	b.n	800512e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d02e      	beq.n	8004fea <I2C_Master_ADDR+0x1b2>
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d02b      	beq.n	8004fea <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	2b12      	cmp	r3, #18
 8004f96:	d102      	bne.n	8004f9e <I2C_Master_ADDR+0x166>
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d125      	bne.n	8004fea <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d00e      	beq.n	8004fc2 <I2C_Master_ADDR+0x18a>
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d00b      	beq.n	8004fc2 <I2C_Master_ADDR+0x18a>
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d008      	beq.n	8004fc2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e007      	b.n	8004fd2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	e0a1      	b.n	800512e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e085      	b.n	800512e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d14d      	bne.n	80050c8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	2b04      	cmp	r3, #4
 8005030:	d016      	beq.n	8005060 <I2C_Master_ADDR+0x228>
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b02      	cmp	r3, #2
 8005036:	d013      	beq.n	8005060 <I2C_Master_ADDR+0x228>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b10      	cmp	r3, #16
 800503c:	d010      	beq.n	8005060 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e007      	b.n	8005070 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507e:	d117      	bne.n	80050b0 <I2C_Master_ADDR+0x278>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005086:	d00b      	beq.n	80050a0 <I2C_Master_ADDR+0x268>
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	2b01      	cmp	r3, #1
 800508c:	d008      	beq.n	80050a0 <I2C_Master_ADDR+0x268>
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b08      	cmp	r3, #8
 8005092:	d005      	beq.n	80050a0 <I2C_Master_ADDR+0x268>
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	2b10      	cmp	r3, #16
 8005098:	d002      	beq.n	80050a0 <I2C_Master_ADDR+0x268>
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	2b20      	cmp	r3, #32
 800509e:	d107      	bne.n	80050b0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	e032      	b.n	800512e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e6:	d117      	bne.n	8005118 <I2C_Master_ADDR+0x2e0>
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ee:	d00b      	beq.n	8005108 <I2C_Master_ADDR+0x2d0>
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d008      	beq.n	8005108 <I2C_Master_ADDR+0x2d0>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d005      	beq.n	8005108 <I2C_Master_ADDR+0x2d0>
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d002      	beq.n	8005108 <I2C_Master_ADDR+0x2d0>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	2b20      	cmp	r3, #32
 8005106:	d107      	bne.n	8005118 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005116:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005134:	e00b      	b.n	800514e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	e7ff      	b.n	800514e <I2C_Master_ADDR+0x316>
 800514e:	bf00      	nop
 8005150:	3744      	adds	r7, #68	; 0x44
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02b      	beq.n	80051cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d114      	bne.n	80051cc <I2C_SlaveTransmit_TXE+0x72>
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b29      	cmp	r3, #41	; 0x29
 80051a6:	d111      	bne.n	80051cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2221      	movs	r2, #33	; 0x21
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2228      	movs	r2, #40	; 0x28
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fa04 	bl	80045d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051cc:	bf00      	nop
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d011      	beq.n	800520a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02c      	beq.n	800528a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d114      	bne.n	800528a <I2C_SlaveReceive_RXNE+0x74>
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b2a      	cmp	r3, #42	; 0x2a
 8005264:	d111      	bne.n	800528a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005274:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2222      	movs	r2, #34	; 0x22
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff f9af 	bl	80045e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052f0:	2b28      	cmp	r3, #40	; 0x28
 80052f2:	d127      	bne.n	8005344 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	09db      	lsrs	r3, r3, #7
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	81bb      	strh	r3, [r7, #12]
 8005326:	e002      	b.n	800532e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005336:	89ba      	ldrh	r2, [r7, #12]
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff f95d 	bl	80045fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005342:	e008      	b.n	8005356 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800537e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005380:	2300      	movs	r3, #0
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053bc:	d172      	bne.n	80054a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	2b22      	cmp	r3, #34	; 0x22
 80053c2:	d002      	beq.n	80053ca <I2C_Slave_STOPF+0x6a>
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b2a      	cmp	r3, #42	; 0x2a
 80053c8:	d135      	bne.n	8005436 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0204 	orr.w	r2, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	4618      	mov	r0, r3
 8005404:	f7fd ffc6 	bl	8003394 <HAL_DMA_GetState>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d049      	beq.n	80054a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4a69      	ldr	r2, [pc, #420]	; (80055b8 <I2C_Slave_STOPF+0x258>)
 8005414:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd fe0e 	bl	800303c <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d03d      	beq.n	80054a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005434:	e035      	b.n	80054a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b29a      	uxth	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	4618      	mov	r0, r3
 8005470:	f7fd ff90 	bl	8003394 <HAL_DMA_GetState>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d014      	beq.n	80054a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	4a4e      	ldr	r2, [pc, #312]	; (80055b8 <I2C_Slave_STOPF+0x258>)
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fdd8 	bl	800303c <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800549c:	4610      	mov	r0, r2
 800549e:	4798      	blx	r3
 80054a0:	e000      	b.n	80054a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d03e      	beq.n	800552c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d112      	bne.n	80054e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d112      	bne.n	8005516 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0204 	orr.w	r2, r3, #4
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f8b3 	bl	80056a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800553a:	e039      	b.n	80055b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b2a      	cmp	r3, #42	; 0x2a
 8005540:	d109      	bne.n	8005556 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2228      	movs	r2, #40	; 0x28
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff f849 	bl	80045e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b28      	cmp	r3, #40	; 0x28
 8005560:	d111      	bne.n	8005586 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <I2C_Slave_STOPF+0x25c>)
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff f84a 	bl	8004618 <HAL_I2C_ListenCpltCallback>
}
 8005584:	e014      	b.n	80055b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	2b22      	cmp	r3, #34	; 0x22
 800558c:	d002      	beq.n	8005594 <I2C_Slave_STOPF+0x234>
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	2b22      	cmp	r3, #34	; 0x22
 8005592:	d10d      	bne.n	80055b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff f81c 	bl	80045e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	08005c01 	.word	0x08005c01
 80055bc:	ffff0000 	.word	0xffff0000

080055c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d002      	beq.n	80055e2 <I2C_Slave_AF+0x22>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d129      	bne.n	8005636 <I2C_Slave_AF+0x76>
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	2b28      	cmp	r3, #40	; 0x28
 80055e6:	d126      	bne.n	8005636 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <I2C_Slave_AF+0xdc>)
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005606:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005616:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fe fff2 	bl	8004618 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005634:	e02e      	b.n	8005694 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b21      	cmp	r3, #33	; 0x21
 800563a:	d126      	bne.n	800568a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <I2C_Slave_AF+0xdc>)
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2221      	movs	r2, #33	; 0x21
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005666:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005670:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7fe ffa6 	bl	80045d4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005688:	e004      	b.n	8005694 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005692:	615a      	str	r2, [r3, #20]
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	ffff0000 	.word	0xffff0000

080056a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056b8:	7bbb      	ldrb	r3, [r7, #14]
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d002      	beq.n	80056c4 <I2C_ITError+0x24>
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d10a      	bne.n	80056da <I2C_ITError+0x3a>
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b22      	cmp	r3, #34	; 0x22
 80056c8:	d107      	bne.n	80056da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056e0:	2b28      	cmp	r3, #40	; 0x28
 80056e2:	d107      	bne.n	80056f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2228      	movs	r2, #40	; 0x28
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056f2:	e015      	b.n	8005720 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005702:	d00a      	beq.n	800571a <I2C_ITError+0x7a>
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b60      	cmp	r3, #96	; 0x60
 8005708:	d007      	beq.n	800571a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572e:	d162      	bne.n	80057f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800573e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d020      	beq.n	8005790 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	4a6a      	ldr	r2, [pc, #424]	; (80058fc <I2C_ITError+0x25c>)
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	4618      	mov	r0, r3
 800575c:	f7fd fc6e 	bl	800303c <HAL_DMA_Abort_IT>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8089 	beq.w	800587a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2220      	movs	r2, #32
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800578a:	4610      	mov	r0, r2
 800578c:	4798      	blx	r3
 800578e:	e074      	b.n	800587a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	4a59      	ldr	r2, [pc, #356]	; (80058fc <I2C_ITError+0x25c>)
 8005796:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fc4d 	bl	800303c <HAL_DMA_Abort_IT>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d068      	beq.n	800587a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d10b      	bne.n	80057ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0201 	bic.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	e041      	b.n	800587a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b60      	cmp	r3, #96	; 0x60
 8005800:	d125      	bne.n	800584e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d10b      	bne.n	8005836 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fe ff0e 	bl	8004668 <HAL_I2C_AbortCpltCallback>
 800584c:	e015      	b.n	800587a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d10b      	bne.n	8005874 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fe feed 	bl	8004654 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10e      	bne.n	80058a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800589a:	2b00      	cmp	r3, #0
 800589c:	d104      	bne.n	80058a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d113      	bne.n	80058f4 <I2C_ITError+0x254>
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b28      	cmp	r3, #40	; 0x28
 80058d0:	d110      	bne.n	80058f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <I2C_ITError+0x260>)
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fe fe92 	bl	8004618 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08005c01 	.word	0x08005c01
 8005900:	ffff0000 	.word	0xffff0000

08005904 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	4608      	mov	r0, r1
 800590e:	4611      	mov	r1, r2
 8005910:	461a      	mov	r2, r3
 8005912:	4603      	mov	r3, r0
 8005914:	817b      	strh	r3, [r7, #10]
 8005916:	460b      	mov	r3, r1
 8005918:	813b      	strh	r3, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	2200      	movs	r2, #0
 8005936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fa08 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005954:	d103      	bne.n	800595e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e05f      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	492d      	ldr	r1, [pc, #180]	; (8005a2c <I2C_RequestMemoryWrite+0x128>)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa40 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e04c      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a0:	6a39      	ldr	r1, [r7, #32]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 faaa 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d107      	bne.n	80059c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e02b      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d105      	bne.n	80059dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059d0:	893b      	ldrh	r3, [r7, #8]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]
 80059da:	e021      	b.n	8005a20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059dc:	893b      	ldrh	r3, [r7, #8]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ec:	6a39      	ldr	r1, [r7, #32]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fa84 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d107      	bne.n	8005a12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e005      	b.n	8005a22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	00010002 	.word	0x00010002

08005a30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	460b      	mov	r3, r1
 8005a44:	813b      	strh	r3, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f96a 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d103      	bne.n	8005a9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0aa      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	6a3a      	ldr	r2, [r7, #32]
 8005ab2:	4952      	ldr	r1, [pc, #328]	; (8005bfc <I2C_RequestMemoryRead+0x1cc>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f9a2 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e097      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005adc:	6a39      	ldr	r1, [r7, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fa0c 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d107      	bne.n	8005b02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e076      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	611a      	str	r2, [r3, #16]
 8005b16:	e021      	b.n	8005b5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b28:	6a39      	ldr	r1, [r7, #32]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f9e6 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00d      	beq.n	8005b52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d107      	bne.n	8005b4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e050      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	6a39      	ldr	r1, [r7, #32]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f9cb 	bl	8005efc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00d      	beq.n	8005b88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d107      	bne.n	8005b84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e035      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f8d3 	bl	8005d50 <I2C_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d103      	bne.n	8005bc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e013      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bcc:	897b      	ldrh	r3, [r7, #10]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	4906      	ldr	r1, [pc, #24]	; (8005bfc <I2C_RequestMemoryRead+0x1cc>)
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f90b 	bl	8005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	00010002 	.word	0x00010002

08005c00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c1a:	4b4b      	ldr	r3, [pc, #300]	; (8005d48 <I2C_DMAAbort+0x148>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	08db      	lsrs	r3, r3, #3
 8005c20:	4a4a      	ldr	r2, [pc, #296]	; (8005d4c <I2C_DMAAbort+0x14c>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	0a1a      	lsrs	r2, r3, #8
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00da      	lsls	r2, r3, #3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005c46:	e00a      	b.n	8005c5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5c:	d0ea      	beq.n	8005c34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2200      	movs	r2, #0
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d10e      	bne.n	8005cee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	f7fe fcbe 	bl	8004668 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cec:	e027      	b.n	8005d3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cee:	7cfb      	ldrb	r3, [r7, #19]
 8005cf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cf4:	2b28      	cmp	r3, #40	; 0x28
 8005cf6:	d117      	bne.n	8005d28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2228      	movs	r2, #40	; 0x28
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d26:	e007      	b.n	8005d38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d38:	6978      	ldr	r0, [r7, #20]
 8005d3a:	f7fe fc8b 	bl	8004654 <HAL_I2C_ErrorCallback>
}
 8005d3e:	bf00      	nop
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000090 	.word	0x20000090
 8005d4c:	14f8b589 	.word	0x14f8b589

08005d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d60:	e025      	b.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d68:	d021      	beq.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fc faf5 	bl	8002358 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e023      	b.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d10d      	bne.n	8005dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	43da      	mvns	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	e00c      	b.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bf0c      	ite	eq
 8005de6:	2301      	moveq	r3, #1
 8005de8:	2300      	movne	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d0b6      	beq.n	8005d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e0c:	e051      	b.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1c:	d123      	bne.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e046      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e6c:	d021      	beq.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e6e:	f7fc fa73 	bl	8002358 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d302      	bcc.n	8005e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d116      	bne.n	8005eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e020      	b.n	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10c      	bne.n	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e00b      	b.n	8005eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	43da      	mvns	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d18d      	bne.n	8005e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f08:	e02d      	b.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f900 	bl	8006110 <I2C_IsAcknowledgeFailed>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e02d      	b.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f20:	d021      	beq.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f22:	f7fc fa19 	bl	8002358 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d302      	bcc.n	8005f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d116      	bne.n	8005f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e007      	b.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d1ca      	bne.n	8005f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f8a:	e02d      	b.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f8bf 	bl	8006110 <I2C_IsAcknowledgeFailed>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e02d      	b.n	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa2:	d021      	beq.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa4:	f7fc f9d8 	bl	8002358 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d302      	bcc.n	8005fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d116      	bne.n	8005fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e007      	b.n	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d1ca      	bne.n	8005f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	08db      	lsrs	r3, r3, #3
 8006012:	4a13      	ldr	r2, [pc, #76]	; (8006060 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	0a1a      	lsrs	r2, r3, #8
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3b01      	subs	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d107      	bne.n	800603e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e008      	b.n	8006050 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d0e9      	beq.n	8006022 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	20000090 	.word	0x20000090
 8006060:	14f8b589 	.word	0x14f8b589

08006064 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006070:	e042      	b.n	80060f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b10      	cmp	r3, #16
 800607e:	d119      	bne.n	80060b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0210 	mvn.w	r2, #16
 8006088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e029      	b.n	8006108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b4:	f7fc f950 	bl	8002358 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e007      	b.n	8006108 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d1b5      	bne.n	8006072 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006126:	d11b      	bne.n	8006160 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006130:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	f043 0204 	orr.w	r2, r3, #4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800617e:	d103      	bne.n	8006188 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006186:	e007      	b.n	8006198 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006190:	d102      	bne.n	8006198 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2208      	movs	r2, #8
 8006196:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a6:	b08f      	sub	sp, #60	; 0x3c
 80061a8:	af0a      	add	r7, sp, #40	; 0x28
 80061aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e10f      	b.n	80063d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f005 fa0b 	bl	800b5ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2203      	movs	r2, #3
 80061da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f002 f9d8 	bl	80085aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	687e      	ldr	r6, [r7, #4]
 8006202:	466d      	mov	r5, sp
 8006204:	f106 0410 	add.w	r4, r6, #16
 8006208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800620a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800620c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800620e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006214:	e885 0003 	stmia.w	r5, {r0, r1}
 8006218:	1d33      	adds	r3, r6, #4
 800621a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800621c:	6838      	ldr	r0, [r7, #0]
 800621e:	f002 f8af 	bl	8008380 <USB_CoreInit>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0d0      	b.n	80063d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f002 f9c6 	bl	80085cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e04a      	b.n	80062dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006246:	7bfa      	ldrb	r2, [r7, #15]
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	333d      	adds	r3, #61	; 0x3d
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800625a:	7bfa      	ldrb	r2, [r7, #15]
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	333c      	adds	r3, #60	; 0x3c
 800626a:	7bfa      	ldrb	r2, [r7, #15]
 800626c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800626e:	7bfa      	ldrb	r2, [r7, #15]
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	b298      	uxth	r0, r3
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	3342      	adds	r3, #66	; 0x42
 8006282:	4602      	mov	r2, r0
 8006284:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006286:	7bfa      	ldrb	r2, [r7, #15]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	333f      	adds	r3, #63	; 0x3f
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800629a:	7bfa      	ldrb	r2, [r7, #15]
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	4613      	mov	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	3344      	adds	r3, #68	; 0x44
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	3348      	adds	r3, #72	; 0x48
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062c2:	7bfa      	ldrb	r2, [r7, #15]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	3350      	adds	r3, #80	; 0x50
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	3301      	adds	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3af      	bcc.n	8006246 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	e044      	b.n	8006376 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062ec:	7bfa      	ldrb	r2, [r7, #15]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	6879      	ldr	r1, [r7, #4]
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006314:	7bfa      	ldrb	r2, [r7, #15]
 8006316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800632e:	7bfa      	ldrb	r2, [r7, #15]
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800635a:	7bfa      	ldrb	r2, [r7, #15]
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	440b      	add	r3, r1
 8006368:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	3301      	adds	r3, #1
 8006374:	73fb      	strb	r3, [r7, #15]
 8006376:	7bfa      	ldrb	r2, [r7, #15]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d3b5      	bcc.n	80062ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	687e      	ldr	r6, [r7, #4]
 8006388:	466d      	mov	r5, sp
 800638a:	f106 0410 	add.w	r4, r6, #16
 800638e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800639a:	e885 0003 	stmia.w	r5, {r0, r1}
 800639e:	1d33      	adds	r3, r6, #4
 80063a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f002 f93c 	bl	8008620 <USB_DevInit>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e00d      	b.n	80063d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f003 f984 	bl	80096dc <USB_DevDisconnect>

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_PCD_Start+0x1c>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e020      	b.n	800643c <HAL_PCD_Start+0x5e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	2b01      	cmp	r3, #1
 8006408:	d109      	bne.n	800641e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800640e:	2b01      	cmp	r3, #1
 8006410:	d005      	beq.n	800641e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006416:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f002 f8b0 	bl	8008588 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4618      	mov	r0, r3
 800642e:	f003 f934 	bl	800969a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b08d      	sub	sp, #52	; 0x34
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f003 f9f2 	bl	8009844 <USB_GetMode>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 839d 	bne.w	8006ba2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f003 f956 	bl	800971e <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8393 	beq.w	8006ba0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f003 f94d 	bl	800971e <USB_ReadInterrupts>
 8006484:	4603      	mov	r3, r0
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d107      	bne.n	800649e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f002 0202 	and.w	r2, r2, #2
 800649c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f003 f93b 	bl	800971e <USB_ReadInterrupts>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d161      	bne.n	8006576 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0210 	bic.w	r2, r2, #16
 80064c0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	1a9b      	subs	r3, r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	3304      	adds	r3, #4
 80064e0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	0c5b      	lsrs	r3, r3, #17
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d124      	bne.n	8006538 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d035      	beq.n	8006566 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6a38      	ldr	r0, [r7, #32]
 800650e:	f002 ffa1 	bl	8009454 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800651e:	441a      	add	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006530:	441a      	add	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	619a      	str	r2, [r3, #24]
 8006536:	e016      	b.n	8006566 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	0c5b      	lsrs	r3, r3, #17
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2b06      	cmp	r3, #6
 8006542:	d110      	bne.n	8006566 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800654a:	2208      	movs	r2, #8
 800654c:	4619      	mov	r1, r3
 800654e:	6a38      	ldr	r0, [r7, #32]
 8006550:	f002 ff80 	bl	8009454 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006560:	441a      	add	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0210 	orr.w	r2, r2, #16
 8006574:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f003 f8cf 	bl	800971e <USB_ReadInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006586:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800658a:	d16e      	bne.n	800666a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f003 f8d5 	bl	8009744 <USB_ReadDevAllOutEpInterrupt>
 800659a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800659c:	e062      	b.n	8006664 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d057      	beq.n	8006658 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	4611      	mov	r1, r2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f003 f8fa 	bl	80097ac <USB_ReadDevOutEPInterrupt>
 80065b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00c      	beq.n	80065de <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	461a      	mov	r2, r3
 80065d2:	2301      	movs	r3, #1
 80065d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fdb1 	bl	8007140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00c      	beq.n	8006602 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	461a      	mov	r2, r3
 80065f6:	2308      	movs	r3, #8
 80065f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80065fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 feab 	bl	8007358 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f003 0310 	and.w	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	2310      	movs	r3, #16
 800661c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006634:	461a      	mov	r2, r3
 8006636:	2320      	movs	r3, #32
 8006638:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	461a      	mov	r2, r3
 8006652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006656:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	3301      	adds	r3, #1
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d199      	bne.n	800659e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f003 f855 	bl	800971e <USB_ReadInterrupts>
 8006674:	4603      	mov	r3, r0
 8006676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800667a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800667e:	f040 80c0 	bne.w	8006802 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f003 f876 	bl	8009778 <USB_ReadDevAllInEpInterrupt>
 800668c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006692:	e0b2      	b.n	80067fa <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a7 	beq.w	80067ee <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 f89c 	bl	80097e8 <USB_ReadDevInEPInterrupt>
 80066b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d057      	beq.n	800676c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	2201      	movs	r2, #1
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69f9      	ldr	r1, [r7, #28]
 80066d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066dc:	4013      	ands	r3, r2
 80066de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	461a      	mov	r2, r3
 80066ee:	2301      	movs	r3, #1
 80066f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d132      	bne.n	8006760 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3348      	adds	r3, #72	; 0x48
 800670a:	6819      	ldr	r1, [r3, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4403      	add	r3, r0
 800671a:	3344      	adds	r3, #68	; 0x44
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4419      	add	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	4613      	mov	r3, r2
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4403      	add	r3, r0
 800672e:	3348      	adds	r3, #72	; 0x48
 8006730:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <HAL_PCD_IRQHandler+0x31c>
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	3350      	adds	r3, #80	; 0x50
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006758:	461a      	mov	r2, r3
 800675a:	2101      	movs	r1, #1
 800675c:	f003 f8a4 	bl	80098a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	b2db      	uxtb	r3, r3
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f004 ffc1 	bl	800b6ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	461a      	mov	r2, r3
 8006784:	2308      	movs	r3, #8
 8006786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679e:	461a      	mov	r2, r3
 80067a0:	2310      	movs	r3, #16
 80067a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	461a      	mov	r2, r3
 80067bc:	2340      	movs	r3, #64	; 0x40
 80067be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	2302      	movs	r3, #2
 80067da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80067e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fc1b 	bl	8007024 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	3301      	adds	r3, #1
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f af49 	bne.w	8006694 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f002 ff89 	bl	800971e <USB_ReadInterrupts>
 800680c:	4603      	mov	r3, r0
 800680e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006816:	d122      	bne.n	800685e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006832:	2b01      	cmp	r3, #1
 8006834:	d108      	bne.n	8006848 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fe27 	bl	8007494 <HAL_PCDEx_LPM_Callback>
 8006846:	e002      	b.n	800684e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f004 ffbd 	bl	800b7c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800685c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f002 ff5b 	bl	800971e <USB_ReadInterrupts>
 8006868:	4603      	mov	r3, r0
 800686a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800686e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006872:	d112      	bne.n	800689a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d102      	bne.n	800688a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f004 ff79 	bl	800b77c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006898:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 ff3d 	bl	800971e <USB_ReadInterrupts>
 80068a4:	4603      	mov	r3, r0
 80068a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	f040 80c7 	bne.w	8006a40 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068c0:	f023 0301 	bic.w	r3, r3, #1
 80068c4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2110      	movs	r1, #16
 80068cc:	4618      	mov	r0, r3
 80068ce:	f002 f80b 	bl	80088e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d6:	e056      	b.n	8006986 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068ea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800690a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800692a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800693e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800695e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	3301      	adds	r3, #1
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	429a      	cmp	r2, r3
 800698e:	d3a3      	bcc.n	80068d8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	69fa      	ldr	r2, [r7, #28]
 800699a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800699e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80069a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069bc:	f043 030b 	orr.w	r3, r3, #11
 80069c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d2:	f043 030b 	orr.w	r3, r3, #11
 80069d6:	6453      	str	r3, [r2, #68]	; 0x44
 80069d8:	e015      	b.n	8006a06 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80069f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a00:	f043 030b 	orr.w	r3, r3, #11
 8006a04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f002 ff3c 	bl	80098a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f002 fe6a 	bl	800971e <USB_ReadInterrupts>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	d124      	bne.n	8006aa0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f002 ff00 	bl	8009860 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 ffa0 	bl	80089aa <USB_GetDevSpeed>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681c      	ldr	r4, [r3, #0]
 8006a76:	f001 f921 	bl	8007cbc <HAL_RCC_GetHCLKFreq>
 8006a7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	461a      	mov	r2, r3
 8006a84:	4620      	mov	r0, r4
 8006a86:	f001 fcdd 	bl	8008444 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f004 fe57 	bl	800b73e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f002 fe3a 	bl	800971e <USB_ReadInterrupts>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10a      	bne.n	8006aca <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f004 fe34 	bl	800b722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f002 0208 	and.w	r2, r2, #8
 8006ac8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f002 fe25 	bl	800971e <USB_ReadInterrupts>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ade:	d10f      	bne.n	8006b00 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f004 fe8c 	bl	800b808 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f002 fe0a 	bl	800971e <USB_ReadInterrupts>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b14:	d10f      	bne.n	8006b36 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f004 fe5f 	bl	800b7e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006b34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f002 fdef 	bl	800971e <USB_ReadInterrupts>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4a:	d10a      	bne.n	8006b62 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f004 fe6d 	bl	800b82c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 fdd9 	bl	800971e <USB_ReadInterrupts>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d115      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f004 fe5d 	bl	800b848 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6859      	ldr	r1, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e000      	b.n	8006ba2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006ba0:	bf00      	nop
    }
  }
}
 8006ba2:	3734      	adds	r7, #52	; 0x34
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd90      	pop	{r4, r7, pc}

08006ba8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_PCD_SetAddress+0x1a>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e013      	b.n	8006bea <HAL_PCD_SetAddress+0x42>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 fd37 	bl	800964e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	4608      	mov	r0, r1
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	70fb      	strb	r3, [r7, #3]
 8006c04:	460b      	mov	r3, r1
 8006c06:	803b      	strh	r3, [r7, #0]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da0f      	bge.n	8006c38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	f003 020f 	and.w	r2, r3, #15
 8006c1e:	4613      	mov	r3, r2
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	3338      	adds	r3, #56	; 0x38
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	705a      	strb	r2, [r3, #1]
 8006c36:	e00f      	b.n	8006c58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	f003 020f 	and.w	r2, r3, #15
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3304      	adds	r3, #4
 8006c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c64:	883a      	ldrh	r2, [r7, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006c82:	78bb      	ldrb	r3, [r7, #2]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d102      	bne.n	8006c8e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_PCD_EP_Open+0xaa>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e00e      	b.n	8006cba <HAL_PCD_EP_Open+0xc8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fea2 	bl	80089f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da0f      	bge.n	8006cf6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	f003 020f 	and.w	r2, r3, #15
 8006cdc:	4613      	mov	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	1a9b      	subs	r3, r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	3338      	adds	r3, #56	; 0x38
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4413      	add	r3, r2
 8006cea:	3304      	adds	r3, #4
 8006cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	705a      	strb	r2, [r3, #1]
 8006cf4:	e00f      	b.n	8006d16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	1a9b      	subs	r3, r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_PCD_EP_Close+0x6e>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e00e      	b.n	8006d4e <HAL_PCD_EP_Close+0x8c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68f9      	ldr	r1, [r7, #12]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fee0 	bl	8008b04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	460b      	mov	r3, r1
 8006d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	f003 020f 	and.w	r2, r3, #15
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d109      	bne.n	8006dd0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6818      	ldr	r0, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	f002 f9bb 	bl	8009144 <USB_EP0StartXfer>
 8006dce:	e008      	b.n	8006de2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	f001 ff6d 	bl	8008cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	f003 020f 	and.w	r2, r3, #15
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	1a9b      	subs	r3, r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e0e:	681b      	ldr	r3, [r3, #0]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	f003 020f 	and.w	r2, r3, #15
 8006e32:	4613      	mov	r3, r2
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	3338      	adds	r3, #56	; 0x38
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	3304      	adds	r3, #4
 8006e42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d102      	bne.n	8006e76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6979      	ldr	r1, [r7, #20]
 8006e8e:	f002 f959 	bl	8009144 <USB_EP0StartXfer>
 8006e92:	e008      	b.n	8006ea6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6979      	ldr	r1, [r7, #20]
 8006ea2:	f001 ff0b 	bl	8008cbc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ebc:	78fb      	ldrb	r3, [r7, #3]
 8006ebe:	f003 020f 	and.w	r2, r3, #15
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d901      	bls.n	8006ece <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e050      	b.n	8006f70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da0f      	bge.n	8006ef6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	4613      	mov	r3, r2
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	1a9b      	subs	r3, r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	3338      	adds	r3, #56	; 0x38
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3304      	adds	r3, #4
 8006eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	705a      	strb	r2, [r3, #1]
 8006ef4:	e00d      	b.n	8006f12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	1a9b      	subs	r3, r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	3304      	adds	r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_PCD_EP_SetStall+0x82>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e01e      	b.n	8006f70 <HAL_PCD_EP_SetStall+0xc0>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 fab0 	bl	80094a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	b2d9      	uxtb	r1, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f60:	461a      	mov	r2, r3
 8006f62:	f002 fca1 	bl	80098a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	f003 020f 	and.w	r2, r3, #15
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d901      	bls.n	8006f96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e042      	b.n	800701c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da0f      	bge.n	8006fbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	f003 020f 	and.w	r2, r3, #15
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	1a9b      	subs	r3, r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	3338      	adds	r3, #56	; 0x38
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	705a      	strb	r2, [r3, #1]
 8006fbc:	e00f      	b.n	8006fde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fbe:	78fb      	ldrb	r3, [r7, #3]
 8006fc0:	f003 020f 	and.w	r2, r3, #15
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_PCD_EP_ClrStall+0x86>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e00e      	b.n	800701c <HAL_PCD_EP_ClrStall+0xa4>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68f9      	ldr	r1, [r7, #12]
 800700c:	4618      	mov	r0, r3
 800700e:	f002 fab8 	bl	8009582 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	; 0x28
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	3338      	adds	r3, #56	; 0x38
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d901      	bls.n	800705c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e06c      	b.n	8007136 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	429a      	cmp	r2, r3
 8007070:	d902      	bls.n	8007078 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	3303      	adds	r3, #3
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007080:	e02b      	b.n	80070da <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	695a      	ldr	r2, [r3, #20]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	429a      	cmp	r2, r3
 8007096:	d902      	bls.n	800709e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3303      	adds	r3, #3
 80070a2:	089b      	lsrs	r3, r3, #2
 80070a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f002 f994 	bl	80093ea <USB_WritePacket>

    ep->xfer_buff  += len;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	441a      	add	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	441a      	add	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d809      	bhi.n	8007104 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d203      	bcs.n	8007104 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1be      	bne.n	8007082 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	429a      	cmp	r2, r3
 800710e:	d811      	bhi.n	8007134 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	2201      	movs	r2, #1
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	43db      	mvns	r3, r3
 800712a:	6939      	ldr	r1, [r7, #16]
 800712c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007130:	4013      	ands	r3, r2
 8007132:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	333c      	adds	r3, #60	; 0x3c
 8007158:	3304      	adds	r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b01      	cmp	r3, #1
 8007174:	f040 80a0 	bne.w	80072b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d015      	beq.n	80071ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4a72      	ldr	r2, [pc, #456]	; (8007350 <PCD_EP_OutXfrComplete_int+0x210>)
 8007186:	4293      	cmp	r3, r2
 8007188:	f240 80dd 	bls.w	8007346 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80d7 	beq.w	8007346 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	461a      	mov	r2, r3
 80071a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071aa:	6093      	str	r3, [r2, #8]
 80071ac:	e0cb      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c4:	461a      	mov	r2, r3
 80071c6:	2320      	movs	r3, #32
 80071c8:	6093      	str	r3, [r2, #8]
 80071ca:	e0bc      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 80b7 	bne.w	8007346 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4a5d      	ldr	r2, [pc, #372]	; (8007350 <PCD_EP_OutXfrComplete_int+0x210>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d90f      	bls.n	8007200 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f6:	461a      	mov	r2, r3
 80071f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fc:	6093      	str	r3, [r2, #8]
 80071fe:	e0a2      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	1a9b      	subs	r3, r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007212:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	0159      	lsls	r1, r3, #5
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	440b      	add	r3, r1
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007226:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4403      	add	r3, r0
 8007236:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800723a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4403      	add	r3, r0
 800725e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4419      	add	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	4613      	mov	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4403      	add	r3, r0
 8007274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007278:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d114      	bne.n	80072aa <PCD_EP_OutXfrComplete_int+0x16a>
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d108      	bne.n	80072aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072a2:	461a      	mov	r2, r3
 80072a4:	2101      	movs	r1, #1
 80072a6:	f002 faff 	bl	80098a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f004 fa01 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
 80072b6:	e046      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a26      	ldr	r2, [pc, #152]	; (8007354 <PCD_EP_OutXfrComplete_int+0x214>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d124      	bne.n	800730a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	461a      	mov	r2, r3
 80072d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072dc:	6093      	str	r3, [r2, #8]
 80072de:	e032      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f6:	461a      	mov	r2, r3
 80072f8:	2320      	movs	r3, #32
 80072fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4619      	mov	r1, r3
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f004 f9d8 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
 8007308:	e01d      	b.n	8007346 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d114      	bne.n	800733a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007310:	6879      	ldr	r1, [r7, #4]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007332:	461a      	mov	r2, r3
 8007334:	2100      	movs	r1, #0
 8007336:	f002 fab7 	bl	80098a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f004 f9b9 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	4f54300a 	.word	0x4f54300a
 8007354:	4f54310a 	.word	0x4f54310a

08007358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	333c      	adds	r3, #60	; 0x3c
 8007370:	3304      	adds	r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d90e      	bls.n	80073ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007394:	2b00      	cmp	r3, #0
 8007396:	d009      	beq.n	80073ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	461a      	mov	r2, r3
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f004 f971 	bl	800b694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a0a      	ldr	r2, [pc, #40]	; (80073e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d90c      	bls.n	80073d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d108      	bne.n	80073d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073cc:	461a      	mov	r2, r3
 80073ce:	2101      	movs	r1, #1
 80073d0:	f002 fa6a 	bl	80098a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	4f54300a 	.word	0x4f54300a

080073e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	460b      	mov	r3, r1
 80073ee:	70fb      	strb	r3, [r7, #3]
 80073f0:	4613      	mov	r3, r2
 80073f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d107      	bne.n	8007412 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007402:	883b      	ldrh	r3, [r7, #0]
 8007404:	0419      	lsls	r1, r3, #16
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	430a      	orrs	r2, r1
 800740e:	629a      	str	r2, [r3, #40]	; 0x28
 8007410:	e028      	b.n	8007464 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4413      	add	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007420:	2300      	movs	r3, #0
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e00d      	b.n	8007442 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	3340      	adds	r3, #64	; 0x40
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	4413      	add	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	3301      	adds	r3, #1
 8007440:	73fb      	strb	r3, [r7, #15]
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	3b01      	subs	r3, #1
 8007448:	429a      	cmp	r2, r3
 800744a:	d3ec      	bcc.n	8007426 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800744c:	883b      	ldrh	r3, [r7, #0]
 800744e:	0418      	lsls	r0, r3, #16
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	3b01      	subs	r3, #1
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	4302      	orrs	r2, r0
 800745c:	3340      	adds	r3, #64	; 0x40
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	887a      	ldrh	r2, [r7, #2]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d101      	bne.n	80074be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e25b      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d075      	beq.n	80075b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074ca:	4ba3      	ldr	r3, [pc, #652]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 030c 	and.w	r3, r3, #12
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	d00c      	beq.n	80074f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074d6:	4ba0      	ldr	r3, [pc, #640]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074de:	2b08      	cmp	r3, #8
 80074e0:	d112      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074e2:	4b9d      	ldr	r3, [pc, #628]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ee:	d10b      	bne.n	8007508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074f0:	4b99      	ldr	r3, [pc, #612]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d05b      	beq.n	80075b4 <HAL_RCC_OscConfig+0x108>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d157      	bne.n	80075b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e236      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d106      	bne.n	8007520 <HAL_RCC_OscConfig+0x74>
 8007512:	4b91      	ldr	r3, [pc, #580]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a90      	ldr	r2, [pc, #576]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	e01d      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007528:	d10c      	bne.n	8007544 <HAL_RCC_OscConfig+0x98>
 800752a:	4b8b      	ldr	r3, [pc, #556]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a8a      	ldr	r2, [pc, #552]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b88      	ldr	r3, [pc, #544]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a87      	ldr	r2, [pc, #540]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800753c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e00b      	b.n	800755c <HAL_RCC_OscConfig+0xb0>
 8007544:	4b84      	ldr	r3, [pc, #528]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a83      	ldr	r2, [pc, #524]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800754a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	4b81      	ldr	r3, [pc, #516]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a80      	ldr	r2, [pc, #512]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800755a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fa fef8 	bl	8002358 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800756c:	f7fa fef4 	bl	8002358 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	; 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e1fb      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757e:	4b76      	ldr	r3, [pc, #472]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0f0      	beq.n	800756c <HAL_RCC_OscConfig+0xc0>
 800758a:	e014      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758c:	f7fa fee4 	bl	8002358 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007592:	e008      	b.n	80075a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007594:	f7fa fee0 	bl	8002358 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	2b64      	cmp	r3, #100	; 0x64
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e1e7      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075a6:	4b6c      	ldr	r3, [pc, #432]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f0      	bne.n	8007594 <HAL_RCC_OscConfig+0xe8>
 80075b2:	e000      	b.n	80075b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d063      	beq.n	800768a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075c2:	4b65      	ldr	r3, [pc, #404]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 030c 	and.w	r3, r3, #12
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075ce:	4b62      	ldr	r3, [pc, #392]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d11c      	bne.n	8007614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075da:	4b5f      	ldr	r3, [pc, #380]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e6:	4b5c      	ldr	r3, [pc, #368]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_RCC_OscConfig+0x152>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d001      	beq.n	80075fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e1bb      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4952      	ldr	r1, [pc, #328]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007612:	e03a      	b.n	800768a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d020      	beq.n	800765e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800761c:	4b4f      	ldr	r3, [pc, #316]	; (800775c <HAL_RCC_OscConfig+0x2b0>)
 800761e:	2201      	movs	r2, #1
 8007620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007622:	f7fa fe99 	bl	8002358 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800762a:	f7fa fe95 	bl	8002358 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e19c      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800763c:	4b46      	ldr	r3, [pc, #280]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007648:	4b43      	ldr	r3, [pc, #268]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4940      	ldr	r1, [pc, #256]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007658:	4313      	orrs	r3, r2
 800765a:	600b      	str	r3, [r1, #0]
 800765c:	e015      	b.n	800768a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800765e:	4b3f      	ldr	r3, [pc, #252]	; (800775c <HAL_RCC_OscConfig+0x2b0>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007664:	f7fa fe78 	bl	8002358 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800766c:	f7fa fe74 	bl	8002358 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e17b      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f0      	bne.n	800766c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d030      	beq.n	80076f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d016      	beq.n	80076cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800769e:	4b30      	ldr	r3, [pc, #192]	; (8007760 <HAL_RCC_OscConfig+0x2b4>)
 80076a0:	2201      	movs	r2, #1
 80076a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a4:	f7fa fe58 	bl	8002358 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076ac:	f7fa fe54 	bl	8002358 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e15b      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076be:	4b26      	ldr	r3, [pc, #152]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0f0      	beq.n	80076ac <HAL_RCC_OscConfig+0x200>
 80076ca:	e015      	b.n	80076f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076cc:	4b24      	ldr	r3, [pc, #144]	; (8007760 <HAL_RCC_OscConfig+0x2b4>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076d2:	f7fa fe41 	bl	8002358 <HAL_GetTick>
 80076d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076d8:	e008      	b.n	80076ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076da:	f7fa fe3d 	bl	8002358 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e144      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ec:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 80076ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80a0 	beq.w	8007846 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007706:	2300      	movs	r3, #0
 8007708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770a:	4b13      	ldr	r3, [pc, #76]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	60bb      	str	r3, [r7, #8]
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	4a0e      	ldr	r2, [pc, #56]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007724:	6413      	str	r3, [r2, #64]	; 0x40
 8007726:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCC_OscConfig+0x2ac>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d121      	bne.n	8007786 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007742:	4b08      	ldr	r3, [pc, #32]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a07      	ldr	r2, [pc, #28]	; (8007764 <HAL_RCC_OscConfig+0x2b8>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fa fe03 	bl	8002358 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007754:	e011      	b.n	800777a <HAL_RCC_OscConfig+0x2ce>
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800
 800775c:	42470000 	.word	0x42470000
 8007760:	42470e80 	.word	0x42470e80
 8007764:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007768:	f7fa fdf6 	bl	8002358 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e0fd      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800777a:	4b81      	ldr	r3, [pc, #516]	; (8007980 <HAL_RCC_OscConfig+0x4d4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x2f0>
 800778e:	4b7d      	ldr	r3, [pc, #500]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	4a7c      	ldr	r2, [pc, #496]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
 800779a:	e01c      	b.n	80077d6 <HAL_RCC_OscConfig+0x32a>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d10c      	bne.n	80077be <HAL_RCC_OscConfig+0x312>
 80077a4:	4b77      	ldr	r3, [pc, #476]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a8:	4a76      	ldr	r2, [pc, #472]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077aa:	f043 0304 	orr.w	r3, r3, #4
 80077ae:	6713      	str	r3, [r2, #112]	; 0x70
 80077b0:	4b74      	ldr	r3, [pc, #464]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b4:	4a73      	ldr	r2, [pc, #460]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	6713      	str	r3, [r2, #112]	; 0x70
 80077bc:	e00b      	b.n	80077d6 <HAL_RCC_OscConfig+0x32a>
 80077be:	4b71      	ldr	r3, [pc, #452]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	4a70      	ldr	r2, [pc, #448]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70
 80077ca:	4b6e      	ldr	r3, [pc, #440]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	4a6d      	ldr	r2, [pc, #436]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077d0:	f023 0304 	bic.w	r3, r3, #4
 80077d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077de:	f7fa fdbb 	bl	8002358 <HAL_GetTick>
 80077e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077e4:	e00a      	b.n	80077fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077e6:	f7fa fdb7 	bl	8002358 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e0bc      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80077fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0ee      	beq.n	80077e6 <HAL_RCC_OscConfig+0x33a>
 8007808:	e014      	b.n	8007834 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800780a:	f7fa fda5 	bl	8002358 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007810:	e00a      	b.n	8007828 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007812:	f7fa fda1 	bl	8002358 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0a6      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007828:	4b56      	ldr	r3, [pc, #344]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ee      	bne.n	8007812 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d105      	bne.n	8007846 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800783a:	4b52      	ldr	r3, [pc, #328]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a51      	ldr	r2, [pc, #324]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8092 	beq.w	8007974 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007850:	4b4c      	ldr	r3, [pc, #304]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 030c 	and.w	r3, r3, #12
 8007858:	2b08      	cmp	r3, #8
 800785a:	d05c      	beq.n	8007916 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d141      	bne.n	80078e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007864:	4b48      	ldr	r3, [pc, #288]	; (8007988 <HAL_RCC_OscConfig+0x4dc>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800786a:	f7fa fd75 	bl	8002358 <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007872:	f7fa fd71 	bl	8002358 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e078      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007884:	4b3f      	ldr	r3, [pc, #252]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	019b      	lsls	r3, r3, #6
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	3b01      	subs	r3, #1
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	061b      	lsls	r3, r3, #24
 80078b4:	4933      	ldr	r1, [pc, #204]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ba:	4b33      	ldr	r3, [pc, #204]	; (8007988 <HAL_RCC_OscConfig+0x4dc>)
 80078bc:	2201      	movs	r2, #1
 80078be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fa fd4a 	bl	8002358 <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078c8:	f7fa fd46 	bl	8002358 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e04d      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078da:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x41c>
 80078e6:	e045      	b.n	8007974 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e8:	4b27      	ldr	r3, [pc, #156]	; (8007988 <HAL_RCC_OscConfig+0x4dc>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ee:	f7fa fd33 	bl	8002358 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078f6:	f7fa fd2f 	bl	8002358 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e036      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007908:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f0      	bne.n	80078f6 <HAL_RCC_OscConfig+0x44a>
 8007914:	e02e      	b.n	8007974 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e029      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007922:	4b18      	ldr	r3, [pc, #96]	; (8007984 <HAL_RCC_OscConfig+0x4d8>)
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	429a      	cmp	r2, r3
 8007934:	d11c      	bne.n	8007970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d115      	bne.n	8007970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800794a:	4013      	ands	r3, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007950:	4293      	cmp	r3, r2
 8007952:	d10d      	bne.n	8007970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800795e:	429a      	cmp	r2, r3
 8007960:	d106      	bne.n	8007970 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d001      	beq.n	8007974 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	40007000 	.word	0x40007000
 8007984:	40023800 	.word	0x40023800
 8007988:	42470060 	.word	0x42470060

0800798c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e0cc      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079a0:	4b68      	ldr	r3, [pc, #416]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d90c      	bls.n	80079c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ae:	4b65      	ldr	r3, [pc, #404]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b6:	4b63      	ldr	r3, [pc, #396]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d001      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e0b8      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d020      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079e0:	4b59      	ldr	r3, [pc, #356]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	4a58      	ldr	r2, [pc, #352]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 80079e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80079ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079f8:	4b53      	ldr	r3, [pc, #332]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	4a52      	ldr	r2, [pc, #328]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a04:	4b50      	ldr	r3, [pc, #320]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	494d      	ldr	r1, [pc, #308]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d044      	beq.n	8007aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d107      	bne.n	8007a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a2a:	4b47      	ldr	r3, [pc, #284]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d119      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e07f      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d003      	beq.n	8007a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d107      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4a:	4b3f      	ldr	r3, [pc, #252]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e06f      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5a:	4b3b      	ldr	r3, [pc, #236]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e067      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a6a:	4b37      	ldr	r3, [pc, #220]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f023 0203 	bic.w	r2, r3, #3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	4934      	ldr	r1, [pc, #208]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a7c:	f7fa fc6c 	bl	8002358 <HAL_GetTick>
 8007a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a82:	e00a      	b.n	8007a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a84:	f7fa fc68 	bl	8002358 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e04f      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a9a:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 020c 	and.w	r2, r3, #12
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d1eb      	bne.n	8007a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007aac:	4b25      	ldr	r3, [pc, #148]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d20c      	bcs.n	8007ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aba:	4b22      	ldr	r3, [pc, #136]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac2:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <HAL_RCC_ClockConfig+0x1b8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e032      	b.n	8007b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d008      	beq.n	8007af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ae0:	4b19      	ldr	r3, [pc, #100]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4916      	ldr	r1, [pc, #88]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d009      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	490e      	ldr	r1, [pc, #56]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b12:	f000 f821 	bl	8007b58 <HAL_RCC_GetSysClockFreq>
 8007b16:	4601      	mov	r1, r0
 8007b18:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	091b      	lsrs	r3, r3, #4
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <HAL_RCC_ClockConfig+0x1c0>)
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
 8007b26:	fa21 f303 	lsr.w	r3, r1, r3
 8007b2a:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fa fbcc 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40023c00 	.word	0x40023c00
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	0800cc44 	.word	0x0800cc44
 8007b50:	20000090 	.word	0x20000090
 8007b54:	20000094 	.word	0x20000094

08007b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b6e:	4b50      	ldr	r3, [pc, #320]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d007      	beq.n	8007b8a <HAL_RCC_GetSysClockFreq+0x32>
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d008      	beq.n	8007b90 <HAL_RCC_GetSysClockFreq+0x38>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f040 808d 	bne.w	8007c9e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b84:	4b4b      	ldr	r3, [pc, #300]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007b86:	60bb      	str	r3, [r7, #8]
       break;
 8007b88:	e08c      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b8a:	4b4b      	ldr	r3, [pc, #300]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007b8c:	60bb      	str	r3, [r7, #8]
      break;
 8007b8e:	e089      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b90:	4b47      	ldr	r3, [pc, #284]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b9a:	4b45      	ldr	r3, [pc, #276]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d023      	beq.n	8007bee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ba6:	4b42      	ldr	r3, [pc, #264]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	099b      	lsrs	r3, r3, #6
 8007bac:	f04f 0400 	mov.w	r4, #0
 8007bb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	ea03 0501 	and.w	r5, r3, r1
 8007bbc:	ea04 0602 	and.w	r6, r4, r2
 8007bc0:	4a3d      	ldr	r2, [pc, #244]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bc2:	fb02 f106 	mul.w	r1, r2, r6
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	fb02 f205 	mul.w	r2, r2, r5
 8007bcc:	440a      	add	r2, r1
 8007bce:	493a      	ldr	r1, [pc, #232]	; (8007cb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bd0:	fba5 0101 	umull	r0, r1, r5, r1
 8007bd4:	1853      	adds	r3, r2, r1
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	461a      	mov	r2, r3
 8007be0:	4623      	mov	r3, r4
 8007be2:	f7f8 ffd9 	bl	8000b98 <__aeabi_uldivmod>
 8007be6:	4603      	mov	r3, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e049      	b.n	8007c82 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bee:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	099b      	lsrs	r3, r3, #6
 8007bf4:	f04f 0400 	mov.w	r4, #0
 8007bf8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	ea03 0501 	and.w	r5, r3, r1
 8007c04:	ea04 0602 	and.w	r6, r4, r2
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	0154      	lsls	r4, r2, #5
 8007c16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c1a:	014b      	lsls	r3, r1, #5
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4622      	mov	r2, r4
 8007c20:	1b49      	subs	r1, r1, r5
 8007c22:	eb62 0206 	sbc.w	r2, r2, r6
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	f04f 0400 	mov.w	r4, #0
 8007c2e:	0194      	lsls	r4, r2, #6
 8007c30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007c34:	018b      	lsls	r3, r1, #6
 8007c36:	1a5b      	subs	r3, r3, r1
 8007c38:	eb64 0402 	sbc.w	r4, r4, r2
 8007c3c:	f04f 0100 	mov.w	r1, #0
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	00e2      	lsls	r2, r4, #3
 8007c46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007c4a:	00d9      	lsls	r1, r3, #3
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4614      	mov	r4, r2
 8007c50:	195b      	adds	r3, r3, r5
 8007c52:	eb44 0406 	adc.w	r4, r4, r6
 8007c56:	f04f 0100 	mov.w	r1, #0
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	02a2      	lsls	r2, r4, #10
 8007c60:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007c64:	0299      	lsls	r1, r3, #10
 8007c66:	460b      	mov	r3, r1
 8007c68:	4614      	mov	r4, r2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f04f 0400 	mov.w	r4, #0
 8007c74:	461a      	mov	r2, r3
 8007c76:	4623      	mov	r3, r4
 8007c78:	f7f8 ff8e 	bl	8000b98 <__aeabi_uldivmod>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c82:	4b0b      	ldr	r3, [pc, #44]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	0c1b      	lsrs	r3, r3, #16
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9a:	60bb      	str	r3, [r7, #8]
      break;
 8007c9c:	e002      	b.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007ca0:	60bb      	str	r3, [r7, #8]
      break;
 8007ca2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40023800 	.word	0x40023800
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	017d7840 	.word	0x017d7840

08007cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20000090 	.word	0x20000090

08007cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007cd8:	f7ff fff0 	bl	8007cbc <HAL_RCC_GetHCLKFreq>
 8007cdc:	4601      	mov	r1, r0
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	0a9b      	lsrs	r3, r3, #10
 8007ce4:	f003 0307 	and.w	r3, r3, #7
 8007ce8:	4a03      	ldr	r2, [pc, #12]	; (8007cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cea:	5cd3      	ldrb	r3, [r2, r3]
 8007cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	0800cc54 	.word	0x0800cc54

08007cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e083      	b.n	8007e18 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7fa fa1f 	bl	8002168 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6812      	ldr	r2, [r2, #0]
 8007d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d40:	f023 0307 	bic.w	r3, r3, #7
 8007d44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f000 f9ed 	bl	8008130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007d9c:	f023 030c 	bic.w	r3, r3, #12
 8007da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	4313      	orrs	r3, r2
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	011a      	lsls	r2, r3, #4
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	031b      	lsls	r3, r3, #12
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007dda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	4313      	orrs	r3, r2
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_TIM_Encoder_Start_IT+0x16>
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d010      	beq.n	8007e56 <HAL_TIM_Encoder_Start_IT+0x36>
 8007e34:	e01f      	b.n	8007e76 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f9f6 	bl	8008230 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0202 	orr.w	r2, r2, #2
 8007e52:	60da      	str	r2, [r3, #12]
      break;
 8007e54:	e02e      	b.n	8007eb4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	2104      	movs	r1, #4
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f9e6 	bl	8008230 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0204 	orr.w	r2, r2, #4
 8007e72:	60da      	str	r2, [r3, #12]
      break;
 8007e74:	e01e      	b.n	8007eb4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f9d6 	bl	8008230 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 f9cf 	bl	8008230 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f042 0202 	orr.w	r2, r2, #2
 8007ea0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0204 	orr.w	r2, r2, #4
 8007eb0:	60da      	str	r2, [r3, #12]
      break;
 8007eb2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d122      	bne.n	8007f2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d11b      	bne.n	8007f2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f06f 0202 	mvn.w	r2, #2
 8007efa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7f9 fbdf 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8007f16:	e005      	b.n	8007f24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f8ea 	bl	80080f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f8f1 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	f003 0304 	and.w	r3, r3, #4
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d122      	bne.n	8007f7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d11b      	bne.n	8007f7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f06f 0204 	mvn.w	r2, #4
 8007f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7f9 fbb5 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8007f6a:	e005      	b.n	8007f78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f8c0 	bl	80080f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f8c7 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0308 	and.w	r3, r3, #8
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d122      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d11b      	bne.n	8007fd2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0208 	mvn.w	r2, #8
 8007fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69db      	ldr	r3, [r3, #28]
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7f9 fb8b 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8007fbe:	e005      	b.n	8007fcc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f896 	bl	80080f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f89d 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d122      	bne.n	8008026 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b10      	cmp	r3, #16
 8007fec:	d11b      	bne.n	8008026 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f06f 0210 	mvn.w	r2, #16
 8007ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7f9 fb61 	bl	80016d4 <HAL_TIM_IC_CaptureCallback>
 8008012:	e005      	b.n	8008020 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f86c 	bl	80080f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f873 	bl	8008106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10e      	bne.n	8008052 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b01      	cmp	r3, #1
 8008040:	d107      	bne.n	8008052 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f06f 0201 	mvn.w	r2, #1
 800804a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f846 	bl	80080de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805c:	2b80      	cmp	r3, #128	; 0x80
 800805e:	d10e      	bne.n	800807e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806a:	2b80      	cmp	r3, #128	; 0x80
 800806c:	d107      	bne.n	800807e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f977 	bl	800836c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d10e      	bne.n	80080aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b40      	cmp	r3, #64	; 0x40
 8008098:	d107      	bne.n	80080aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f838 	bl	800811a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d10e      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d107      	bne.n	80080d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f06f 0220 	mvn.w	r2, #32
 80080ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f941 	bl	8008358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080d6:	bf00      	nop
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a34      	ldr	r2, [pc, #208]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814e:	d00b      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a31      	ldr	r2, [pc, #196]	; (8008218 <TIM_Base_SetConfig+0xe8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a30      	ldr	r2, [pc, #192]	; (800821c <TIM_Base_SetConfig+0xec>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_Base_SetConfig+0x38>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a2f      	ldr	r2, [pc, #188]	; (8008220 <TIM_Base_SetConfig+0xf0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a25      	ldr	r2, [pc, #148]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01b      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008188:	d017      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a22      	ldr	r2, [pc, #136]	; (8008218 <TIM_Base_SetConfig+0xe8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <TIM_Base_SetConfig+0xec>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00f      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a20      	ldr	r2, [pc, #128]	; (8008220 <TIM_Base_SetConfig+0xf0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00b      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a1f      	ldr	r2, [pc, #124]	; (8008224 <TIM_Base_SetConfig+0xf4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d007      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <TIM_Base_SetConfig+0xf8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <TIM_Base_SetConfig+0x8a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1d      	ldr	r2, [pc, #116]	; (800822c <TIM_Base_SetConfig+0xfc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d108      	bne.n	80081cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <TIM_Base_SetConfig+0xe4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d103      	bne.n	8008200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	615a      	str	r2, [r3, #20]
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000
 8008218:	40000400 	.word	0x40000400
 800821c:	40000800 	.word	0x40000800
 8008220:	40000c00 	.word	0x40000c00
 8008224:	40014000 	.word	0x40014000
 8008228:	40014400 	.word	0x40014400
 800822c:	40014800 	.word	0x40014800

08008230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	2201      	movs	r2, #1
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a1a      	ldr	r2, [r3, #32]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	43db      	mvns	r3, r3
 8008252:	401a      	ands	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a1a      	ldr	r2, [r3, #32]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 031f 	and.w	r3, r3, #31
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	431a      	orrs	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	621a      	str	r2, [r3, #32]
}
 800826e:	bf00      	nop
 8008270:	371c      	adds	r7, #28
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008290:	2302      	movs	r3, #2
 8008292:	e050      	b.n	8008336 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d018      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e0:	d013      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a18      	ldr	r2, [pc, #96]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d00e      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a16      	ldr	r2, [pc, #88]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d009      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a15      	ldr	r2, [pc, #84]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d004      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a13      	ldr	r2, [pc, #76]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d10c      	bne.n	8008324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4313      	orrs	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40014000 	.word	0x40014000

08008358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008380:	b084      	sub	sp, #16
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	f107 001c 	add.w	r0, r7, #28
 800838e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2b01      	cmp	r3, #1
 8008396:	d122      	bne.n	80083de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d105      	bne.n	80083d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 fac6 	bl	8009964 <USB_CoreReset>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e01a      	b.n	8008414 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 faba 	bl	8009964 <USB_CoreReset>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
 8008406:	e005      	b.n	8008414 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b01      	cmp	r3, #1
 8008418:	d10b      	bne.n	8008432 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f043 0206 	orr.w	r2, r3, #6
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f043 0220 	orr.w	r2, r3, #32
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800843e:	b004      	add	sp, #16
 8008440:	4770      	bx	lr
	...

08008444 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d165      	bne.n	8008524 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4a41      	ldr	r2, [pc, #260]	; (8008560 <USB_SetTurnaroundTime+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d906      	bls.n	800846e <USB_SetTurnaroundTime+0x2a>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4a40      	ldr	r2, [pc, #256]	; (8008564 <USB_SetTurnaroundTime+0x120>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d802      	bhi.n	800846e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008468:	230f      	movs	r3, #15
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e062      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	4a3c      	ldr	r2, [pc, #240]	; (8008564 <USB_SetTurnaroundTime+0x120>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d906      	bls.n	8008484 <USB_SetTurnaroundTime+0x40>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4a3b      	ldr	r2, [pc, #236]	; (8008568 <USB_SetTurnaroundTime+0x124>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d802      	bhi.n	8008484 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800847e:	230e      	movs	r3, #14
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e057      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4a38      	ldr	r2, [pc, #224]	; (8008568 <USB_SetTurnaroundTime+0x124>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d906      	bls.n	800849a <USB_SetTurnaroundTime+0x56>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4a37      	ldr	r2, [pc, #220]	; (800856c <USB_SetTurnaroundTime+0x128>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d802      	bhi.n	800849a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008494:	230d      	movs	r3, #13
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e04c      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4a33      	ldr	r2, [pc, #204]	; (800856c <USB_SetTurnaroundTime+0x128>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d906      	bls.n	80084b0 <USB_SetTurnaroundTime+0x6c>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	4a32      	ldr	r2, [pc, #200]	; (8008570 <USB_SetTurnaroundTime+0x12c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d802      	bhi.n	80084b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084aa:	230c      	movs	r3, #12
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	e041      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4a2f      	ldr	r2, [pc, #188]	; (8008570 <USB_SetTurnaroundTime+0x12c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d906      	bls.n	80084c6 <USB_SetTurnaroundTime+0x82>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4a2e      	ldr	r2, [pc, #184]	; (8008574 <USB_SetTurnaroundTime+0x130>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d802      	bhi.n	80084c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084c0:	230b      	movs	r3, #11
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e036      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a2a      	ldr	r2, [pc, #168]	; (8008574 <USB_SetTurnaroundTime+0x130>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d906      	bls.n	80084dc <USB_SetTurnaroundTime+0x98>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	4a29      	ldr	r2, [pc, #164]	; (8008578 <USB_SetTurnaroundTime+0x134>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d802      	bhi.n	80084dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084d6:	230a      	movs	r3, #10
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e02b      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4a26      	ldr	r2, [pc, #152]	; (8008578 <USB_SetTurnaroundTime+0x134>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d906      	bls.n	80084f2 <USB_SetTurnaroundTime+0xae>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4a25      	ldr	r2, [pc, #148]	; (800857c <USB_SetTurnaroundTime+0x138>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d802      	bhi.n	80084f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80084ec:	2309      	movs	r3, #9
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e020      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4a21      	ldr	r2, [pc, #132]	; (800857c <USB_SetTurnaroundTime+0x138>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d906      	bls.n	8008508 <USB_SetTurnaroundTime+0xc4>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a20      	ldr	r2, [pc, #128]	; (8008580 <USB_SetTurnaroundTime+0x13c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d802      	bhi.n	8008508 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008502:	2308      	movs	r3, #8
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e015      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4a1d      	ldr	r2, [pc, #116]	; (8008580 <USB_SetTurnaroundTime+0x13c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d906      	bls.n	800851e <USB_SetTurnaroundTime+0xda>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	4a1c      	ldr	r2, [pc, #112]	; (8008584 <USB_SetTurnaroundTime+0x140>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d802      	bhi.n	800851e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008518:	2307      	movs	r3, #7
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	e00a      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800851e:	2306      	movs	r3, #6
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e007      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d102      	bne.n	8008530 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800852a:	2309      	movs	r3, #9
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e001      	b.n	8008534 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008530:	2309      	movs	r3, #9
 8008532:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800854c:	431a      	orrs	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	00d8acbf 	.word	0x00d8acbf
 8008564:	00e4e1bf 	.word	0x00e4e1bf
 8008568:	00f423ff 	.word	0x00f423ff
 800856c:	0106737f 	.word	0x0106737f
 8008570:	011a499f 	.word	0x011a499f
 8008574:	01312cff 	.word	0x01312cff
 8008578:	014ca43f 	.word	0x014ca43f
 800857c:	016e35ff 	.word	0x016e35ff
 8008580:	01a6ab1f 	.word	0x01a6ab1f
 8008584:	01e847ff 	.word	0x01e847ff

08008588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f043 0201 	orr.w	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b083      	sub	sp, #12
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f023 0201 	bic.w	r2, r3, #1
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d106      	bne.n	80085f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	60da      	str	r2, [r3, #12]
 80085f6:	e00b      	b.n	8008610 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80085f8:	78fb      	ldrb	r3, [r7, #3]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	e001      	b.n	8008610 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e003      	b.n	8008618 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008610:	2032      	movs	r0, #50	; 0x32
 8008612:	f7f9 fead 	bl	8002370 <HAL_Delay>

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008620:	b084      	sub	sp, #16
 8008622:	b580      	push	{r7, lr}
 8008624:	b086      	sub	sp, #24
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800862e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e009      	b.n	8008654 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3340      	adds	r3, #64	; 0x40
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3301      	adds	r3, #1
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b0e      	cmp	r3, #14
 8008658:	d9f2      	bls.n	8008640 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800865a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d11c      	bne.n	800869a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800866e:	f043 0302 	orr.w	r3, r3, #2
 8008672:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008678:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
 8008698:	e00b      	b.n	80086b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086b8:	461a      	mov	r2, r3
 80086ba:	2300      	movs	r3, #0
 80086bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c4:	4619      	mov	r1, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086cc:	461a      	mov	r2, r3
 80086ce:	680b      	ldr	r3, [r1, #0]
 80086d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d10c      	bne.n	80086f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086de:	2100      	movs	r1, #0
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f949 	bl	8008978 <USB_SetDevSpeed>
 80086e6:	e008      	b.n	80086fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80086e8:	2101      	movs	r1, #1
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f944 	bl	8008978 <USB_SetDevSpeed>
 80086f0:	e003      	b.n	80086fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80086f2:	2103      	movs	r1, #3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f93f 	bl	8008978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086fa:	2110      	movs	r1, #16
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8f3 	bl	80088e8 <USB_FlushTxFifo>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f911 	bl	8008934 <USB_FlushRxFifo>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	461a      	mov	r2, r3
 8008724:	2300      	movs	r3, #0
 8008726:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872e:	461a      	mov	r2, r3
 8008730:	2300      	movs	r3, #0
 8008732:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	461a      	mov	r2, r3
 800873c:	2300      	movs	r3, #0
 800873e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	e043      	b.n	80087ce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800875c:	d118      	bne.n	8008790 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	461a      	mov	r2, r3
 8008772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e013      	b.n	80087a2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	461a      	mov	r2, r3
 8008788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e008      	b.n	80087a2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	461a      	mov	r2, r3
 800879e:	2300      	movs	r3, #0
 80087a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ae:	461a      	mov	r2, r3
 80087b0:	2300      	movs	r3, #0
 80087b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	461a      	mov	r2, r3
 80087c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	3301      	adds	r3, #1
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d3b7      	bcc.n	8008746 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087d6:	2300      	movs	r3, #0
 80087d8:	613b      	str	r3, [r7, #16]
 80087da:	e043      	b.n	8008864 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f2:	d118      	bne.n	8008826 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008806:	461a      	mov	r2, r3
 8008808:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	e013      	b.n	8008838 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881c:	461a      	mov	r2, r3
 800881e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e008      	b.n	8008838 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	461a      	mov	r2, r3
 8008834:	2300      	movs	r3, #0
 8008836:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	461a      	mov	r2, r3
 8008846:	2300      	movs	r3, #0
 8008848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	015a      	lsls	r2, r3, #5
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008856:	461a      	mov	r2, r3
 8008858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800885c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3301      	adds	r3, #1
 8008862:	613b      	str	r3, [r7, #16]
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	429a      	cmp	r2, r3
 800886a:	d3b7      	bcc.n	80087dc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800887a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800887e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800888c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f043 0210 	orr.w	r2, r3, #16
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <USB_DevInit+0x2c4>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f043 0208 	orr.w	r2, r3, #8
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d107      	bne.n	80088d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088cc:	f043 0304 	orr.w	r3, r3, #4
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088e0:	b004      	add	sp, #16
 80088e2:	4770      	bx	lr
 80088e4:	803c3800 	.word	0x803c3800

080088e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	019b      	lsls	r3, r3, #6
 80088fa:	f043 0220 	orr.w	r2, r3, #32
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3301      	adds	r3, #1
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4a09      	ldr	r2, [pc, #36]	; (8008930 <USB_FlushTxFifo+0x48>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d901      	bls.n	8008914 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e006      	b.n	8008922 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b20      	cmp	r3, #32
 800891e:	d0f0      	beq.n	8008902 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	00030d40 	.word	0x00030d40

08008934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2210      	movs	r2, #16
 8008944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <USB_FlushRxFifo+0x40>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d901      	bls.n	8008958 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e006      	b.n	8008966 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f003 0310 	and.w	r3, r3, #16
 8008960:	2b10      	cmp	r3, #16
 8008962:	d0f0      	beq.n	8008946 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	00030d40 	.word	0x00030d40

08008978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	78fb      	ldrb	r3, [r7, #3]
 8008992:	68f9      	ldr	r1, [r7, #12]
 8008994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008998:	4313      	orrs	r3, r2
 800899a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b087      	sub	sp, #28
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 0306 	and.w	r3, r3, #6
 80089c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
 80089ce:	e00a      	b.n	80089e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d002      	beq.n	80089dc <USB_GetDevSpeed+0x32>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b06      	cmp	r3, #6
 80089da:	d102      	bne.n	80089e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80089dc:	2302      	movs	r3, #2
 80089de:	75fb      	strb	r3, [r7, #23]
 80089e0:	e001      	b.n	80089e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80089e2:	230f      	movs	r3, #15
 80089e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80089e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d13a      	bne.n	8008a86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	2101      	movs	r1, #1
 8008a22:	fa01 f303 	lsl.w	r3, r1, r3
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	68f9      	ldr	r1, [r7, #12]
 8008a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d155      	bne.n	8008af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	78db      	ldrb	r3, [r3, #3]
 8008a62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	059b      	lsls	r3, r3, #22
 8008a6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	0151      	lsls	r1, r2, #5
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	440a      	add	r2, r1
 8008a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	e036      	b.n	8008af4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8c:	69da      	ldr	r2, [r3, #28]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	2101      	movs	r1, #1
 8008a98:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d11a      	bne.n	8008af4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	78db      	ldrb	r3, [r3, #3]
 8008ad8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ada:	430b      	orrs	r3, r1
 8008adc:	4313      	orrs	r3, r2
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	0151      	lsls	r1, r2, #5
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	440a      	add	r2, r1
 8008ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d161      	bne.n	8008be4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b36:	d11f      	bne.n	8008b78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	0151      	lsls	r1, r2, #5
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	440a      	add	r2, r1
 8008b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	2101      	movs	r1, #1
 8008b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	43db      	mvns	r3, r3
 8008b92:	68f9      	ldr	r1, [r7, #12]
 8008b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b98:	4013      	ands	r3, r2
 8008b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba2:	69da      	ldr	r2, [r3, #28]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	2101      	movs	r1, #1
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	68f9      	ldr	r1, [r7, #12]
 8008bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	0159      	lsls	r1, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	440b      	add	r3, r1
 8008bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <USB_DeactivateEndpoint+0x1b0>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	600b      	str	r3, [r1, #0]
 8008be2:	e060      	b.n	8008ca6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bfa:	d11f      	bne.n	8008c3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c52:	041b      	lsls	r3, r3, #16
 8008c54:	43db      	mvns	r3, r3
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	2101      	movs	r1, #1
 8008c72:	fa01 f303 	lsl.w	r3, r1, r3
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c80:	4013      	ands	r3, r2
 8008c82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	0159      	lsls	r1, r3, #5
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	440b      	add	r3, r1
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <USB_DeactivateEndpoint+0x1b4>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	ec337800 	.word	0xec337800
 8008cb8:	eff37800 	.word	0xeff37800

08008cbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	; 0x28
 8008cc0:	af02      	add	r7, sp, #8
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	f040 815c 	bne.w	8008f96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d132      	bne.n	8008d4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	0151      	lsls	r1, r2, #5
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	440a      	add	r2, r1
 8008d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	0151      	lsls	r1, r2, #5
 8008d3c:	69fa      	ldr	r2, [r7, #28]
 8008d3e:	440a      	add	r2, r1
 8008d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d44:	0cdb      	lsrs	r3, r3, #19
 8008d46:	04db      	lsls	r3, r3, #19
 8008d48:	6113      	str	r3, [r2, #16]
 8008d4a:	e074      	b.n	8008e36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d66:	0cdb      	lsrs	r3, r3, #19
 8008d68:	04db      	lsls	r3, r3, #19
 8008d6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	6959      	ldr	r1, [r3, #20]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	440b      	add	r3, r1
 8008da8:	1e59      	subs	r1, r3, #1
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8008db2:	04d9      	lsls	r1, r3, #19
 8008db4:	4b9d      	ldr	r3, [pc, #628]	; (800902c <USB_EPStartXfer+0x370>)
 8008db6:	400b      	ands	r3, r1
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	0148      	lsls	r0, r1, #5
 8008dbc:	69f9      	ldr	r1, [r7, #28]
 8008dbe:	4401      	add	r1, r0
 8008dc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	691a      	ldr	r2, [r3, #16]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	0148      	lsls	r0, r1, #5
 8008de2:	69f9      	ldr	r1, [r7, #28]
 8008de4:	4401      	add	r1, r0
 8008de6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008dea:	4313      	orrs	r3, r2
 8008dec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	78db      	ldrb	r3, [r3, #3]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d11f      	bne.n	8008e36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d14b      	bne.n	8008ed4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	78db      	ldrb	r3, [r3, #3]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d128      	bne.n	8008eb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d110      	bne.n	8008e92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	e00f      	b.n	8008eb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ecc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	e12f      	b.n	8009134 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	015a      	lsls	r2, r3, #5
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	0151      	lsls	r1, r2, #5
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	440a      	add	r2, r1
 8008eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ef2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	78db      	ldrb	r3, [r3, #3]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d015      	beq.n	8008f28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8117 	beq.w	8009134 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	2101      	movs	r1, #1
 8008f18:	fa01 f303 	lsl.w	r3, r1, r3
 8008f1c:	69f9      	ldr	r1, [r7, #28]
 8008f1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f22:	4313      	orrs	r3, r2
 8008f24:	634b      	str	r3, [r1, #52]	; 0x34
 8008f26:	e105      	b.n	8009134 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d110      	bne.n	8008f5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	e00f      	b.n	8008f7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	68d9      	ldr	r1, [r3, #12]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	781a      	ldrb	r2, [r3, #0]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	b298      	uxth	r0, r3
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 fa2b 	bl	80093ea <USB_WritePacket>
 8008f94:	e0ce      	b.n	8009134 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	0151      	lsls	r1, r2, #5
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	440a      	add	r2, r1
 8008fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb0:	0cdb      	lsrs	r3, r3, #19
 8008fb2:	04db      	lsls	r3, r3, #19
 8008fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d126      	bne.n	8009030 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff8:	69b9      	ldr	r1, [r7, #24]
 8008ffa:	0148      	lsls	r0, r1, #5
 8008ffc:	69f9      	ldr	r1, [r7, #28]
 8008ffe:	4401      	add	r1, r0
 8009000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009004:	4313      	orrs	r3, r2
 8009006:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009026:	6113      	str	r3, [r2, #16]
 8009028:	e036      	b.n	8009098 <USB_EPStartXfer+0x3dc>
 800902a:	bf00      	nop
 800902c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	4413      	add	r3, r2
 800903a:	1e5a      	subs	r2, r3, #1
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	fbb2 f3f3 	udiv	r3, r2, r3
 8009044:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009052:	691a      	ldr	r2, [r3, #16]
 8009054:	8afb      	ldrh	r3, [r7, #22]
 8009056:	04d9      	lsls	r1, r3, #19
 8009058:	4b39      	ldr	r3, [pc, #228]	; (8009140 <USB_EPStartXfer+0x484>)
 800905a:	400b      	ands	r3, r1
 800905c:	69b9      	ldr	r1, [r7, #24]
 800905e:	0148      	lsls	r0, r1, #5
 8009060:	69f9      	ldr	r1, [r7, #28]
 8009062:	4401      	add	r1, r0
 8009064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009068:	4313      	orrs	r3, r2
 800906a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	691a      	ldr	r2, [r3, #16]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	8af9      	ldrh	r1, [r7, #22]
 8009080:	fb01 f303 	mul.w	r3, r1, r3
 8009084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	0148      	lsls	r0, r1, #5
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	4401      	add	r1, r0
 8009090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009094:	4313      	orrs	r3, r2
 8009096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d10d      	bne.n	80090ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	68d9      	ldr	r1, [r3, #12]
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b6:	460a      	mov	r2, r1
 80090b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	78db      	ldrb	r3, [r3, #3]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d128      	bne.n	8009114 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d110      	bne.n	80090f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e00f      	b.n	8009114 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	0151      	lsls	r1, r2, #5
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	440a      	add	r2, r1
 800910a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009112:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	1ff80000 	.word	0x1ff80000

08009144 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009144:	b480      	push	{r7}
 8009146:	b087      	sub	sp, #28
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b01      	cmp	r3, #1
 8009162:	f040 80cd 	bne.w	8009300 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d132      	bne.n	80091d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	0151      	lsls	r1, r2, #5
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	440a      	add	r2, r1
 8009184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800918c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	0151      	lsls	r1, r2, #5
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	440a      	add	r2, r1
 80091a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	0cdb      	lsrs	r3, r3, #19
 80091ce:	04db      	lsls	r3, r3, #19
 80091d0:	6113      	str	r3, [r2, #16]
 80091d2:	e04e      	b.n	8009272 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ee:	0cdb      	lsrs	r3, r3, #19
 80091f0:	04db      	lsls	r3, r3, #19
 80091f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009216:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	429a      	cmp	r2, r3
 8009222:	d903      	bls.n	800922c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	697a      	ldr	r2, [r7, #20]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800924a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009262:	6939      	ldr	r1, [r7, #16]
 8009264:	0148      	lsls	r0, r1, #5
 8009266:	6979      	ldr	r1, [r7, #20]
 8009268:	4401      	add	r1, r0
 800926a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800926e:	4313      	orrs	r3, r2
 8009270:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d11e      	bne.n	80092b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	461a      	mov	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	e092      	b.n	80093dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d07e      	beq.n	80093dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	2101      	movs	r1, #1
 80092f0:	fa01 f303 	lsl.w	r3, r1, r3
 80092f4:	6979      	ldr	r1, [r7, #20]
 80092f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092fa:	4313      	orrs	r3, r2
 80092fc:	634b      	str	r3, [r1, #52]	; 0x34
 80092fe:	e06d      	b.n	80093dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	440a      	add	r2, r1
 8009316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800931a:	0cdb      	lsrs	r3, r3, #19
 800931c:	04db      	lsls	r3, r3, #19
 800931e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	0151      	lsls	r1, r2, #5
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	440a      	add	r2, r1
 8009336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800933e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009342:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009372:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009380:	691a      	ldr	r2, [r3, #16]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800938a:	6939      	ldr	r1, [r7, #16]
 800938c:	0148      	lsls	r0, r1, #5
 800938e:	6979      	ldr	r1, [r7, #20]
 8009390:	4401      	add	r1, r0
 8009392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009396:	4313      	orrs	r3, r2
 8009398:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d10d      	bne.n	80093bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d009      	beq.n	80093bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	68d9      	ldr	r1, [r3, #12]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	460a      	mov	r2, r1
 80093ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b089      	sub	sp, #36	; 0x24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	4611      	mov	r1, r2
 80093f6:	461a      	mov	r2, r3
 80093f8:	460b      	mov	r3, r1
 80093fa:	71fb      	strb	r3, [r7, #7]
 80093fc:	4613      	mov	r3, r2
 80093fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800940c:	2b00      	cmp	r3, #0
 800940e:	d11a      	bne.n	8009446 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009410:	88bb      	ldrh	r3, [r7, #4]
 8009412:	3303      	adds	r3, #3
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009418:	2300      	movs	r3, #0
 800941a:	61bb      	str	r3, [r7, #24]
 800941c:	e00f      	b.n	800943e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	031a      	lsls	r2, r3, #12
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	4413      	add	r3, r2
 8009426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942a:	461a      	mov	r2, r3
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	3304      	adds	r3, #4
 8009436:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	3301      	adds	r3, #1
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	69ba      	ldr	r2, [r7, #24]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	429a      	cmp	r2, r3
 8009444:	d3eb      	bcc.n	800941e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3724      	adds	r7, #36	; 0x24
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009454:	b480      	push	{r7}
 8009456:	b089      	sub	sp, #36	; 0x24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800946a:	88fb      	ldrh	r3, [r7, #6]
 800946c:	3303      	adds	r3, #3
 800946e:	089b      	lsrs	r3, r3, #2
 8009470:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009472:	2300      	movs	r3, #0
 8009474:	61bb      	str	r3, [r7, #24]
 8009476:	e00b      	b.n	8009490 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	601a      	str	r2, [r3, #0]
    pDest++;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	3304      	adds	r3, #4
 8009488:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	3301      	adds	r3, #1
 800948e:	61bb      	str	r3, [r7, #24]
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	429a      	cmp	r2, r3
 8009496:	d3ef      	bcc.n	8009478 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009498:	69fb      	ldr	r3, [r7, #28]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3724      	adds	r7, #36	; 0x24
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b085      	sub	sp, #20
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d12c      	bne.n	800951c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	db12      	blt.n	80094fa <USB_EPSetStall+0x54>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00f      	beq.n	80094fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	0151      	lsls	r1, r2, #5
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	440a      	add	r2, r1
 80094f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	015a      	lsls	r2, r3, #5
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4413      	add	r3, r2
 8009502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	e02b      	b.n	8009574 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	db12      	blt.n	8009554 <USB_EPSetStall+0xae>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00f      	beq.n	8009554 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009552:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800956e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009572:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009582:	b480      	push	{r7}
 8009584:	b085      	sub	sp, #20
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d128      	bne.n	80095f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	78db      	ldrb	r3, [r3, #3]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d003      	beq.n	80095ce <USB_EPClearStall+0x4c>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	78db      	ldrb	r3, [r3, #3]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d138      	bne.n	8009640 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	e027      	b.n	8009640 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800960a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800960e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	78db      	ldrb	r3, [r3, #3]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d003      	beq.n	8009620 <USB_EPClearStall+0x9e>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	78db      	ldrb	r3, [r3, #3]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d10f      	bne.n	8009640 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	440a      	add	r2, r1
 8009636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800963a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800963e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800964e:	b480      	push	{r7}
 8009650:	b085      	sub	sp, #20
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	460b      	mov	r3, r1
 8009658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800966c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009670:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009682:	68f9      	ldr	r1, [r7, #12]
 8009684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009688:	4313      	orrs	r3, r2
 800968a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096b4:	f023 0303 	bic.w	r3, r3, #3
 80096b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096c8:	f023 0302 	bic.w	r3, r3, #2
 80096cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096f6:	f023 0303 	bic.w	r3, r3, #3
 80096fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800970a:	f043 0302 	orr.w	r3, r3, #2
 800970e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4013      	ands	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009736:	68fb      	ldr	r3, [r7, #12]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4013      	ands	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	0c1b      	lsrs	r3, r3, #16
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4013      	ands	r3, r2
 800979a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	b29b      	uxth	r3, r3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097bc:	78fb      	ldrb	r3, [r7, #3]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	4013      	ands	r3, r2
 80097d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097da:	68bb      	ldr	r3, [r7, #8]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	01db      	lsls	r3, r3, #7
 800981a:	b2db      	uxtb	r3, r3
 800981c:	693a      	ldr	r2, [r7, #16]
 800981e:	4313      	orrs	r3, r2
 8009820:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4013      	ands	r3, r2
 8009834:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009836:	68bb      	ldr	r3, [r7, #8]
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	f003 0301 	and.w	r3, r3, #1
}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800987a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800987e:	f023 0307 	bic.w	r3, r3, #7
 8009882:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009896:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	460b      	mov	r3, r1
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	333c      	adds	r3, #60	; 0x3c
 80098be:	3304      	adds	r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	4a26      	ldr	r2, [pc, #152]	; (8009960 <USB_EP0_OutStart+0xb8>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d90a      	bls.n	80098e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098dc:	d101      	bne.n	80098e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	e037      	b.n	8009952 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e8:	461a      	mov	r2, r3
 80098ea:	2300      	movs	r3, #0
 80098ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009910:	f043 0318 	orr.w	r3, r3, #24
 8009914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009924:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009928:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800992a:	7afb      	ldrb	r3, [r7, #11]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d10f      	bne.n	8009950 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800994e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	4f54300a 	.word	0x4f54300a

08009964 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <USB_CoreReset+0x64>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d901      	bls.n	8009982 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e01b      	b.n	80099ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	daf2      	bge.n	8009970 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f043 0201 	orr.w	r2, r3, #1
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a09      	ldr	r2, [pc, #36]	; (80099c8 <USB_CoreReset+0x64>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d901      	bls.n	80099ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e006      	b.n	80099ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d0f0      	beq.n	800999a <USB_CoreReset+0x36>

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	00030d40 	.word	0x00030d40

080099cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80099dc:	f002 f922 	bl	800bc24 <malloc>
 80099e0:	4603      	mov	r3, r0
 80099e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80099f2:	2302      	movs	r3, #2
 80099f4:	e066      	b.n	8009ac4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	7c1b      	ldrb	r3, [r3, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d119      	bne.n	8009a3a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	2181      	movs	r1, #129	; 0x81
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 ff8f 	bl	800b932 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a1e:	2202      	movs	r2, #2
 8009a20:	2101      	movs	r1, #1
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f001 ff85 	bl	800b932 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2210      	movs	r2, #16
 8009a34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009a38:	e016      	b.n	8009a68 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a3a:	2340      	movs	r3, #64	; 0x40
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	2181      	movs	r1, #129	; 0x81
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 ff76 	bl	800b932 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	2202      	movs	r2, #2
 8009a50:	2101      	movs	r1, #1
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 ff6d 	bl	800b932 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2210      	movs	r2, #16
 8009a64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a68:	2308      	movs	r3, #8
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	2182      	movs	r1, #130	; 0x82
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 ff5f 	bl	800b932 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7c1b      	ldrb	r3, [r3, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d109      	bne.n	8009ab2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f002 f830 	bl	800bb10 <USBD_LL_PrepareReceive>
 8009ab0:	e007      	b.n	8009ac2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	2101      	movs	r1, #1
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f002 f827 	bl	800bb10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009adc:	2181      	movs	r1, #129	; 0x81
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 ff4d 	bl	800b97e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009aea:	2101      	movs	r1, #1
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 ff46 	bl	800b97e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009afa:	2182      	movs	r1, #130	; 0x82
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 ff3e 	bl	800b97e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00e      	beq.n	8009b3a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 f881 	bl	800bc34 <free>
    pdev->pClassData = NULL;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d03a      	beq.n	8009be4 <USBD_CDC_Setup+0xa0>
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	f040 8097 	bne.w	8009ca2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	88db      	ldrh	r3, [r3, #6]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d029      	beq.n	8009bd0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	b25b      	sxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	da11      	bge.n	8009baa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009b92:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	88d2      	ldrh	r2, [r2, #6]
 8009b98:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009b9a:	6939      	ldr	r1, [r7, #16]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	88db      	ldrh	r3, [r3, #6]
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 fa9d 	bl	800b0e2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009ba8:	e082      	b.n	8009cb0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	785a      	ldrb	r2, [r3, #1]
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	88db      	ldrh	r3, [r3, #6]
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009bc0:	6939      	ldr	r1, [r7, #16]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	88db      	ldrh	r3, [r3, #6]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f001 fab6 	bl	800b13a <USBD_CtlPrepareRx>
    break;
 8009bce:	e06f      	b.n	8009cb0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	7850      	ldrb	r0, [r2, #1]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	4798      	blx	r3
    break;
 8009be2:	e065      	b.n	8009cb0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b0b      	cmp	r3, #11
 8009bea:	d84f      	bhi.n	8009c8c <USBD_CDC_Setup+0x148>
 8009bec:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <USBD_CDC_Setup+0xb0>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c25 	.word	0x08009c25
 8009bf8:	08009c9b 	.word	0x08009c9b
 8009bfc:	08009c8d 	.word	0x08009c8d
 8009c00:	08009c8d 	.word	0x08009c8d
 8009c04:	08009c8d 	.word	0x08009c8d
 8009c08:	08009c8d 	.word	0x08009c8d
 8009c0c:	08009c8d 	.word	0x08009c8d
 8009c10:	08009c8d 	.word	0x08009c8d
 8009c14:	08009c8d 	.word	0x08009c8d
 8009c18:	08009c8d 	.word	0x08009c8d
 8009c1c:	08009c4d 	.word	0x08009c4d
 8009c20:	08009c75 	.word	0x08009c75
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d107      	bne.n	8009c3e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	2202      	movs	r2, #2
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 fa53 	bl	800b0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c3c:	e030      	b.n	8009ca0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f9dd 	bl	800b000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c46:	2303      	movs	r3, #3
 8009c48:	75fb      	strb	r3, [r7, #23]
      break;
 8009c4a:	e029      	b.n	8009ca0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d107      	bne.n	8009c66 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c56:	f107 030f 	add.w	r3, r7, #15
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 fa3f 	bl	800b0e2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c64:	e01c      	b.n	8009ca0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 f9c9 	bl	800b000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	75fb      	strb	r3, [r7, #23]
      break;
 8009c72:	e015      	b.n	8009ca0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d00f      	beq.n	8009c9e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 f9bd 	bl	800b000 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c86:	2303      	movs	r3, #3
 8009c88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009c8a:	e008      	b.n	8009c9e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 f9b6 	bl	800b000 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c94:	2303      	movs	r3, #3
 8009c96:	75fb      	strb	r3, [r7, #23]
      break;
 8009c98:	e002      	b.n	8009ca0 <USBD_CDC_Setup+0x15c>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e008      	b.n	8009cb0 <USBD_CDC_Setup+0x16c>
      break;
 8009c9e:	bf00      	nop
    }
    break;
 8009ca0:	e006      	b.n	8009cb0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f9ab 	bl	800b000 <USBD_CtlError>
    ret = USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	75fb      	strb	r3, [r7, #23]
    break;
 8009cae:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop

08009cbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e049      	b.n	8009d72 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ce6:	78fa      	ldrb	r2, [r7, #3]
 8009ce8:	6879      	ldr	r1, [r7, #4]
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d029      	beq.n	8009d50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	440b      	add	r3, r1
 8009d0a:	3318      	adds	r3, #24
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	78f9      	ldrb	r1, [r7, #3]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	460b      	mov	r3, r1
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	1a5b      	subs	r3, r3, r1
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	4403      	add	r3, r0
 8009d1c:	3344      	adds	r3, #68	; 0x44
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d24:	fb03 f301 	mul.w	r3, r3, r1
 8009d28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d110      	bne.n	8009d50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3318      	adds	r3, #24
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d42:	78f9      	ldrb	r1, [r7, #3]
 8009d44:	2300      	movs	r3, #0
 8009d46:	2200      	movs	r2, #0
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fec0 	bl	800bace <USBD_LL_Transmit>
 8009d4e:	e00f      	b.n	8009d70 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009d6c:	78fa      	ldrb	r2, [r7, #3]
 8009d6e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e015      	b.n	8009dc8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fed6 	bl	800bb52 <USBD_LL_GetRxDataSize>
 8009da6:	4602      	mov	r2, r0
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dde:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d015      	beq.n	8009e16 <USBD_CDC_EP0_RxReady+0x46>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009df0:	2bff      	cmp	r3, #255	; 0xff
 8009df2:	d010      	beq.n	8009e16 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009e02:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	22ff      	movs	r2, #255	; 0xff
 8009e12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2243      	movs	r2, #67	; 0x43
 8009e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009e2e:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	20000124 	.word	0x20000124

08009e40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2243      	movs	r2, #67	; 0x43
 8009e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009e4e:	4b03      	ldr	r3, [pc, #12]	; (8009e5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	200000e0 	.word	0x200000e0

08009e60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2243      	movs	r2, #67	; 0x43
 8009e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000168 	.word	0x20000168

08009e80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	220a      	movs	r2, #10
 8009e8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009e8e:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	2000009c 	.word	0x2000009c

08009ea0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e004      	b.n	8009ebe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b087      	sub	sp, #28
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009edc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	371c      	adds	r7, #28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f32:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e01a      	b.n	8009f7c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d114      	bne.n	8009f7a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f6e:	2181      	movs	r1, #129	; 0x81
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 fdac 	bl	800bace <USBD_LL_Transmit>

    ret = USBD_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e016      	b.n	8009fd0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f001 fdaa 	bl	800bb10 <USBD_LL_PrepareReceive>
 8009fbc:	e007      	b.n	8009fce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fda1 	bl	800bb10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e025      	b.n	800a03c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	79fa      	ldrb	r2, [r7, #7]
 800a02e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f001 fc17 	bl	800b864 <USBD_LL_Init>
 800a036:	4603      	mov	r3, r0
 800a038:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	e010      	b.n	800a07e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	f107 020e 	add.w	r2, r7, #14
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	4602      	mov	r2, r0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 fc34 	bl	800b8fc <USBD_LL_Start>
 800a094:	4603      	mov	r3, r0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d009      	beq.n	800a0e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	4611      	mov	r1, r2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	4611      	mov	r1, r2
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	4798      	blx	r3
  }

  return USBD_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 ff2c 	bl	800af8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a142:	461a      	mov	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a150:	f003 031f 	and.w	r3, r3, #31
 800a154:	2b01      	cmp	r3, #1
 800a156:	d00e      	beq.n	800a176 <USBD_LL_SetupStage+0x5a>
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d302      	bcc.n	800a162 <USBD_LL_SetupStage+0x46>
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d014      	beq.n	800a18a <USBD_LL_SetupStage+0x6e>
 800a160:	e01d      	b.n	800a19e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fa18 	bl	800a5a0 <USBD_StdDevReq>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]
      break;
 800a174:	e020      	b.n	800a1b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa7c 	bl	800a67c <USBD_StdItfReq>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
      break;
 800a188:	e016      	b.n	800a1b8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a190:	4619      	mov	r1, r3
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fab8 	bl	800a708 <USBD_StdEPReq>
 800a198:	4603      	mov	r3, r0
 800a19a:	73fb      	strb	r3, [r7, #15]
      break;
 800a19c:	e00c      	b.n	800a1b8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 fc05 	bl	800b9bc <USBD_LL_StallEP>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b6:	bf00      	nop
  }

  return ret;
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b086      	sub	sp, #24
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a1d0:	7afb      	ldrb	r3, [r7, #11]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d137      	bne.n	800a246 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a1dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d14a      	bne.n	800a27e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d913      	bls.n	800a21c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	1ad2      	subs	r2, r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bf28      	it	cs
 800a20e:	4613      	movcs	r3, r2
 800a210:	461a      	mov	r2, r3
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 ffad 	bl	800b174 <USBD_CtlContinueRx>
 800a21a:	e030      	b.n	800a27e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d105      	bne.n	800a23e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 ffa9 	bl	800b196 <USBD_CtlSendStatus>
 800a244:	e01b      	b.n	800a27e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d013      	beq.n	800a27a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d10e      	bne.n	800a27a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	7afa      	ldrb	r2, [r7, #11]
 800a266:	4611      	mov	r1, r2
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	4798      	blx	r3
 800a26c:	4603      	mov	r3, r0
 800a26e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	e002      	b.n	800a280 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e000      	b.n	800a280 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	460b      	mov	r3, r1
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a296:	7afb      	ldrb	r3, [r7, #11]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d16a      	bne.n	800a372 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3314      	adds	r3, #20
 800a2a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d155      	bne.n	800a358 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	689a      	ldr	r2, [r3, #8]
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d914      	bls.n	800a2e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	689a      	ldr	r2, [r3, #8]
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	1ad2      	subs	r2, r2, r3
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f000 ff22 	bl	800b118 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2100      	movs	r1, #0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f001 fc18 	bl	800bb10 <USBD_LL_PrepareReceive>
 800a2e0:	e03a      	b.n	800a358 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d11c      	bne.n	800a328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d316      	bcc.n	800a328 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a304:	429a      	cmp	r2, r3
 800a306:	d20f      	bcs.n	800a328 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a308:	2200      	movs	r2, #0
 800a30a:	2100      	movs	r1, #0
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 ff03 	bl	800b118 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a31a:	2300      	movs	r3, #0
 800a31c:	2200      	movs	r2, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f001 fbf5 	bl	800bb10 <USBD_LL_PrepareReceive>
 800a326:	e017      	b.n	800a358 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a33a:	2b03      	cmp	r3, #3
 800a33c:	d105      	bne.n	800a34a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a34a:	2180      	movs	r1, #128	; 0x80
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f001 fb35 	bl	800b9bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 ff32 	bl	800b1bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d123      	bne.n	800a3aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fe9b 	bl	800a09e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a370:	e01b      	b.n	800a3aa <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d013      	beq.n	800a3a6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a384:	2b03      	cmp	r3, #3
 800a386:	d10e      	bne.n	800a3a6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	7afa      	ldrb	r2, [r7, #11]
 800a392:	4611      	mov	r1, r2
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	4798      	blx	r3
 800a398:	4603      	mov	r3, r0
 800a39a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	e002      	b.n	800a3ac <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e000      	b.n	800a3ac <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d009      	beq.n	800a3f8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	6852      	ldr	r2, [r2, #4]
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3f8:	2340      	movs	r3, #64	; 0x40
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fa97 	bl	800b932 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2240      	movs	r2, #64	; 0x40
 800a410:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	2200      	movs	r2, #0
 800a418:	2180      	movs	r1, #128	; 0x80
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fa89 	bl	800b932 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2240      	movs	r2, #64	; 0x40
 800a42a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	78fa      	ldrb	r2, [r7, #3]
 800a446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	370c      	adds	r7, #12
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2204      	movs	r2, #4
 800a46e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d105      	bne.n	800a49e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d10b      	bne.n	800a4d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	460b      	mov	r3, r1
 800a504:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b082      	sub	sp, #8
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6852      	ldr	r2, [r2, #4]
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
  }

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a562:	b480      	push	{r7}
 800a564:	b087      	sub	sp, #28
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3301      	adds	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a580:	8a3b      	ldrh	r3, [r7, #16]
 800a582:	021b      	lsls	r3, r3, #8
 800a584:	b21a      	sxth	r2, r3
 800a586:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	b21b      	sxth	r3, r3
 800a58e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a590:	89fb      	ldrh	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5b6:	2b20      	cmp	r3, #32
 800a5b8:	d004      	beq.n	800a5c4 <USBD_StdDevReq+0x24>
 800a5ba:	2b40      	cmp	r3, #64	; 0x40
 800a5bc:	d002      	beq.n	800a5c4 <USBD_StdDevReq+0x24>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00a      	beq.n	800a5d8 <USBD_StdDevReq+0x38>
 800a5c2:	e050      	b.n	800a666 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d6:	e04b      	b.n	800a670 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	2b09      	cmp	r3, #9
 800a5de:	d83c      	bhi.n	800a65a <USBD_StdDevReq+0xba>
 800a5e0:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <USBD_StdDevReq+0x48>)
 800a5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e6:	bf00      	nop
 800a5e8:	0800a63d 	.word	0x0800a63d
 800a5ec:	0800a651 	.word	0x0800a651
 800a5f0:	0800a65b 	.word	0x0800a65b
 800a5f4:	0800a647 	.word	0x0800a647
 800a5f8:	0800a65b 	.word	0x0800a65b
 800a5fc:	0800a61b 	.word	0x0800a61b
 800a600:	0800a611 	.word	0x0800a611
 800a604:	0800a65b 	.word	0x0800a65b
 800a608:	0800a633 	.word	0x0800a633
 800a60c:	0800a625 	.word	0x0800a625
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9ce 	bl	800a9b4 <USBD_GetDescriptor>
      break;
 800a618:	e024      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fb33 	bl	800ac88 <USBD_SetAddress>
      break;
 800a622:	e01f      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb70 	bl	800ad0c <USBD_SetConfig>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
      break;
 800a630:	e018      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc0d 	bl	800ae54 <USBD_GetConfig>
      break;
 800a63a:	e013      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fc3c 	bl	800aebc <USBD_GetStatus>
      break;
 800a644:	e00e      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc6a 	bl	800af22 <USBD_SetFeature>
      break;
 800a64e:	e009      	b.n	800a664 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fc79 	bl	800af4a <USBD_ClrFeature>
      break;
 800a658:	e004      	b.n	800a664 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fccf 	bl	800b000 <USBD_CtlError>
      break;
 800a662:	bf00      	nop
    }
    break;
 800a664:	e004      	b.n	800a670 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fcc9 	bl	800b000 <USBD_CtlError>
    break;
 800a66e:	bf00      	nop
  }

  return ret;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop

0800a67c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a692:	2b20      	cmp	r3, #32
 800a694:	d003      	beq.n	800a69e <USBD_StdItfReq+0x22>
 800a696:	2b40      	cmp	r3, #64	; 0x40
 800a698:	d001      	beq.n	800a69e <USBD_StdItfReq+0x22>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d12a      	bne.n	800a6f4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d81d      	bhi.n	800a6e6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	889b      	ldrh	r3, [r3, #4]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d813      	bhi.n	800a6dc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	88db      	ldrh	r3, [r3, #6]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d110      	bne.n	800a6f0 <USBD_StdItfReq+0x74>
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10d      	bne.n	800a6f0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fd5e 	bl	800b196 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a6da:	e009      	b.n	800a6f0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fc8e 	bl	800b000 <USBD_CtlError>
      break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc89 	bl	800b000 <USBD_CtlError>
      break;
 800a6ee:	e000      	b.n	800a6f2 <USBD_StdItfReq+0x76>
      break;
 800a6f0:	bf00      	nop
    }
    break;
 800a6f2:	e004      	b.n	800a6fe <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fc82 	bl	800b000 <USBD_CtlError>
    break;
 800a6fc:	bf00      	nop
  }

  return ret;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	889b      	ldrh	r3, [r3, #4]
 800a71a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a724:	2b20      	cmp	r3, #32
 800a726:	d004      	beq.n	800a732 <USBD_StdEPReq+0x2a>
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	d002      	beq.n	800a732 <USBD_StdEPReq+0x2a>
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <USBD_StdEPReq+0x3e>
 800a730:	e135      	b.n	800a99e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	4798      	blx	r3
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	e130      	b.n	800a9a8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d03e      	beq.n	800a7cc <USBD_StdEPReq+0xc4>
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d002      	beq.n	800a758 <USBD_StdEPReq+0x50>
 800a752:	2b00      	cmp	r3, #0
 800a754:	d077      	beq.n	800a846 <USBD_StdEPReq+0x13e>
 800a756:	e11c      	b.n	800a992 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d002      	beq.n	800a768 <USBD_StdEPReq+0x60>
 800a762:	2b03      	cmp	r3, #3
 800a764:	d015      	beq.n	800a792 <USBD_StdEPReq+0x8a>
 800a766:	e02b      	b.n	800a7c0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00c      	beq.n	800a788 <USBD_StdEPReq+0x80>
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	2b80      	cmp	r3, #128	; 0x80
 800a772:	d009      	beq.n	800a788 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f001 f91f 	bl	800b9bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a77e:	2180      	movs	r1, #128	; 0x80
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 f91b 	bl	800b9bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a786:	e020      	b.n	800a7ca <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fc38 	bl	800b000 <USBD_CtlError>
        break;
 800a790:	e01b      	b.n	800a7ca <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	885b      	ldrh	r3, [r3, #2]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10e      	bne.n	800a7b8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00b      	beq.n	800a7b8 <USBD_StdEPReq+0xb0>
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d008      	beq.n	800a7b8 <USBD_StdEPReq+0xb0>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	88db      	ldrh	r3, [r3, #6]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d104      	bne.n	800a7b8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 f902 	bl	800b9bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 fcec 	bl	800b196 <USBD_CtlSendStatus>

        break;
 800a7be:	e004      	b.n	800a7ca <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fc1c 	bl	800b000 <USBD_CtlError>
        break;
 800a7c8:	bf00      	nop
      }
      break;
 800a7ca:	e0e7      	b.n	800a99c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d002      	beq.n	800a7dc <USBD_StdEPReq+0xd4>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d015      	beq.n	800a806 <USBD_StdEPReq+0xfe>
 800a7da:	e02d      	b.n	800a838 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00c      	beq.n	800a7fc <USBD_StdEPReq+0xf4>
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b80      	cmp	r3, #128	; 0x80
 800a7e6:	d009      	beq.n	800a7fc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f8e5 	bl	800b9bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7f2:	2180      	movs	r1, #128	; 0x80
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 f8e1 	bl	800b9bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a7fa:	e023      	b.n	800a844 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fbfe 	bl	800b000 <USBD_CtlError>
        break;
 800a804:	e01e      	b.n	800a844 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	885b      	ldrh	r3, [r3, #2]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d119      	bne.n	800a842 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 f8ec 	bl	800b9fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fcb7 	bl	800b196 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	4798      	blx	r3
        }
        break;
 800a836:	e004      	b.n	800a842 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fbe0 	bl	800b000 <USBD_CtlError>
        break;
 800a840:	e000      	b.n	800a844 <USBD_StdEPReq+0x13c>
        break;
 800a842:	bf00      	nop
      }
      break;
 800a844:	e0aa      	b.n	800a99c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d002      	beq.n	800a856 <USBD_StdEPReq+0x14e>
 800a850:	2b03      	cmp	r3, #3
 800a852:	d032      	beq.n	800a8ba <USBD_StdEPReq+0x1b2>
 800a854:	e097      	b.n	800a986 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <USBD_StdEPReq+0x164>
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b80      	cmp	r3, #128	; 0x80
 800a860:	d004      	beq.n	800a86c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fbcb 	bl	800b000 <USBD_CtlError>
          break;
 800a86a:	e091      	b.n	800a990 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a86c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a870:	2b00      	cmp	r3, #0
 800a872:	da0b      	bge.n	800a88c <USBD_StdEPReq+0x184>
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	3310      	adds	r3, #16
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	4413      	add	r3, r2
 800a888:	3304      	adds	r3, #4
 800a88a:	e00b      	b.n	800a8a4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fc15 	bl	800b0e2 <USBD_CtlSendData>
        break;
 800a8b8:	e06a      	b.n	800a990 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a8ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da11      	bge.n	800a8e6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	f003 020f 	and.w	r2, r3, #15
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3324      	adds	r3, #36	; 0x24
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d117      	bne.n	800a90c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fb8e 	bl	800b000 <USBD_CtlError>
            break;
 800a8e4:	e054      	b.n	800a990 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	f003 020f 	and.w	r2, r3, #15
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4413      	add	r3, r2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	440b      	add	r3, r1
 800a8f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d104      	bne.n	800a90c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fb7b 	bl	800b000 <USBD_CtlError>
            break;
 800a90a:	e041      	b.n	800a990 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a90c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a910:	2b00      	cmp	r3, #0
 800a912:	da0b      	bge.n	800a92c <USBD_StdEPReq+0x224>
 800a914:	7bbb      	ldrb	r3, [r7, #14]
 800a916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	3310      	adds	r3, #16
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4413      	add	r3, r2
 800a928:	3304      	adds	r3, #4
 800a92a:	e00b      	b.n	800a944 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a932:	4613      	mov	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4413      	add	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	4413      	add	r3, r2
 800a942:	3304      	adds	r3, #4
 800a944:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <USBD_StdEPReq+0x24a>
 800a94c:	7bbb      	ldrb	r3, [r7, #14]
 800a94e:	2b80      	cmp	r3, #128	; 0x80
 800a950:	d103      	bne.n	800a95a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e00e      	b.n	800a978 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a95a:	7bbb      	ldrb	r3, [r7, #14]
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f001 f86a 	bl	800ba38 <USBD_LL_IsStallEP>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2201      	movs	r2, #1
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e002      	b.n	800a978 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2202      	movs	r2, #2
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fbaf 	bl	800b0e2 <USBD_CtlSendData>
          break;
 800a984:	e004      	b.n	800a990 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fb39 	bl	800b000 <USBD_CtlError>
        break;
 800a98e:	bf00      	nop
      }
      break;
 800a990:	e004      	b.n	800a99c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fb33 	bl	800b000 <USBD_CtlError>
      break;
 800a99a:	bf00      	nop
    }
    break;
 800a99c:	e004      	b.n	800a9a8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fb2d 	bl	800b000 <USBD_CtlError>
    break;
 800a9a6:	bf00      	nop
  }

  return ret;
 800a9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	885b      	ldrh	r3, [r3, #2]
 800a9ce:	0a1b      	lsrs	r3, r3, #8
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	2b06      	cmp	r3, #6
 800a9d6:	f200 8128 	bhi.w	800ac2a <USBD_GetDescriptor+0x276>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <USBD_GetDescriptor+0x2c>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9fd 	.word	0x0800a9fd
 800a9e4:	0800aa15 	.word	0x0800aa15
 800a9e8:	0800aa55 	.word	0x0800aa55
 800a9ec:	0800ac2b 	.word	0x0800ac2b
 800a9f0:	0800ac2b 	.word	0x0800ac2b
 800a9f4:	0800abcb 	.word	0x0800abcb
 800a9f8:	0800abf7 	.word	0x0800abf7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	7c12      	ldrb	r2, [r2, #16]
 800aa08:	f107 0108 	add.w	r1, r7, #8
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4798      	blx	r3
 800aa10:	60f8      	str	r0, [r7, #12]
    break;
 800aa12:	e112      	b.n	800ac3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	7c1b      	ldrb	r3, [r3, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10d      	bne.n	800aa38 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa24:	f107 0208 	add.w	r2, r7, #8
 800aa28:	4610      	mov	r0, r2
 800aa2a:	4798      	blx	r3
 800aa2c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	2202      	movs	r2, #2
 800aa34:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aa36:	e100      	b.n	800ac3a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa40:	f107 0208 	add.w	r2, r7, #8
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	2202      	movs	r2, #2
 800aa50:	701a      	strb	r2, [r3, #0]
    break;
 800aa52:	e0f2      	b.n	800ac3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	885b      	ldrh	r3, [r3, #2]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b05      	cmp	r3, #5
 800aa5c:	f200 80ac 	bhi.w	800abb8 <USBD_GetDescriptor+0x204>
 800aa60:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <USBD_GetDescriptor+0xb4>)
 800aa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa66:	bf00      	nop
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aae9 	.word	0x0800aae9
 800aa74:	0800ab1d 	.word	0x0800ab1d
 800aa78:	0800ab51 	.word	0x0800ab51
 800aa7c:	0800ab85 	.word	0x0800ab85
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7c12      	ldrb	r2, [r2, #16]
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aaa2:	e091      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 faaa 	bl	800b000 <USBD_CtlError>
        err++;
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	3301      	adds	r3, #1
 800aab0:	72fb      	strb	r3, [r7, #11]
      break;
 800aab2:	e089      	b.n	800abc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 0108 	add.w	r1, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aad6:	e077      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa90 	bl	800b000 <USBD_CtlError>
        err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
      break;
 800aae6:	e06f      	b.n	800abc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	7c12      	ldrb	r2, [r2, #16]
 800ab00:	f107 0108 	add.w	r1, r7, #8
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab0a:	e05d      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fa76 	bl	800b000 <USBD_CtlError>
        err++;
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	3301      	adds	r3, #1
 800ab18:	72fb      	strb	r3, [r7, #11]
      break;
 800ab1a:	e055      	b.n	800abc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	7c12      	ldrb	r2, [r2, #16]
 800ab34:	f107 0108 	add.w	r1, r7, #8
 800ab38:	4610      	mov	r0, r2
 800ab3a:	4798      	blx	r3
 800ab3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3e:	e043      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa5c 	bl	800b000 <USBD_CtlError>
        err++;
 800ab48:	7afb      	ldrb	r3, [r7, #11]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4e:	e03b      	b.n	800abc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00b      	beq.n	800ab74 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	7c12      	ldrb	r2, [r2, #16]
 800ab68:	f107 0108 	add.w	r1, r7, #8
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	4798      	blx	r3
 800ab70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab72:	e029      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab74:	6839      	ldr	r1, [r7, #0]
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa42 	bl	800b000 <USBD_CtlError>
        err++;
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	72fb      	strb	r3, [r7, #11]
      break;
 800ab82:	e021      	b.n	800abc8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	7c12      	ldrb	r2, [r2, #16]
 800ab9c:	f107 0108 	add.w	r1, r7, #8
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
 800aba4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba6:	e00f      	b.n	800abc8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa28 	bl	800b000 <USBD_CtlError>
        err++;
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	3301      	adds	r3, #1
 800abb4:	72fb      	strb	r3, [r7, #11]
      break;
 800abb6:	e007      	b.n	800abc8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fa20 	bl	800b000 <USBD_CtlError>
      err++;
 800abc0:	7afb      	ldrb	r3, [r7, #11]
 800abc2:	3301      	adds	r3, #1
 800abc4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800abc6:	bf00      	nop
    }
    break;
 800abc8:	e037      	b.n	800ac3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	7c1b      	ldrb	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d109      	bne.n	800abe6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	f107 0208 	add.w	r2, r7, #8
 800abde:	4610      	mov	r0, r2
 800abe0:	4798      	blx	r3
 800abe2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800abe4:	e029      	b.n	800ac3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa09 	bl	800b000 <USBD_CtlError>
      err++;
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	3301      	adds	r3, #1
 800abf2:	72fb      	strb	r3, [r7, #11]
    break;
 800abf4:	e021      	b.n	800ac3a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7c1b      	ldrb	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10d      	bne.n	800ac1a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac06:	f107 0208 	add.w	r2, r7, #8
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	4798      	blx	r3
 800ac0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3301      	adds	r3, #1
 800ac14:	2207      	movs	r2, #7
 800ac16:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac18:	e00f      	b.n	800ac3a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f9ef 	bl	800b000 <USBD_CtlError>
      err++;
 800ac22:	7afb      	ldrb	r3, [r7, #11]
 800ac24:	3301      	adds	r3, #1
 800ac26:	72fb      	strb	r3, [r7, #11]
    break;
 800ac28:	e007      	b.n	800ac3a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f9e7 	bl	800b000 <USBD_CtlError>
    err++;
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	3301      	adds	r3, #1
 800ac36:	72fb      	strb	r3, [r7, #11]
    break;
 800ac38:	bf00      	nop
  }

  if (err != 0U)
 800ac3a:	7afb      	ldrb	r3, [r7, #11]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11e      	bne.n	800ac7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	88db      	ldrh	r3, [r3, #6]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d016      	beq.n	800ac76 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ac48:	893b      	ldrh	r3, [r7, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00e      	beq.n	800ac6c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	88da      	ldrh	r2, [r3, #6]
 800ac52:	893b      	ldrh	r3, [r7, #8]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	bf28      	it	cs
 800ac58:	4613      	movcs	r3, r2
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac5e:	893b      	ldrh	r3, [r7, #8]
 800ac60:	461a      	mov	r2, r3
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fa3c 	bl	800b0e2 <USBD_CtlSendData>
 800ac6a:	e009      	b.n	800ac80 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f9c6 	bl	800b000 <USBD_CtlError>
 800ac74:	e004      	b.n	800ac80 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fa8d 	bl	800b196 <USBD_CtlSendStatus>
 800ac7c:	e000      	b.n	800ac80 <USBD_GetDescriptor+0x2cc>
    return;
 800ac7e:	bf00      	nop
    }
  }
}
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	889b      	ldrh	r3, [r3, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d130      	bne.n	800acfc <USBD_SetAddress+0x74>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	88db      	ldrh	r3, [r3, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d12c      	bne.n	800acfc <USBD_SetAddress+0x74>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	885b      	ldrh	r3, [r3, #2]
 800aca6:	2b7f      	cmp	r3, #127	; 0x7f
 800aca8:	d828      	bhi.n	800acfc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	885b      	ldrh	r3, [r3, #2]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acbc:	2b03      	cmp	r3, #3
 800acbe:	d104      	bne.n	800acca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f99c 	bl	800b000 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc8:	e01c      	b.n	800ad04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	7bfa      	ldrb	r2, [r7, #15]
 800acce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 feda 	bl	800ba90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa5a 	bl	800b196 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf0:	e008      	b.n	800ad04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acfa:	e003      	b.n	800ad04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f97e 	bl	800b000 <USBD_CtlError>
  }
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	4b4b      	ldr	r3, [pc, #300]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad24:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d905      	bls.n	800ad38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f966 	bl	800b000 <USBD_CtlError>
    return USBD_FAIL;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e087      	b.n	800ae48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3e:	2b02      	cmp	r3, #2
 800ad40:	d002      	beq.n	800ad48 <USBD_SetConfig+0x3c>
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d025      	beq.n	800ad92 <USBD_SetConfig+0x86>
 800ad46:	e071      	b.n	800ae2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ad48:	4b41      	ldr	r3, [pc, #260]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01c      	beq.n	800ad8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ad50:	4b3f      	ldr	r3, [pc, #252]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad5a:	4b3d      	ldr	r3, [pc, #244]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff f9a7 	bl	800a0b4 <USBD_SetClassConfig>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f944 	bl	800b000 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ad78:	e065      	b.n	800ae46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fa0b 	bl	800b196 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2203      	movs	r2, #3
 800ad84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ad88:	e05d      	b.n	800ae46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa03 	bl	800b196 <USBD_CtlSendStatus>
    break;
 800ad90:	e059      	b.n	800ae46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ad92:	4b2f      	ldr	r3, [pc, #188]	; (800ae50 <USBD_SetConfig+0x144>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d112      	bne.n	800adc0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ada2:	4b2b      	ldr	r3, [pc, #172]	; (800ae50 <USBD_SetConfig+0x144>)
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adac:	4b28      	ldr	r3, [pc, #160]	; (800ae50 <USBD_SetConfig+0x144>)
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff f99a 	bl	800a0ec <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f9ec 	bl	800b196 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800adbe:	e042      	b.n	800ae46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800adc0:	4b23      	ldr	r3, [pc, #140]	; (800ae50 <USBD_SetConfig+0x144>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d02a      	beq.n	800ae24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff f988 	bl	800a0ec <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800addc:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <USBD_SetConfig+0x144>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ade6:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <USBD_SetConfig+0x144>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7ff f961 	bl	800a0b4 <USBD_SetClassConfig>
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00f      	beq.n	800ae1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f8fe 	bl	800b000 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff f96d 	bl	800a0ec <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2202      	movs	r2, #2
 800ae16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ae1a:	e014      	b.n	800ae46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f9ba 	bl	800b196 <USBD_CtlSendStatus>
    break;
 800ae22:	e010      	b.n	800ae46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f9b6 	bl	800b196 <USBD_CtlSendStatus>
    break;
 800ae2a:	e00c      	b.n	800ae46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f8e6 	bl	800b000 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <USBD_SetConfig+0x144>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff f956 	bl	800a0ec <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	73fb      	strb	r3, [r7, #15]
    break;
 800ae44:	bf00      	nop
  }

  return ret;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	200002bc 	.word	0x200002bc

0800ae54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	88db      	ldrh	r3, [r3, #6]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d004      	beq.n	800ae70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f8c9 	bl	800b000 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ae6e:	e021      	b.n	800aeb4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	db17      	blt.n	800aeaa <USBD_GetConfig+0x56>
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	dd02      	ble.n	800ae84 <USBD_GetConfig+0x30>
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d00b      	beq.n	800ae9a <USBD_GetConfig+0x46>
 800ae82:	e012      	b.n	800aeaa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	2201      	movs	r2, #1
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f925 	bl	800b0e2 <USBD_CtlSendData>
      break;
 800ae98:	e00c      	b.n	800aeb4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f91d 	bl	800b0e2 <USBD_CtlSendData>
      break;
 800aea8:	e004      	b.n	800aeb4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8a7 	bl	800b000 <USBD_CtlError>
      break;
 800aeb2:	bf00      	nop
}
 800aeb4:	bf00      	nop
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aecc:	3b01      	subs	r3, #1
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d81e      	bhi.n	800af10 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	88db      	ldrh	r3, [r3, #6]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d004      	beq.n	800aee4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f88f 	bl	800b000 <USBD_CtlError>
      break;
 800aee2:	e01a      	b.n	800af1a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	f043 0202 	orr.w	r2, r3, #2
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	330c      	adds	r3, #12
 800af04:	2202      	movs	r2, #2
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f8ea 	bl	800b0e2 <USBD_CtlSendData>
    break;
 800af0e:	e004      	b.n	800af1a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800af10:	6839      	ldr	r1, [r7, #0]
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f874 	bl	800b000 <USBD_CtlError>
    break;
 800af18:	bf00      	nop
  }
}
 800af1a:	bf00      	nop
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	885b      	ldrh	r3, [r3, #2]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d106      	bne.n	800af42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f92a 	bl	800b196 <USBD_CtlSendStatus>
  }
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d80b      	bhi.n	800af78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	885b      	ldrh	r3, [r3, #2]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d10c      	bne.n	800af82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f910 	bl	800b196 <USBD_CtlSendStatus>
      }
      break;
 800af76:	e004      	b.n	800af82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 f840 	bl	800b000 <USBD_CtlError>
      break;
 800af80:	e000      	b.n	800af84 <USBD_ClrFeature+0x3a>
      break;
 800af82:	bf00      	nop
  }
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	781a      	ldrb	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3301      	adds	r3, #1
 800afb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7ff fad3 	bl	800a562 <SWAPBYTE>
 800afbc:	4603      	mov	r3, r0
 800afbe:	461a      	mov	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3301      	adds	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7ff fac6 	bl	800a562 <SWAPBYTE>
 800afd6:	4603      	mov	r3, r0
 800afd8:	461a      	mov	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3301      	adds	r3, #1
 800afe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	3301      	adds	r3, #1
 800afe8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f7ff fab9 	bl	800a562 <SWAPBYTE>
 800aff0:	4603      	mov	r3, r0
 800aff2:	461a      	mov	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	80da      	strh	r2, [r3, #6]
}
 800aff8:	bf00      	nop
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f000 fcd5 	bl	800b9bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b012:	2100      	movs	r1, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fcd1 	bl	800b9bc <USBD_LL_StallEP>
}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b086      	sub	sp, #24
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d036      	beq.n	800b0a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b03c:	6938      	ldr	r0, [r7, #16]
 800b03e:	f000 f836 	bl	800b0ae <USBD_GetLen>
 800b042:	4603      	mov	r3, r0
 800b044:	3301      	adds	r3, #1
 800b046:	b29b      	uxth	r3, r3
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	4413      	add	r3, r2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	7812      	ldrb	r2, [r2, #0]
 800b05a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
 800b05e:	3301      	adds	r3, #1
 800b060:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	4413      	add	r3, r2
 800b068:	2203      	movs	r2, #3
 800b06a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	3301      	adds	r3, #1
 800b070:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b072:	e013      	b.n	800b09c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	4413      	add	r3, r2
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	7812      	ldrb	r2, [r2, #0]
 800b07e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	3301      	adds	r3, #1
 800b084:	613b      	str	r3, [r7, #16]
    idx++;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
 800b088:	3301      	adds	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	4413      	add	r3, r2
 800b092:	2200      	movs	r2, #0
 800b094:	701a      	strb	r2, [r3, #0]
    idx++;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	3301      	adds	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1e7      	bne.n	800b074 <USBD_GetString+0x52>
 800b0a4:	e000      	b.n	800b0a8 <USBD_GetString+0x86>
    return;
 800b0a6:	bf00      	nop
  }
}
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b0be:	e005      	b.n	800b0cc <USBD_GetLen+0x1e>
  {
    len++;
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f5      	bne.n	800b0c0 <USBD_GetLen+0x12>
  }

  return len;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	2100      	movs	r1, #0
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 fce0 	bl	800bace <USBD_LL_Transmit>

  return USBD_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	2100      	movs	r1, #0
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	f000 fccf 	bl	800bace <USBD_LL_Transmit>

  return USBD_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	60b9      	str	r1, [r7, #8]
 800b144:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2203      	movs	r2, #3
 800b14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	2100      	movs	r1, #0
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 fcd3 	bl	800bb10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f000 fcc2 	bl	800bb10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2204      	movs	r2, #4
 800b1a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fc8e 	bl	800bace <USBD_LL_Transmit>

  return USBD_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2205      	movs	r2, #5
 800b1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fc9c 	bl	800bb10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4912      	ldr	r1, [pc, #72]	; (800b234 <MX_USB_DEVICE_Init+0x50>)
 800b1ec:	4812      	ldr	r0, [pc, #72]	; (800b238 <MX_USB_DEVICE_Init+0x54>)
 800b1ee:	f7fe fef3 	bl	8009fd8 <USBD_Init>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1f8:	f7f6 faa6 	bl	8001748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1fc:	490f      	ldr	r1, [pc, #60]	; (800b23c <MX_USB_DEVICE_Init+0x58>)
 800b1fe:	480e      	ldr	r0, [pc, #56]	; (800b238 <MX_USB_DEVICE_Init+0x54>)
 800b200:	f7fe ff20 	bl	800a044 <USBD_RegisterClass>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b20a:	f7f6 fa9d 	bl	8001748 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b20e:	490c      	ldr	r1, [pc, #48]	; (800b240 <MX_USB_DEVICE_Init+0x5c>)
 800b210:	4809      	ldr	r0, [pc, #36]	; (800b238 <MX_USB_DEVICE_Init+0x54>)
 800b212:	f7fe fe45 	bl	8009ea0 <USBD_CDC_RegisterInterface>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b21c:	f7f6 fa94 	bl	8001748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b220:	4805      	ldr	r0, [pc, #20]	; (800b238 <MX_USB_DEVICE_Init+0x54>)
 800b222:	f7fe ff30 	bl	800a086 <USBD_Start>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b22c:	f7f6 fa8c 	bl	8001748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b230:	bf00      	nop
 800b232:	bd80      	pop	{r7, pc}
 800b234:	200001c0 	.word	0x200001c0
 800b238:	20000498 	.word	0x20000498
 800b23c:	200000a8 	.word	0x200000a8
 800b240:	200001ac 	.word	0x200001ac

0800b244 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b248:	2200      	movs	r2, #0
 800b24a:	4905      	ldr	r1, [pc, #20]	; (800b260 <CDC_Init_FS+0x1c>)
 800b24c:	4805      	ldr	r0, [pc, #20]	; (800b264 <CDC_Init_FS+0x20>)
 800b24e:	f7fe fe3c 	bl	8009eca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b252:	4905      	ldr	r1, [pc, #20]	; (800b268 <CDC_Init_FS+0x24>)
 800b254:	4803      	ldr	r0, [pc, #12]	; (800b264 <CDC_Init_FS+0x20>)
 800b256:	f7fe fe51 	bl	8009efc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b25a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20000f68 	.word	0x20000f68
 800b264:	20000498 	.word	0x20000498
 800b268:	20000768 	.word	0x20000768

0800b26c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b270:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b272:	4618      	mov	r0, r3
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	4603      	mov	r3, r0
 800b284:	6039      	str	r1, [r7, #0]
 800b286:	71fb      	strb	r3, [r7, #7]
 800b288:	4613      	mov	r3, r2
 800b28a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b28c:	79fb      	ldrb	r3, [r7, #7]
 800b28e:	2b23      	cmp	r3, #35	; 0x23
 800b290:	d84a      	bhi.n	800b328 <CDC_Control_FS+0xac>
 800b292:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <CDC_Control_FS+0x1c>)
 800b294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b298:	0800b329 	.word	0x0800b329
 800b29c:	0800b329 	.word	0x0800b329
 800b2a0:	0800b329 	.word	0x0800b329
 800b2a4:	0800b329 	.word	0x0800b329
 800b2a8:	0800b329 	.word	0x0800b329
 800b2ac:	0800b329 	.word	0x0800b329
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b329 	.word	0x0800b329
 800b2b8:	0800b329 	.word	0x0800b329
 800b2bc:	0800b329 	.word	0x0800b329
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b329 	.word	0x0800b329
 800b2c8:	0800b329 	.word	0x0800b329
 800b2cc:	0800b329 	.word	0x0800b329
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b329 	.word	0x0800b329
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	0800b329 	.word	0x0800b329
 800b2e0:	0800b329 	.word	0x0800b329
 800b2e4:	0800b329 	.word	0x0800b329
 800b2e8:	0800b329 	.word	0x0800b329
 800b2ec:	0800b329 	.word	0x0800b329
 800b2f0:	0800b329 	.word	0x0800b329
 800b2f4:	0800b329 	.word	0x0800b329
 800b2f8:	0800b329 	.word	0x0800b329
 800b2fc:	0800b329 	.word	0x0800b329
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b329 	.word	0x0800b329
 800b30c:	0800b329 	.word	0x0800b329
 800b310:	0800b329 	.word	0x0800b329
 800b314:	0800b329 	.word	0x0800b329
 800b318:	0800b329 	.word	0x0800b329
 800b31c:	0800b329 	.word	0x0800b329
 800b320:	0800b329 	.word	0x0800b329
 800b324:	0800b329 	.word	0x0800b329
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b328:	bf00      	nop
  }

  return (USBD_OK);
 800b32a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b342:	6879      	ldr	r1, [r7, #4]
 800b344:	4805      	ldr	r0, [pc, #20]	; (800b35c <CDC_Receive_FS+0x24>)
 800b346:	f7fe fdd9 	bl	8009efc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b34a:	4804      	ldr	r0, [pc, #16]	; (800b35c <CDC_Receive_FS+0x24>)
 800b34c:	f7fe fe1a 	bl	8009f84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b350:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b352:	4618      	mov	r0, r3
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20000498 	.word	0x20000498

0800b360 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b370:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <CDC_Transmit_FS+0x48>)
 800b372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b376:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b382:	2301      	movs	r3, #1
 800b384:	e00b      	b.n	800b39e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b386:	887b      	ldrh	r3, [r7, #2]
 800b388:	461a      	mov	r2, r3
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	4806      	ldr	r0, [pc, #24]	; (800b3a8 <CDC_Transmit_FS+0x48>)
 800b38e:	f7fe fd9c 	bl	8009eca <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b392:	4805      	ldr	r0, [pc, #20]	; (800b3a8 <CDC_Transmit_FS+0x48>)
 800b394:	f7fe fdc6 	bl	8009f24 <USBD_CDC_TransmitPacket>
 800b398:	4603      	mov	r3, r0
 800b39a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20000498 	.word	0x20000498

0800b3ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2212      	movs	r2, #18
 800b3e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3e2:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr
 800b3f0:	200001dc 	.word	0x200001dc

0800b3f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	6039      	str	r1, [r7, #0]
 800b3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2204      	movs	r2, #4
 800b404:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b406:	4b03      	ldr	r3, [pc, #12]	; (800b414 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	200001f0 	.word	0x200001f0

0800b418 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	6039      	str	r1, [r7, #0]
 800b422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d105      	bne.n	800b436 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	4907      	ldr	r1, [pc, #28]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
 800b42e:	4808      	ldr	r0, [pc, #32]	; (800b450 <USBD_FS_ProductStrDescriptor+0x38>)
 800b430:	f7ff fdf7 	bl	800b022 <USBD_GetString>
 800b434:	e004      	b.n	800b440 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	4904      	ldr	r1, [pc, #16]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
 800b43a:	4805      	ldr	r0, [pc, #20]	; (800b450 <USBD_FS_ProductStrDescriptor+0x38>)
 800b43c:	f7ff fdf1 	bl	800b022 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b440:	4b02      	ldr	r3, [pc, #8]	; (800b44c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20001768 	.word	0x20001768
 800b450:	0800cc00 	.word	0x0800cc00

0800b454 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	6039      	str	r1, [r7, #0]
 800b45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	4904      	ldr	r1, [pc, #16]	; (800b474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b464:	4804      	ldr	r0, [pc, #16]	; (800b478 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b466:	f7ff fddc 	bl	800b022 <USBD_GetString>
  return USBD_StrDesc;
 800b46a:	4b02      	ldr	r3, [pc, #8]	; (800b474 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20001768 	.word	0x20001768
 800b478:	0800cc14 	.word	0x0800cc14

0800b47c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	221a      	movs	r2, #26
 800b48c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b48e:	f000 f843 	bl	800b518 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b492:	4b02      	ldr	r3, [pc, #8]	; (800b49c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	200001f4 	.word	0x200001f4

0800b4a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d105      	bne.n	800b4be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4907      	ldr	r1, [pc, #28]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4b6:	4808      	ldr	r0, [pc, #32]	; (800b4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4b8:	f7ff fdb3 	bl	800b022 <USBD_GetString>
 800b4bc:	e004      	b.n	800b4c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	4904      	ldr	r1, [pc, #16]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4c2:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4c4:	f7ff fdad 	bl	800b022 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c8:	4b02      	ldr	r3, [pc, #8]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	20001768 	.word	0x20001768
 800b4d8:	0800cc28 	.word	0x0800cc28

0800b4dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4907      	ldr	r1, [pc, #28]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4f2:	4808      	ldr	r0, [pc, #32]	; (800b514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4f4:	f7ff fd95 	bl	800b022 <USBD_GetString>
 800b4f8:	e004      	b.n	800b504 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4904      	ldr	r1, [pc, #16]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4fe:	4805      	ldr	r0, [pc, #20]	; (800b514 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b500:	f7ff fd8f 	bl	800b022 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b504:	4b02      	ldr	r3, [pc, #8]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20001768 	.word	0x20001768
 800b514:	0800cc34 	.word	0x0800cc34

0800b518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <Get_SerialNum+0x44>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b524:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <Get_SerialNum+0x48>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	; (800b564 <Get_SerialNum+0x4c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b53e:	2208      	movs	r2, #8
 800b540:	4909      	ldr	r1, [pc, #36]	; (800b568 <Get_SerialNum+0x50>)
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 f814 	bl	800b570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b548:	2204      	movs	r2, #4
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <Get_SerialNum+0x54>)
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f000 f80f 	bl	800b570 <IntToUnicode>
  }
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	1fff7a10 	.word	0x1fff7a10
 800b560:	1fff7a14 	.word	0x1fff7a14
 800b564:	1fff7a18 	.word	0x1fff7a18
 800b568:	200001f6 	.word	0x200001f6
 800b56c:	20000206 	.word	0x20000206

0800b570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
 800b586:	e027      	b.n	800b5d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0f1b      	lsrs	r3, r3, #28
 800b58c:	2b09      	cmp	r3, #9
 800b58e:	d80b      	bhi.n	800b5a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	0f1b      	lsrs	r3, r3, #28
 800b594:	b2da      	uxtb	r2, r3
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	4619      	mov	r1, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	440b      	add	r3, r1
 800b5a0:	3230      	adds	r2, #48	; 0x30
 800b5a2:	b2d2      	uxtb	r2, r2
 800b5a4:	701a      	strb	r2, [r3, #0]
 800b5a6:	e00a      	b.n	800b5be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	0f1b      	lsrs	r3, r3, #28
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	440b      	add	r3, r1
 800b5b8:	3237      	adds	r2, #55	; 0x37
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	75fb      	strb	r3, [r7, #23]
 800b5d8:	7dfa      	ldrb	r2, [r7, #23]
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d3d3      	bcc.n	800b588 <IntToUnicode+0x18>
  }
}
 800b5e0:	bf00      	nop
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b60c:	d13a      	bne.n	800b684 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
 800b612:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	4a1d      	ldr	r2, [pc, #116]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b618:	f043 0301 	orr.w	r3, r3, #1
 800b61c:	6313      	str	r3, [r2, #48]	; 0x30
 800b61e:	4b1b      	ldr	r3, [pc, #108]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b62a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b62e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b630:	2302      	movs	r3, #2
 800b632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b634:	2300      	movs	r3, #0
 800b636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b638:	2303      	movs	r3, #3
 800b63a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b63c:	230a      	movs	r3, #10
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b640:	f107 0314 	add.w	r3, r7, #20
 800b644:	4619      	mov	r1, r3
 800b646:	4812      	ldr	r0, [pc, #72]	; (800b690 <HAL_PCD_MspInit+0xa4>)
 800b648:	f7f7 ff90 	bl	800356c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b64c:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	4a0e      	ldr	r2, [pc, #56]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b656:	6353      	str	r3, [r2, #52]	; 0x34
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
 800b65c:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b666:	6453      	str	r3, [r2, #68]	; 0x44
 800b668:	4b08      	ldr	r3, [pc, #32]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b66c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b674:	2200      	movs	r2, #0
 800b676:	2100      	movs	r1, #0
 800b678:	2043      	movs	r0, #67	; 0x43
 800b67a:	f7f7 fb5c 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b67e:	2043      	movs	r0, #67	; 0x43
 800b680:	f7f7 fb75 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b684:	bf00      	nop
 800b686:	3728      	adds	r7, #40	; 0x28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	40023800 	.word	0x40023800
 800b690:	40020000 	.word	0x40020000

0800b694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fe fd36 	bl	800a11c <USBD_LL_SetupStage>
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b6ca:	78fa      	ldrb	r2, [r7, #3]
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	f7fe fd6e 	bl	800a1c2 <USBD_LL_DataOutStage>
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	1a9b      	subs	r3, r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	3348      	adds	r3, #72	; 0x48
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	4619      	mov	r1, r3
 800b716:	f7fe fdb7 	bl	800a288 <USBD_LL_DataInStage>
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe febb 	bl	800a4ac <USBD_LL_SOF>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b746:	2301      	movs	r3, #1
 800b748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d001      	beq.n	800b756 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b752:	f7f5 fff9 	bl	8001748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b75c:	7bfa      	ldrb	r2, [r7, #15]
 800b75e:	4611      	mov	r1, r2
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fe68 	bl	800a436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fe21 	bl	800a3b4 <USBD_LL_Reset>
}
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe fe63 	bl	800a456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6812      	ldr	r2, [r2, #0]
 800b79e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7a2:	f043 0301 	orr.w	r3, r3, #1
 800b7a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7b0:	4b04      	ldr	r3, [pc, #16]	; (800b7c4 <HAL_PCD_SuspendCallback+0x48>)
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	4a03      	ldr	r2, [pc, #12]	; (800b7c4 <HAL_PCD_SuspendCallback+0x48>)
 800b7b6:	f043 0306 	orr.w	r3, r3, #6
 800b7ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7bc:	bf00      	nop
 800b7be:	3708      	adds	r7, #8
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	e000ed00 	.word	0xe000ed00

0800b7c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fe52 	bl	800a480 <USBD_LL_Resume>
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7f6:	78fa      	ldrb	r2, [r7, #3]
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fe7d 	bl	800a4fa <USBD_LL_IsoOUTIncomplete>
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b81a:	78fa      	ldrb	r2, [r7, #3]
 800b81c:	4611      	mov	r1, r2
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fe5e 	bl	800a4e0 <USBD_LL_IsoINIncomplete>
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe fe6a 	bl	800a514 <USBD_LL_DevConnected>
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fe67 	bl	800a52a <USBD_LL_DevDisconnected>
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d13c      	bne.n	800b8ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b874:	4a20      	ldr	r2, [pc, #128]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	4a1e      	ldr	r2, [pc, #120]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b880:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b884:	4b1c      	ldr	r3, [pc, #112]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b88a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b88c:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b88e:	2204      	movs	r2, #4
 800b890:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b892:	4b19      	ldr	r3, [pc, #100]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b894:	2202      	movs	r2, #2
 800b896:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b89e:	4b16      	ldr	r3, [pc, #88]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8a4:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8aa:	4b13      	ldr	r3, [pc, #76]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8b0:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8b6:	4b10      	ldr	r3, [pc, #64]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8c2:	480d      	ldr	r0, [pc, #52]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8c4:	f7fa fc6e 	bl	80061a4 <HAL_PCD_Init>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8ce:	f7f5 ff3b 	bl	8001748 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8d2:	2180      	movs	r1, #128	; 0x80
 800b8d4:	4808      	ldr	r0, [pc, #32]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8d6:	f7fb fdcc 	bl	8007472 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b8da:	2240      	movs	r2, #64	; 0x40
 800b8dc:	2100      	movs	r1, #0
 800b8de:	4806      	ldr	r0, [pc, #24]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8e0:	f7fb fd80 	bl	80073e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b8e4:	2280      	movs	r2, #128	; 0x80
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4803      	ldr	r0, [pc, #12]	; (800b8f8 <USBD_LL_Init+0x94>)
 800b8ea:	f7fb fd7b 	bl	80073e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20001968 	.word	0x20001968

0800b8fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b912:	4618      	mov	r0, r3
 800b914:	f7fa fd63 	bl	80063de <HAL_PCD_Start>
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	4618      	mov	r0, r3
 800b920:	f000 f92a 	bl	800bb78 <USBD_Get_USB_Status>
 800b924:	4603      	mov	r3, r0
 800b926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b928:	7bbb      	ldrb	r3, [r7, #14]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	4608      	mov	r0, r1
 800b93c:	4611      	mov	r1, r2
 800b93e:	461a      	mov	r2, r3
 800b940:	4603      	mov	r3, r0
 800b942:	70fb      	strb	r3, [r7, #3]
 800b944:	460b      	mov	r3, r1
 800b946:	70bb      	strb	r3, [r7, #2]
 800b948:	4613      	mov	r3, r2
 800b94a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b95a:	78bb      	ldrb	r3, [r7, #2]
 800b95c:	883a      	ldrh	r2, [r7, #0]
 800b95e:	78f9      	ldrb	r1, [r7, #3]
 800b960:	f7fb f947 	bl	8006bf2 <HAL_PCD_EP_Open>
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b968:	7bfb      	ldrb	r3, [r7, #15]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 f904 	bl	800bb78 <USBD_Get_USB_Status>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b974:	7bbb      	ldrb	r3, [r7, #14]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b084      	sub	sp, #16
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
 800b986:	460b      	mov	r3, r1
 800b988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	4611      	mov	r1, r2
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fb f990 	bl	8006cc2 <HAL_PCD_EP_Close>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 f8e5 	bl	800bb78 <USBD_Get_USB_Status>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9d6:	78fa      	ldrb	r2, [r7, #3]
 800b9d8:	4611      	mov	r1, r2
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fb fa68 	bl	8006eb0 <HAL_PCD_EP_SetStall>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 f8c6 	bl	800bb78 <USBD_Get_USB_Status>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba14:	78fa      	ldrb	r2, [r7, #3]
 800ba16:	4611      	mov	r1, r2
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fb faad 	bl	8006f78 <HAL_PCD_EP_ClrStall>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 f8a7 	bl	800bb78 <USBD_Get_USB_Status>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	da0b      	bge.n	800ba6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba5a:	68f9      	ldr	r1, [r7, #12]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	00db      	lsls	r3, r3, #3
 800ba60:	1a9b      	subs	r3, r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	440b      	add	r3, r1
 800ba66:	333e      	adds	r3, #62	; 0x3e
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	e00b      	b.n	800ba84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	4613      	mov	r3, r2
 800ba76:	00db      	lsls	r3, r3, #3
 800ba78:	1a9b      	subs	r3, r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	440b      	add	r3, r1
 800ba7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3714      	adds	r7, #20
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fb f87a 	bl	8006ba8 <HAL_PCD_SetAddress>
 800bab4:	4603      	mov	r3, r0
 800bab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 f85c 	bl	800bb78 <USBD_Get_USB_Status>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b086      	sub	sp, #24
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	603b      	str	r3, [r7, #0]
 800bada:	460b      	mov	r3, r1
 800badc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bade:	2300      	movs	r3, #0
 800bae0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800baec:	7af9      	ldrb	r1, [r7, #11]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	f7fb f993 	bl	8006e1c <HAL_PCD_EP_Transmit>
 800baf6:	4603      	mov	r3, r0
 800baf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 f83b 	bl	800bb78 <USBD_Get_USB_Status>
 800bb02:	4603      	mov	r3, r0
 800bb04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb06:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	607a      	str	r2, [r7, #4]
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb2e:	7af9      	ldrb	r1, [r7, #11]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	f7fb f90f 	bl	8006d56 <HAL_PCD_EP_Receive>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f000 f81a 	bl	800bb78 <USBD_Get_USB_Status>
 800bb44:	4603      	mov	r3, r0
 800bb46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb48:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb64:	78fa      	ldrb	r2, [r7, #3]
 800bb66:	4611      	mov	r1, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fb f93f 	bl	8006dec <HAL_PCD_EP_GetRxCount>
 800bb6e:	4603      	mov	r3, r0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d817      	bhi.n	800bbbc <USBD_Get_USB_Status+0x44>
 800bb8c:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <USBD_Get_USB_Status+0x1c>)
 800bb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb92:	bf00      	nop
 800bb94:	0800bba5 	.word	0x0800bba5
 800bb98:	0800bbab 	.word	0x0800bbab
 800bb9c:	0800bbb1 	.word	0x0800bbb1
 800bba0:	0800bbb7 	.word	0x0800bbb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
    break;
 800bba8:	e00b      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	73fb      	strb	r3, [r7, #15]
    break;
 800bbae:	e008      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbb4:	e005      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bbba:	e002      	b.n	800bbc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bbc0:	bf00      	nop
  }
  return usb_status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <__errno>:
 800bbd0:	4b01      	ldr	r3, [pc, #4]	; (800bbd8 <__errno+0x8>)
 800bbd2:	6818      	ldr	r0, [r3, #0]
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	20000210 	.word	0x20000210

0800bbdc <__libc_init_array>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	4e0d      	ldr	r6, [pc, #52]	; (800bc14 <__libc_init_array+0x38>)
 800bbe0:	4c0d      	ldr	r4, [pc, #52]	; (800bc18 <__libc_init_array+0x3c>)
 800bbe2:	1ba4      	subs	r4, r4, r6
 800bbe4:	10a4      	asrs	r4, r4, #2
 800bbe6:	2500      	movs	r5, #0
 800bbe8:	42a5      	cmp	r5, r4
 800bbea:	d109      	bne.n	800bc00 <__libc_init_array+0x24>
 800bbec:	4e0b      	ldr	r6, [pc, #44]	; (800bc1c <__libc_init_array+0x40>)
 800bbee:	4c0c      	ldr	r4, [pc, #48]	; (800bc20 <__libc_init_array+0x44>)
 800bbf0:	f000 ffce 	bl	800cb90 <_init>
 800bbf4:	1ba4      	subs	r4, r4, r6
 800bbf6:	10a4      	asrs	r4, r4, #2
 800bbf8:	2500      	movs	r5, #0
 800bbfa:	42a5      	cmp	r5, r4
 800bbfc:	d105      	bne.n	800bc0a <__libc_init_array+0x2e>
 800bbfe:	bd70      	pop	{r4, r5, r6, pc}
 800bc00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc04:	4798      	blx	r3
 800bc06:	3501      	adds	r5, #1
 800bc08:	e7ee      	b.n	800bbe8 <__libc_init_array+0xc>
 800bc0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc0e:	4798      	blx	r3
 800bc10:	3501      	adds	r5, #1
 800bc12:	e7f2      	b.n	800bbfa <__libc_init_array+0x1e>
 800bc14:	0800cce8 	.word	0x0800cce8
 800bc18:	0800cce8 	.word	0x0800cce8
 800bc1c:	0800cce8 	.word	0x0800cce8
 800bc20:	0800ccec 	.word	0x0800ccec

0800bc24 <malloc>:
 800bc24:	4b02      	ldr	r3, [pc, #8]	; (800bc30 <malloc+0xc>)
 800bc26:	4601      	mov	r1, r0
 800bc28:	6818      	ldr	r0, [r3, #0]
 800bc2a:	f000 b861 	b.w	800bcf0 <_malloc_r>
 800bc2e:	bf00      	nop
 800bc30:	20000210 	.word	0x20000210

0800bc34 <free>:
 800bc34:	4b02      	ldr	r3, [pc, #8]	; (800bc40 <free+0xc>)
 800bc36:	4601      	mov	r1, r0
 800bc38:	6818      	ldr	r0, [r3, #0]
 800bc3a:	f000 b80b 	b.w	800bc54 <_free_r>
 800bc3e:	bf00      	nop
 800bc40:	20000210 	.word	0x20000210

0800bc44 <memset>:
 800bc44:	4402      	add	r2, r0
 800bc46:	4603      	mov	r3, r0
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d100      	bne.n	800bc4e <memset+0xa>
 800bc4c:	4770      	bx	lr
 800bc4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc52:	e7f9      	b.n	800bc48 <memset+0x4>

0800bc54 <_free_r>:
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4605      	mov	r5, r0
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	d045      	beq.n	800bce8 <_free_r+0x94>
 800bc5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc60:	1f0c      	subs	r4, r1, #4
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bfb8      	it	lt
 800bc66:	18e4      	addlt	r4, r4, r3
 800bc68:	f000 f8cc 	bl	800be04 <__malloc_lock>
 800bc6c:	4a1f      	ldr	r2, [pc, #124]	; (800bcec <_free_r+0x98>)
 800bc6e:	6813      	ldr	r3, [r2, #0]
 800bc70:	4610      	mov	r0, r2
 800bc72:	b933      	cbnz	r3, 800bc82 <_free_r+0x2e>
 800bc74:	6063      	str	r3, [r4, #4]
 800bc76:	6014      	str	r4, [r2, #0]
 800bc78:	4628      	mov	r0, r5
 800bc7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc7e:	f000 b8c2 	b.w	800be06 <__malloc_unlock>
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	d90c      	bls.n	800bca0 <_free_r+0x4c>
 800bc86:	6821      	ldr	r1, [r4, #0]
 800bc88:	1862      	adds	r2, r4, r1
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	bf04      	itt	eq
 800bc8e:	681a      	ldreq	r2, [r3, #0]
 800bc90:	685b      	ldreq	r3, [r3, #4]
 800bc92:	6063      	str	r3, [r4, #4]
 800bc94:	bf04      	itt	eq
 800bc96:	1852      	addeq	r2, r2, r1
 800bc98:	6022      	streq	r2, [r4, #0]
 800bc9a:	6004      	str	r4, [r0, #0]
 800bc9c:	e7ec      	b.n	800bc78 <_free_r+0x24>
 800bc9e:	4613      	mov	r3, r2
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	b10a      	cbz	r2, 800bca8 <_free_r+0x54>
 800bca4:	42a2      	cmp	r2, r4
 800bca6:	d9fa      	bls.n	800bc9e <_free_r+0x4a>
 800bca8:	6819      	ldr	r1, [r3, #0]
 800bcaa:	1858      	adds	r0, r3, r1
 800bcac:	42a0      	cmp	r0, r4
 800bcae:	d10b      	bne.n	800bcc8 <_free_r+0x74>
 800bcb0:	6820      	ldr	r0, [r4, #0]
 800bcb2:	4401      	add	r1, r0
 800bcb4:	1858      	adds	r0, r3, r1
 800bcb6:	4282      	cmp	r2, r0
 800bcb8:	6019      	str	r1, [r3, #0]
 800bcba:	d1dd      	bne.n	800bc78 <_free_r+0x24>
 800bcbc:	6810      	ldr	r0, [r2, #0]
 800bcbe:	6852      	ldr	r2, [r2, #4]
 800bcc0:	605a      	str	r2, [r3, #4]
 800bcc2:	4401      	add	r1, r0
 800bcc4:	6019      	str	r1, [r3, #0]
 800bcc6:	e7d7      	b.n	800bc78 <_free_r+0x24>
 800bcc8:	d902      	bls.n	800bcd0 <_free_r+0x7c>
 800bcca:	230c      	movs	r3, #12
 800bccc:	602b      	str	r3, [r5, #0]
 800bcce:	e7d3      	b.n	800bc78 <_free_r+0x24>
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	1821      	adds	r1, r4, r0
 800bcd4:	428a      	cmp	r2, r1
 800bcd6:	bf04      	itt	eq
 800bcd8:	6811      	ldreq	r1, [r2, #0]
 800bcda:	6852      	ldreq	r2, [r2, #4]
 800bcdc:	6062      	str	r2, [r4, #4]
 800bcde:	bf04      	itt	eq
 800bce0:	1809      	addeq	r1, r1, r0
 800bce2:	6021      	streq	r1, [r4, #0]
 800bce4:	605c      	str	r4, [r3, #4]
 800bce6:	e7c7      	b.n	800bc78 <_free_r+0x24>
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	200002c0 	.word	0x200002c0

0800bcf0 <_malloc_r>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	1ccd      	adds	r5, r1, #3
 800bcf4:	f025 0503 	bic.w	r5, r5, #3
 800bcf8:	3508      	adds	r5, #8
 800bcfa:	2d0c      	cmp	r5, #12
 800bcfc:	bf38      	it	cc
 800bcfe:	250c      	movcc	r5, #12
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	4606      	mov	r6, r0
 800bd04:	db01      	blt.n	800bd0a <_malloc_r+0x1a>
 800bd06:	42a9      	cmp	r1, r5
 800bd08:	d903      	bls.n	800bd12 <_malloc_r+0x22>
 800bd0a:	230c      	movs	r3, #12
 800bd0c:	6033      	str	r3, [r6, #0]
 800bd0e:	2000      	movs	r0, #0
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	f000 f877 	bl	800be04 <__malloc_lock>
 800bd16:	4a21      	ldr	r2, [pc, #132]	; (800bd9c <_malloc_r+0xac>)
 800bd18:	6814      	ldr	r4, [r2, #0]
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	b991      	cbnz	r1, 800bd44 <_malloc_r+0x54>
 800bd1e:	4c20      	ldr	r4, [pc, #128]	; (800bda0 <_malloc_r+0xb0>)
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	b91b      	cbnz	r3, 800bd2c <_malloc_r+0x3c>
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 f83d 	bl	800bda4 <_sbrk_r>
 800bd2a:	6020      	str	r0, [r4, #0]
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f000 f838 	bl	800bda4 <_sbrk_r>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d124      	bne.n	800bd82 <_malloc_r+0x92>
 800bd38:	230c      	movs	r3, #12
 800bd3a:	6033      	str	r3, [r6, #0]
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f000 f862 	bl	800be06 <__malloc_unlock>
 800bd42:	e7e4      	b.n	800bd0e <_malloc_r+0x1e>
 800bd44:	680b      	ldr	r3, [r1, #0]
 800bd46:	1b5b      	subs	r3, r3, r5
 800bd48:	d418      	bmi.n	800bd7c <_malloc_r+0x8c>
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d90f      	bls.n	800bd6e <_malloc_r+0x7e>
 800bd4e:	600b      	str	r3, [r1, #0]
 800bd50:	50cd      	str	r5, [r1, r3]
 800bd52:	18cc      	adds	r4, r1, r3
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 f856 	bl	800be06 <__malloc_unlock>
 800bd5a:	f104 000b 	add.w	r0, r4, #11
 800bd5e:	1d23      	adds	r3, r4, #4
 800bd60:	f020 0007 	bic.w	r0, r0, #7
 800bd64:	1ac3      	subs	r3, r0, r3
 800bd66:	d0d3      	beq.n	800bd10 <_malloc_r+0x20>
 800bd68:	425a      	negs	r2, r3
 800bd6a:	50e2      	str	r2, [r4, r3]
 800bd6c:	e7d0      	b.n	800bd10 <_malloc_r+0x20>
 800bd6e:	428c      	cmp	r4, r1
 800bd70:	684b      	ldr	r3, [r1, #4]
 800bd72:	bf16      	itet	ne
 800bd74:	6063      	strne	r3, [r4, #4]
 800bd76:	6013      	streq	r3, [r2, #0]
 800bd78:	460c      	movne	r4, r1
 800bd7a:	e7eb      	b.n	800bd54 <_malloc_r+0x64>
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	6849      	ldr	r1, [r1, #4]
 800bd80:	e7cc      	b.n	800bd1c <_malloc_r+0x2c>
 800bd82:	1cc4      	adds	r4, r0, #3
 800bd84:	f024 0403 	bic.w	r4, r4, #3
 800bd88:	42a0      	cmp	r0, r4
 800bd8a:	d005      	beq.n	800bd98 <_malloc_r+0xa8>
 800bd8c:	1a21      	subs	r1, r4, r0
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f000 f808 	bl	800bda4 <_sbrk_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	d0cf      	beq.n	800bd38 <_malloc_r+0x48>
 800bd98:	6025      	str	r5, [r4, #0]
 800bd9a:	e7db      	b.n	800bd54 <_malloc_r+0x64>
 800bd9c:	200002c0 	.word	0x200002c0
 800bda0:	200002c4 	.word	0x200002c4

0800bda4 <_sbrk_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4c06      	ldr	r4, [pc, #24]	; (800bdc0 <_sbrk_r+0x1c>)
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4605      	mov	r5, r0
 800bdac:	4608      	mov	r0, r1
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	f7f6 f936 	bl	8002020 <_sbrk>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d102      	bne.n	800bdbe <_sbrk_r+0x1a>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	b103      	cbz	r3, 800bdbe <_sbrk_r+0x1a>
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	20001d70 	.word	0x20001d70

0800bdc4 <siprintf>:
 800bdc4:	b40e      	push	{r1, r2, r3}
 800bdc6:	b500      	push	{lr}
 800bdc8:	b09c      	sub	sp, #112	; 0x70
 800bdca:	ab1d      	add	r3, sp, #116	; 0x74
 800bdcc:	9002      	str	r0, [sp, #8]
 800bdce:	9006      	str	r0, [sp, #24]
 800bdd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdd4:	4809      	ldr	r0, [pc, #36]	; (800bdfc <siprintf+0x38>)
 800bdd6:	9107      	str	r1, [sp, #28]
 800bdd8:	9104      	str	r1, [sp, #16]
 800bdda:	4909      	ldr	r1, [pc, #36]	; (800be00 <siprintf+0x3c>)
 800bddc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde0:	9105      	str	r1, [sp, #20]
 800bde2:	6800      	ldr	r0, [r0, #0]
 800bde4:	9301      	str	r3, [sp, #4]
 800bde6:	a902      	add	r1, sp, #8
 800bde8:	f000 f868 	bl	800bebc <_svfiprintf_r>
 800bdec:	9b02      	ldr	r3, [sp, #8]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
 800bdf2:	b01c      	add	sp, #112	; 0x70
 800bdf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdf8:	b003      	add	sp, #12
 800bdfa:	4770      	bx	lr
 800bdfc:	20000210 	.word	0x20000210
 800be00:	ffff0208 	.word	0xffff0208

0800be04 <__malloc_lock>:
 800be04:	4770      	bx	lr

0800be06 <__malloc_unlock>:
 800be06:	4770      	bx	lr

0800be08 <__ssputs_r>:
 800be08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be0c:	688e      	ldr	r6, [r1, #8]
 800be0e:	429e      	cmp	r6, r3
 800be10:	4682      	mov	sl, r0
 800be12:	460c      	mov	r4, r1
 800be14:	4690      	mov	r8, r2
 800be16:	4699      	mov	r9, r3
 800be18:	d837      	bhi.n	800be8a <__ssputs_r+0x82>
 800be1a:	898a      	ldrh	r2, [r1, #12]
 800be1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be20:	d031      	beq.n	800be86 <__ssputs_r+0x7e>
 800be22:	6825      	ldr	r5, [r4, #0]
 800be24:	6909      	ldr	r1, [r1, #16]
 800be26:	1a6f      	subs	r7, r5, r1
 800be28:	6965      	ldr	r5, [r4, #20]
 800be2a:	2302      	movs	r3, #2
 800be2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be30:	fb95 f5f3 	sdiv	r5, r5, r3
 800be34:	f109 0301 	add.w	r3, r9, #1
 800be38:	443b      	add	r3, r7
 800be3a:	429d      	cmp	r5, r3
 800be3c:	bf38      	it	cc
 800be3e:	461d      	movcc	r5, r3
 800be40:	0553      	lsls	r3, r2, #21
 800be42:	d530      	bpl.n	800bea6 <__ssputs_r+0x9e>
 800be44:	4629      	mov	r1, r5
 800be46:	f7ff ff53 	bl	800bcf0 <_malloc_r>
 800be4a:	4606      	mov	r6, r0
 800be4c:	b950      	cbnz	r0, 800be64 <__ssputs_r+0x5c>
 800be4e:	230c      	movs	r3, #12
 800be50:	f8ca 3000 	str.w	r3, [sl]
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be5a:	81a3      	strh	r3, [r4, #12]
 800be5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be64:	463a      	mov	r2, r7
 800be66:	6921      	ldr	r1, [r4, #16]
 800be68:	f000 faa8 	bl	800c3bc <memcpy>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	6126      	str	r6, [r4, #16]
 800be7a:	6165      	str	r5, [r4, #20]
 800be7c:	443e      	add	r6, r7
 800be7e:	1bed      	subs	r5, r5, r7
 800be80:	6026      	str	r6, [r4, #0]
 800be82:	60a5      	str	r5, [r4, #8]
 800be84:	464e      	mov	r6, r9
 800be86:	454e      	cmp	r6, r9
 800be88:	d900      	bls.n	800be8c <__ssputs_r+0x84>
 800be8a:	464e      	mov	r6, r9
 800be8c:	4632      	mov	r2, r6
 800be8e:	4641      	mov	r1, r8
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	f000 fa9e 	bl	800c3d2 <memmove>
 800be96:	68a3      	ldr	r3, [r4, #8]
 800be98:	1b9b      	subs	r3, r3, r6
 800be9a:	60a3      	str	r3, [r4, #8]
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	441e      	add	r6, r3
 800bea0:	6026      	str	r6, [r4, #0]
 800bea2:	2000      	movs	r0, #0
 800bea4:	e7dc      	b.n	800be60 <__ssputs_r+0x58>
 800bea6:	462a      	mov	r2, r5
 800bea8:	f000 faac 	bl	800c404 <_realloc_r>
 800beac:	4606      	mov	r6, r0
 800beae:	2800      	cmp	r0, #0
 800beb0:	d1e2      	bne.n	800be78 <__ssputs_r+0x70>
 800beb2:	6921      	ldr	r1, [r4, #16]
 800beb4:	4650      	mov	r0, sl
 800beb6:	f7ff fecd 	bl	800bc54 <_free_r>
 800beba:	e7c8      	b.n	800be4e <__ssputs_r+0x46>

0800bebc <_svfiprintf_r>:
 800bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	461d      	mov	r5, r3
 800bec2:	898b      	ldrh	r3, [r1, #12]
 800bec4:	061f      	lsls	r7, r3, #24
 800bec6:	b09d      	sub	sp, #116	; 0x74
 800bec8:	4680      	mov	r8, r0
 800beca:	460c      	mov	r4, r1
 800becc:	4616      	mov	r6, r2
 800bece:	d50f      	bpl.n	800bef0 <_svfiprintf_r+0x34>
 800bed0:	690b      	ldr	r3, [r1, #16]
 800bed2:	b96b      	cbnz	r3, 800bef0 <_svfiprintf_r+0x34>
 800bed4:	2140      	movs	r1, #64	; 0x40
 800bed6:	f7ff ff0b 	bl	800bcf0 <_malloc_r>
 800beda:	6020      	str	r0, [r4, #0]
 800bedc:	6120      	str	r0, [r4, #16]
 800bede:	b928      	cbnz	r0, 800beec <_svfiprintf_r+0x30>
 800bee0:	230c      	movs	r3, #12
 800bee2:	f8c8 3000 	str.w	r3, [r8]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beea:	e0c8      	b.n	800c07e <_svfiprintf_r+0x1c2>
 800beec:	2340      	movs	r3, #64	; 0x40
 800beee:	6163      	str	r3, [r4, #20]
 800bef0:	2300      	movs	r3, #0
 800bef2:	9309      	str	r3, [sp, #36]	; 0x24
 800bef4:	2320      	movs	r3, #32
 800bef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800befa:	2330      	movs	r3, #48	; 0x30
 800befc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf00:	9503      	str	r5, [sp, #12]
 800bf02:	f04f 0b01 	mov.w	fp, #1
 800bf06:	4637      	mov	r7, r6
 800bf08:	463d      	mov	r5, r7
 800bf0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf0e:	b10b      	cbz	r3, 800bf14 <_svfiprintf_r+0x58>
 800bf10:	2b25      	cmp	r3, #37	; 0x25
 800bf12:	d13e      	bne.n	800bf92 <_svfiprintf_r+0xd6>
 800bf14:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf18:	d00b      	beq.n	800bf32 <_svfiprintf_r+0x76>
 800bf1a:	4653      	mov	r3, sl
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4640      	mov	r0, r8
 800bf22:	f7ff ff71 	bl	800be08 <__ssputs_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	f000 80a4 	beq.w	800c074 <_svfiprintf_r+0x1b8>
 800bf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2e:	4453      	add	r3, sl
 800bf30:	9309      	str	r3, [sp, #36]	; 0x24
 800bf32:	783b      	ldrb	r3, [r7, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 809d 	beq.w	800c074 <_svfiprintf_r+0x1b8>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	9307      	str	r3, [sp, #28]
 800bf48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf4c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf4e:	462f      	mov	r7, r5
 800bf50:	2205      	movs	r2, #5
 800bf52:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf56:	4850      	ldr	r0, [pc, #320]	; (800c098 <_svfiprintf_r+0x1dc>)
 800bf58:	f7f4 f942 	bl	80001e0 <memchr>
 800bf5c:	9b04      	ldr	r3, [sp, #16]
 800bf5e:	b9d0      	cbnz	r0, 800bf96 <_svfiprintf_r+0xda>
 800bf60:	06d9      	lsls	r1, r3, #27
 800bf62:	bf44      	itt	mi
 800bf64:	2220      	movmi	r2, #32
 800bf66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf6a:	071a      	lsls	r2, r3, #28
 800bf6c:	bf44      	itt	mi
 800bf6e:	222b      	movmi	r2, #43	; 0x2b
 800bf70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf74:	782a      	ldrb	r2, [r5, #0]
 800bf76:	2a2a      	cmp	r2, #42	; 0x2a
 800bf78:	d015      	beq.n	800bfa6 <_svfiprintf_r+0xea>
 800bf7a:	9a07      	ldr	r2, [sp, #28]
 800bf7c:	462f      	mov	r7, r5
 800bf7e:	2000      	movs	r0, #0
 800bf80:	250a      	movs	r5, #10
 800bf82:	4639      	mov	r1, r7
 800bf84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf88:	3b30      	subs	r3, #48	; 0x30
 800bf8a:	2b09      	cmp	r3, #9
 800bf8c:	d94d      	bls.n	800c02a <_svfiprintf_r+0x16e>
 800bf8e:	b1b8      	cbz	r0, 800bfc0 <_svfiprintf_r+0x104>
 800bf90:	e00f      	b.n	800bfb2 <_svfiprintf_r+0xf6>
 800bf92:	462f      	mov	r7, r5
 800bf94:	e7b8      	b.n	800bf08 <_svfiprintf_r+0x4c>
 800bf96:	4a40      	ldr	r2, [pc, #256]	; (800c098 <_svfiprintf_r+0x1dc>)
 800bf98:	1a80      	subs	r0, r0, r2
 800bf9a:	fa0b f000 	lsl.w	r0, fp, r0
 800bf9e:	4318      	orrs	r0, r3
 800bfa0:	9004      	str	r0, [sp, #16]
 800bfa2:	463d      	mov	r5, r7
 800bfa4:	e7d3      	b.n	800bf4e <_svfiprintf_r+0x92>
 800bfa6:	9a03      	ldr	r2, [sp, #12]
 800bfa8:	1d11      	adds	r1, r2, #4
 800bfaa:	6812      	ldr	r2, [r2, #0]
 800bfac:	9103      	str	r1, [sp, #12]
 800bfae:	2a00      	cmp	r2, #0
 800bfb0:	db01      	blt.n	800bfb6 <_svfiprintf_r+0xfa>
 800bfb2:	9207      	str	r2, [sp, #28]
 800bfb4:	e004      	b.n	800bfc0 <_svfiprintf_r+0x104>
 800bfb6:	4252      	negs	r2, r2
 800bfb8:	f043 0302 	orr.w	r3, r3, #2
 800bfbc:	9207      	str	r2, [sp, #28]
 800bfbe:	9304      	str	r3, [sp, #16]
 800bfc0:	783b      	ldrb	r3, [r7, #0]
 800bfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bfc4:	d10c      	bne.n	800bfe0 <_svfiprintf_r+0x124>
 800bfc6:	787b      	ldrb	r3, [r7, #1]
 800bfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfca:	d133      	bne.n	800c034 <_svfiprintf_r+0x178>
 800bfcc:	9b03      	ldr	r3, [sp, #12]
 800bfce:	1d1a      	adds	r2, r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	9203      	str	r2, [sp, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bfb8      	it	lt
 800bfd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfdc:	3702      	adds	r7, #2
 800bfde:	9305      	str	r3, [sp, #20]
 800bfe0:	4d2e      	ldr	r5, [pc, #184]	; (800c09c <_svfiprintf_r+0x1e0>)
 800bfe2:	7839      	ldrb	r1, [r7, #0]
 800bfe4:	2203      	movs	r2, #3
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f7f4 f8fa 	bl	80001e0 <memchr>
 800bfec:	b138      	cbz	r0, 800bffe <_svfiprintf_r+0x142>
 800bfee:	2340      	movs	r3, #64	; 0x40
 800bff0:	1b40      	subs	r0, r0, r5
 800bff2:	fa03 f000 	lsl.w	r0, r3, r0
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	4303      	orrs	r3, r0
 800bffa:	3701      	adds	r7, #1
 800bffc:	9304      	str	r3, [sp, #16]
 800bffe:	7839      	ldrb	r1, [r7, #0]
 800c000:	4827      	ldr	r0, [pc, #156]	; (800c0a0 <_svfiprintf_r+0x1e4>)
 800c002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c006:	2206      	movs	r2, #6
 800c008:	1c7e      	adds	r6, r7, #1
 800c00a:	f7f4 f8e9 	bl	80001e0 <memchr>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d038      	beq.n	800c084 <_svfiprintf_r+0x1c8>
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <_svfiprintf_r+0x1e8>)
 800c014:	bb13      	cbnz	r3, 800c05c <_svfiprintf_r+0x1a0>
 800c016:	9b03      	ldr	r3, [sp, #12]
 800c018:	3307      	adds	r3, #7
 800c01a:	f023 0307 	bic.w	r3, r3, #7
 800c01e:	3308      	adds	r3, #8
 800c020:	9303      	str	r3, [sp, #12]
 800c022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c024:	444b      	add	r3, r9
 800c026:	9309      	str	r3, [sp, #36]	; 0x24
 800c028:	e76d      	b.n	800bf06 <_svfiprintf_r+0x4a>
 800c02a:	fb05 3202 	mla	r2, r5, r2, r3
 800c02e:	2001      	movs	r0, #1
 800c030:	460f      	mov	r7, r1
 800c032:	e7a6      	b.n	800bf82 <_svfiprintf_r+0xc6>
 800c034:	2300      	movs	r3, #0
 800c036:	3701      	adds	r7, #1
 800c038:	9305      	str	r3, [sp, #20]
 800c03a:	4619      	mov	r1, r3
 800c03c:	250a      	movs	r5, #10
 800c03e:	4638      	mov	r0, r7
 800c040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c044:	3a30      	subs	r2, #48	; 0x30
 800c046:	2a09      	cmp	r2, #9
 800c048:	d903      	bls.n	800c052 <_svfiprintf_r+0x196>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0c8      	beq.n	800bfe0 <_svfiprintf_r+0x124>
 800c04e:	9105      	str	r1, [sp, #20]
 800c050:	e7c6      	b.n	800bfe0 <_svfiprintf_r+0x124>
 800c052:	fb05 2101 	mla	r1, r5, r1, r2
 800c056:	2301      	movs	r3, #1
 800c058:	4607      	mov	r7, r0
 800c05a:	e7f0      	b.n	800c03e <_svfiprintf_r+0x182>
 800c05c:	ab03      	add	r3, sp, #12
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	4622      	mov	r2, r4
 800c062:	4b11      	ldr	r3, [pc, #68]	; (800c0a8 <_svfiprintf_r+0x1ec>)
 800c064:	a904      	add	r1, sp, #16
 800c066:	4640      	mov	r0, r8
 800c068:	f3af 8000 	nop.w
 800c06c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c070:	4681      	mov	r9, r0
 800c072:	d1d6      	bne.n	800c022 <_svfiprintf_r+0x166>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	065b      	lsls	r3, r3, #25
 800c078:	f53f af35 	bmi.w	800bee6 <_svfiprintf_r+0x2a>
 800c07c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c07e:	b01d      	add	sp, #116	; 0x74
 800c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c084:	ab03      	add	r3, sp, #12
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	4622      	mov	r2, r4
 800c08a:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <_svfiprintf_r+0x1ec>)
 800c08c:	a904      	add	r1, sp, #16
 800c08e:	4640      	mov	r0, r8
 800c090:	f000 f882 	bl	800c198 <_printf_i>
 800c094:	e7ea      	b.n	800c06c <_svfiprintf_r+0x1b0>
 800c096:	bf00      	nop
 800c098:	0800cc64 	.word	0x0800cc64
 800c09c:	0800cc6a 	.word	0x0800cc6a
 800c0a0:	0800cc6e 	.word	0x0800cc6e
 800c0a4:	00000000 	.word	0x00000000
 800c0a8:	0800be09 	.word	0x0800be09

0800c0ac <_printf_common>:
 800c0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b0:	4691      	mov	r9, r2
 800c0b2:	461f      	mov	r7, r3
 800c0b4:	688a      	ldr	r2, [r1, #8]
 800c0b6:	690b      	ldr	r3, [r1, #16]
 800c0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	bfb8      	it	lt
 800c0c0:	4613      	movlt	r3, r2
 800c0c2:	f8c9 3000 	str.w	r3, [r9]
 800c0c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	b112      	cbz	r2, 800c0d6 <_printf_common+0x2a>
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	f8c9 3000 	str.w	r3, [r9]
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	0699      	lsls	r1, r3, #26
 800c0da:	bf42      	ittt	mi
 800c0dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c0e0:	3302      	addmi	r3, #2
 800c0e2:	f8c9 3000 	strmi.w	r3, [r9]
 800c0e6:	6825      	ldr	r5, [r4, #0]
 800c0e8:	f015 0506 	ands.w	r5, r5, #6
 800c0ec:	d107      	bne.n	800c0fe <_printf_common+0x52>
 800c0ee:	f104 0a19 	add.w	sl, r4, #25
 800c0f2:	68e3      	ldr	r3, [r4, #12]
 800c0f4:	f8d9 2000 	ldr.w	r2, [r9]
 800c0f8:	1a9b      	subs	r3, r3, r2
 800c0fa:	42ab      	cmp	r3, r5
 800c0fc:	dc28      	bgt.n	800c150 <_printf_common+0xa4>
 800c0fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c102:	6822      	ldr	r2, [r4, #0]
 800c104:	3300      	adds	r3, #0
 800c106:	bf18      	it	ne
 800c108:	2301      	movne	r3, #1
 800c10a:	0692      	lsls	r2, r2, #26
 800c10c:	d42d      	bmi.n	800c16a <_printf_common+0xbe>
 800c10e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c112:	4639      	mov	r1, r7
 800c114:	4630      	mov	r0, r6
 800c116:	47c0      	blx	r8
 800c118:	3001      	adds	r0, #1
 800c11a:	d020      	beq.n	800c15e <_printf_common+0xb2>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	68e5      	ldr	r5, [r4, #12]
 800c120:	f8d9 2000 	ldr.w	r2, [r9]
 800c124:	f003 0306 	and.w	r3, r3, #6
 800c128:	2b04      	cmp	r3, #4
 800c12a:	bf08      	it	eq
 800c12c:	1aad      	subeq	r5, r5, r2
 800c12e:	68a3      	ldr	r3, [r4, #8]
 800c130:	6922      	ldr	r2, [r4, #16]
 800c132:	bf0c      	ite	eq
 800c134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c138:	2500      	movne	r5, #0
 800c13a:	4293      	cmp	r3, r2
 800c13c:	bfc4      	itt	gt
 800c13e:	1a9b      	subgt	r3, r3, r2
 800c140:	18ed      	addgt	r5, r5, r3
 800c142:	f04f 0900 	mov.w	r9, #0
 800c146:	341a      	adds	r4, #26
 800c148:	454d      	cmp	r5, r9
 800c14a:	d11a      	bne.n	800c182 <_printf_common+0xd6>
 800c14c:	2000      	movs	r0, #0
 800c14e:	e008      	b.n	800c162 <_printf_common+0xb6>
 800c150:	2301      	movs	r3, #1
 800c152:	4652      	mov	r2, sl
 800c154:	4639      	mov	r1, r7
 800c156:	4630      	mov	r0, r6
 800c158:	47c0      	blx	r8
 800c15a:	3001      	adds	r0, #1
 800c15c:	d103      	bne.n	800c166 <_printf_common+0xba>
 800c15e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c166:	3501      	adds	r5, #1
 800c168:	e7c3      	b.n	800c0f2 <_printf_common+0x46>
 800c16a:	18e1      	adds	r1, r4, r3
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	2030      	movs	r0, #48	; 0x30
 800c170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c174:	4422      	add	r2, r4
 800c176:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c17a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c17e:	3302      	adds	r3, #2
 800c180:	e7c5      	b.n	800c10e <_printf_common+0x62>
 800c182:	2301      	movs	r3, #1
 800c184:	4622      	mov	r2, r4
 800c186:	4639      	mov	r1, r7
 800c188:	4630      	mov	r0, r6
 800c18a:	47c0      	blx	r8
 800c18c:	3001      	adds	r0, #1
 800c18e:	d0e6      	beq.n	800c15e <_printf_common+0xb2>
 800c190:	f109 0901 	add.w	r9, r9, #1
 800c194:	e7d8      	b.n	800c148 <_printf_common+0x9c>
	...

0800c198 <_printf_i>:
 800c198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c19c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	7e09      	ldrb	r1, [r1, #24]
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	296e      	cmp	r1, #110	; 0x6e
 800c1a8:	4617      	mov	r7, r2
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	4698      	mov	r8, r3
 800c1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1b0:	f000 80b3 	beq.w	800c31a <_printf_i+0x182>
 800c1b4:	d822      	bhi.n	800c1fc <_printf_i+0x64>
 800c1b6:	2963      	cmp	r1, #99	; 0x63
 800c1b8:	d036      	beq.n	800c228 <_printf_i+0x90>
 800c1ba:	d80a      	bhi.n	800c1d2 <_printf_i+0x3a>
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	f000 80b9 	beq.w	800c334 <_printf_i+0x19c>
 800c1c2:	2958      	cmp	r1, #88	; 0x58
 800c1c4:	f000 8083 	beq.w	800c2ce <_printf_i+0x136>
 800c1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c1d0:	e032      	b.n	800c238 <_printf_i+0xa0>
 800c1d2:	2964      	cmp	r1, #100	; 0x64
 800c1d4:	d001      	beq.n	800c1da <_printf_i+0x42>
 800c1d6:	2969      	cmp	r1, #105	; 0x69
 800c1d8:	d1f6      	bne.n	800c1c8 <_printf_i+0x30>
 800c1da:	6820      	ldr	r0, [r4, #0]
 800c1dc:	6813      	ldr	r3, [r2, #0]
 800c1de:	0605      	lsls	r5, r0, #24
 800c1e0:	f103 0104 	add.w	r1, r3, #4
 800c1e4:	d52a      	bpl.n	800c23c <_printf_i+0xa4>
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6011      	str	r1, [r2, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da03      	bge.n	800c1f6 <_printf_i+0x5e>
 800c1ee:	222d      	movs	r2, #45	; 0x2d
 800c1f0:	425b      	negs	r3, r3
 800c1f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c1f6:	486f      	ldr	r0, [pc, #444]	; (800c3b4 <_printf_i+0x21c>)
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	e039      	b.n	800c270 <_printf_i+0xd8>
 800c1fc:	2973      	cmp	r1, #115	; 0x73
 800c1fe:	f000 809d 	beq.w	800c33c <_printf_i+0x1a4>
 800c202:	d808      	bhi.n	800c216 <_printf_i+0x7e>
 800c204:	296f      	cmp	r1, #111	; 0x6f
 800c206:	d020      	beq.n	800c24a <_printf_i+0xb2>
 800c208:	2970      	cmp	r1, #112	; 0x70
 800c20a:	d1dd      	bne.n	800c1c8 <_printf_i+0x30>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	f043 0320 	orr.w	r3, r3, #32
 800c212:	6023      	str	r3, [r4, #0]
 800c214:	e003      	b.n	800c21e <_printf_i+0x86>
 800c216:	2975      	cmp	r1, #117	; 0x75
 800c218:	d017      	beq.n	800c24a <_printf_i+0xb2>
 800c21a:	2978      	cmp	r1, #120	; 0x78
 800c21c:	d1d4      	bne.n	800c1c8 <_printf_i+0x30>
 800c21e:	2378      	movs	r3, #120	; 0x78
 800c220:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c224:	4864      	ldr	r0, [pc, #400]	; (800c3b8 <_printf_i+0x220>)
 800c226:	e055      	b.n	800c2d4 <_printf_i+0x13c>
 800c228:	6813      	ldr	r3, [r2, #0]
 800c22a:	1d19      	adds	r1, r3, #4
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6011      	str	r1, [r2, #0]
 800c230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c238:	2301      	movs	r3, #1
 800c23a:	e08c      	b.n	800c356 <_printf_i+0x1be>
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	6011      	str	r1, [r2, #0]
 800c240:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c244:	bf18      	it	ne
 800c246:	b21b      	sxthne	r3, r3
 800c248:	e7cf      	b.n	800c1ea <_printf_i+0x52>
 800c24a:	6813      	ldr	r3, [r2, #0]
 800c24c:	6825      	ldr	r5, [r4, #0]
 800c24e:	1d18      	adds	r0, r3, #4
 800c250:	6010      	str	r0, [r2, #0]
 800c252:	0628      	lsls	r0, r5, #24
 800c254:	d501      	bpl.n	800c25a <_printf_i+0xc2>
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	e002      	b.n	800c260 <_printf_i+0xc8>
 800c25a:	0668      	lsls	r0, r5, #25
 800c25c:	d5fb      	bpl.n	800c256 <_printf_i+0xbe>
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	4854      	ldr	r0, [pc, #336]	; (800c3b4 <_printf_i+0x21c>)
 800c262:	296f      	cmp	r1, #111	; 0x6f
 800c264:	bf14      	ite	ne
 800c266:	220a      	movne	r2, #10
 800c268:	2208      	moveq	r2, #8
 800c26a:	2100      	movs	r1, #0
 800c26c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c270:	6865      	ldr	r5, [r4, #4]
 800c272:	60a5      	str	r5, [r4, #8]
 800c274:	2d00      	cmp	r5, #0
 800c276:	f2c0 8095 	blt.w	800c3a4 <_printf_i+0x20c>
 800c27a:	6821      	ldr	r1, [r4, #0]
 800c27c:	f021 0104 	bic.w	r1, r1, #4
 800c280:	6021      	str	r1, [r4, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d13d      	bne.n	800c302 <_printf_i+0x16a>
 800c286:	2d00      	cmp	r5, #0
 800c288:	f040 808e 	bne.w	800c3a8 <_printf_i+0x210>
 800c28c:	4665      	mov	r5, ip
 800c28e:	2a08      	cmp	r2, #8
 800c290:	d10b      	bne.n	800c2aa <_printf_i+0x112>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	07db      	lsls	r3, r3, #31
 800c296:	d508      	bpl.n	800c2aa <_printf_i+0x112>
 800c298:	6923      	ldr	r3, [r4, #16]
 800c29a:	6862      	ldr	r2, [r4, #4]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	bfde      	ittt	le
 800c2a0:	2330      	movle	r3, #48	; 0x30
 800c2a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2aa:	ebac 0305 	sub.w	r3, ip, r5
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	f8cd 8000 	str.w	r8, [sp]
 800c2b4:	463b      	mov	r3, r7
 800c2b6:	aa03      	add	r2, sp, #12
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff fef6 	bl	800c0ac <_printf_common>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	d14d      	bne.n	800c360 <_printf_i+0x1c8>
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2c8:	b005      	add	sp, #20
 800c2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2ce:	4839      	ldr	r0, [pc, #228]	; (800c3b4 <_printf_i+0x21c>)
 800c2d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c2d4:	6813      	ldr	r3, [r2, #0]
 800c2d6:	6821      	ldr	r1, [r4, #0]
 800c2d8:	1d1d      	adds	r5, r3, #4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6015      	str	r5, [r2, #0]
 800c2de:	060a      	lsls	r2, r1, #24
 800c2e0:	d50b      	bpl.n	800c2fa <_printf_i+0x162>
 800c2e2:	07ca      	lsls	r2, r1, #31
 800c2e4:	bf44      	itt	mi
 800c2e6:	f041 0120 	orrmi.w	r1, r1, #32
 800c2ea:	6021      	strmi	r1, [r4, #0]
 800c2ec:	b91b      	cbnz	r3, 800c2f6 <_printf_i+0x15e>
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	f022 0220 	bic.w	r2, r2, #32
 800c2f4:	6022      	str	r2, [r4, #0]
 800c2f6:	2210      	movs	r2, #16
 800c2f8:	e7b7      	b.n	800c26a <_printf_i+0xd2>
 800c2fa:	064d      	lsls	r5, r1, #25
 800c2fc:	bf48      	it	mi
 800c2fe:	b29b      	uxthmi	r3, r3
 800c300:	e7ef      	b.n	800c2e2 <_printf_i+0x14a>
 800c302:	4665      	mov	r5, ip
 800c304:	fbb3 f1f2 	udiv	r1, r3, r2
 800c308:	fb02 3311 	mls	r3, r2, r1, r3
 800c30c:	5cc3      	ldrb	r3, [r0, r3]
 800c30e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c312:	460b      	mov	r3, r1
 800c314:	2900      	cmp	r1, #0
 800c316:	d1f5      	bne.n	800c304 <_printf_i+0x16c>
 800c318:	e7b9      	b.n	800c28e <_printf_i+0xf6>
 800c31a:	6813      	ldr	r3, [r2, #0]
 800c31c:	6825      	ldr	r5, [r4, #0]
 800c31e:	6961      	ldr	r1, [r4, #20]
 800c320:	1d18      	adds	r0, r3, #4
 800c322:	6010      	str	r0, [r2, #0]
 800c324:	0628      	lsls	r0, r5, #24
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	d501      	bpl.n	800c32e <_printf_i+0x196>
 800c32a:	6019      	str	r1, [r3, #0]
 800c32c:	e002      	b.n	800c334 <_printf_i+0x19c>
 800c32e:	066a      	lsls	r2, r5, #25
 800c330:	d5fb      	bpl.n	800c32a <_printf_i+0x192>
 800c332:	8019      	strh	r1, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	4665      	mov	r5, ip
 800c33a:	e7b9      	b.n	800c2b0 <_printf_i+0x118>
 800c33c:	6813      	ldr	r3, [r2, #0]
 800c33e:	1d19      	adds	r1, r3, #4
 800c340:	6011      	str	r1, [r2, #0]
 800c342:	681d      	ldr	r5, [r3, #0]
 800c344:	6862      	ldr	r2, [r4, #4]
 800c346:	2100      	movs	r1, #0
 800c348:	4628      	mov	r0, r5
 800c34a:	f7f3 ff49 	bl	80001e0 <memchr>
 800c34e:	b108      	cbz	r0, 800c354 <_printf_i+0x1bc>
 800c350:	1b40      	subs	r0, r0, r5
 800c352:	6060      	str	r0, [r4, #4]
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2300      	movs	r3, #0
 800c35a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c35e:	e7a7      	b.n	800c2b0 <_printf_i+0x118>
 800c360:	6923      	ldr	r3, [r4, #16]
 800c362:	462a      	mov	r2, r5
 800c364:	4639      	mov	r1, r7
 800c366:	4630      	mov	r0, r6
 800c368:	47c0      	blx	r8
 800c36a:	3001      	adds	r0, #1
 800c36c:	d0aa      	beq.n	800c2c4 <_printf_i+0x12c>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	079b      	lsls	r3, r3, #30
 800c372:	d413      	bmi.n	800c39c <_printf_i+0x204>
 800c374:	68e0      	ldr	r0, [r4, #12]
 800c376:	9b03      	ldr	r3, [sp, #12]
 800c378:	4298      	cmp	r0, r3
 800c37a:	bfb8      	it	lt
 800c37c:	4618      	movlt	r0, r3
 800c37e:	e7a3      	b.n	800c2c8 <_printf_i+0x130>
 800c380:	2301      	movs	r3, #1
 800c382:	464a      	mov	r2, r9
 800c384:	4639      	mov	r1, r7
 800c386:	4630      	mov	r0, r6
 800c388:	47c0      	blx	r8
 800c38a:	3001      	adds	r0, #1
 800c38c:	d09a      	beq.n	800c2c4 <_printf_i+0x12c>
 800c38e:	3501      	adds	r5, #1
 800c390:	68e3      	ldr	r3, [r4, #12]
 800c392:	9a03      	ldr	r2, [sp, #12]
 800c394:	1a9b      	subs	r3, r3, r2
 800c396:	42ab      	cmp	r3, r5
 800c398:	dcf2      	bgt.n	800c380 <_printf_i+0x1e8>
 800c39a:	e7eb      	b.n	800c374 <_printf_i+0x1dc>
 800c39c:	2500      	movs	r5, #0
 800c39e:	f104 0919 	add.w	r9, r4, #25
 800c3a2:	e7f5      	b.n	800c390 <_printf_i+0x1f8>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1ac      	bne.n	800c302 <_printf_i+0x16a>
 800c3a8:	7803      	ldrb	r3, [r0, #0]
 800c3aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3b2:	e76c      	b.n	800c28e <_printf_i+0xf6>
 800c3b4:	0800cc75 	.word	0x0800cc75
 800c3b8:	0800cc86 	.word	0x0800cc86

0800c3bc <memcpy>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	1e43      	subs	r3, r0, #1
 800c3c0:	440a      	add	r2, r1
 800c3c2:	4291      	cmp	r1, r2
 800c3c4:	d100      	bne.n	800c3c8 <memcpy+0xc>
 800c3c6:	bd10      	pop	{r4, pc}
 800c3c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d0:	e7f7      	b.n	800c3c2 <memcpy+0x6>

0800c3d2 <memmove>:
 800c3d2:	4288      	cmp	r0, r1
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	eb01 0302 	add.w	r3, r1, r2
 800c3da:	d807      	bhi.n	800c3ec <memmove+0x1a>
 800c3dc:	1e42      	subs	r2, r0, #1
 800c3de:	4299      	cmp	r1, r3
 800c3e0:	d00a      	beq.n	800c3f8 <memmove+0x26>
 800c3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3ea:	e7f8      	b.n	800c3de <memmove+0xc>
 800c3ec:	4283      	cmp	r3, r0
 800c3ee:	d9f5      	bls.n	800c3dc <memmove+0xa>
 800c3f0:	1881      	adds	r1, r0, r2
 800c3f2:	1ad2      	subs	r2, r2, r3
 800c3f4:	42d3      	cmn	r3, r2
 800c3f6:	d100      	bne.n	800c3fa <memmove+0x28>
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c402:	e7f7      	b.n	800c3f4 <memmove+0x22>

0800c404 <_realloc_r>:
 800c404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c406:	4607      	mov	r7, r0
 800c408:	4614      	mov	r4, r2
 800c40a:	460e      	mov	r6, r1
 800c40c:	b921      	cbnz	r1, 800c418 <_realloc_r+0x14>
 800c40e:	4611      	mov	r1, r2
 800c410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c414:	f7ff bc6c 	b.w	800bcf0 <_malloc_r>
 800c418:	b922      	cbnz	r2, 800c424 <_realloc_r+0x20>
 800c41a:	f7ff fc1b 	bl	800bc54 <_free_r>
 800c41e:	4625      	mov	r5, r4
 800c420:	4628      	mov	r0, r5
 800c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c424:	f000 f814 	bl	800c450 <_malloc_usable_size_r>
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d20f      	bcs.n	800c44c <_realloc_r+0x48>
 800c42c:	4621      	mov	r1, r4
 800c42e:	4638      	mov	r0, r7
 800c430:	f7ff fc5e 	bl	800bcf0 <_malloc_r>
 800c434:	4605      	mov	r5, r0
 800c436:	2800      	cmp	r0, #0
 800c438:	d0f2      	beq.n	800c420 <_realloc_r+0x1c>
 800c43a:	4631      	mov	r1, r6
 800c43c:	4622      	mov	r2, r4
 800c43e:	f7ff ffbd 	bl	800c3bc <memcpy>
 800c442:	4631      	mov	r1, r6
 800c444:	4638      	mov	r0, r7
 800c446:	f7ff fc05 	bl	800bc54 <_free_r>
 800c44a:	e7e9      	b.n	800c420 <_realloc_r+0x1c>
 800c44c:	4635      	mov	r5, r6
 800c44e:	e7e7      	b.n	800c420 <_realloc_r+0x1c>

0800c450 <_malloc_usable_size_r>:
 800c450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c454:	1f18      	subs	r0, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfbc      	itt	lt
 800c45a:	580b      	ldrlt	r3, [r1, r0]
 800c45c:	18c0      	addlt	r0, r0, r3
 800c45e:	4770      	bx	lr

0800c460 <atan>:
 800c460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	ec55 4b10 	vmov	r4, r5, d0
 800c468:	4bc3      	ldr	r3, [pc, #780]	; (800c778 <atan+0x318>)
 800c46a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c46e:	429e      	cmp	r6, r3
 800c470:	46ab      	mov	fp, r5
 800c472:	dd18      	ble.n	800c4a6 <atan+0x46>
 800c474:	4bc1      	ldr	r3, [pc, #772]	; (800c77c <atan+0x31c>)
 800c476:	429e      	cmp	r6, r3
 800c478:	dc01      	bgt.n	800c47e <atan+0x1e>
 800c47a:	d109      	bne.n	800c490 <atan+0x30>
 800c47c:	b144      	cbz	r4, 800c490 <atan+0x30>
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f3 ff01 	bl	800028c <__adddf3>
 800c48a:	4604      	mov	r4, r0
 800c48c:	460d      	mov	r5, r1
 800c48e:	e006      	b.n	800c49e <atan+0x3e>
 800c490:	f1bb 0f00 	cmp.w	fp, #0
 800c494:	f340 8131 	ble.w	800c6fa <atan+0x29a>
 800c498:	a59b      	add	r5, pc, #620	; (adr r5, 800c708 <atan+0x2a8>)
 800c49a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c49e:	ec45 4b10 	vmov	d0, r4, r5
 800c4a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a6:	4bb6      	ldr	r3, [pc, #728]	; (800c780 <atan+0x320>)
 800c4a8:	429e      	cmp	r6, r3
 800c4aa:	dc14      	bgt.n	800c4d6 <atan+0x76>
 800c4ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c4b0:	429e      	cmp	r6, r3
 800c4b2:	dc0d      	bgt.n	800c4d0 <atan+0x70>
 800c4b4:	a396      	add	r3, pc, #600	; (adr r3, 800c710 <atan+0x2b0>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	ee10 0a10 	vmov	r0, s0
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f7f3 fee4 	bl	800028c <__adddf3>
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	4baf      	ldr	r3, [pc, #700]	; (800c784 <atan+0x324>)
 800c4c8:	f7f4 fb26 	bl	8000b18 <__aeabi_dcmpgt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d1e6      	bne.n	800c49e <atan+0x3e>
 800c4d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c4d4:	e02b      	b.n	800c52e <atan+0xce>
 800c4d6:	f000 f963 	bl	800c7a0 <fabs>
 800c4da:	4bab      	ldr	r3, [pc, #684]	; (800c788 <atan+0x328>)
 800c4dc:	429e      	cmp	r6, r3
 800c4de:	ec55 4b10 	vmov	r4, r5, d0
 800c4e2:	f300 80bf 	bgt.w	800c664 <atan+0x204>
 800c4e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c4ea:	429e      	cmp	r6, r3
 800c4ec:	f300 80a0 	bgt.w	800c630 <atan+0x1d0>
 800c4f0:	ee10 2a10 	vmov	r2, s0
 800c4f4:	ee10 0a10 	vmov	r0, s0
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	f7f3 fec6 	bl	800028c <__adddf3>
 800c500:	2200      	movs	r2, #0
 800c502:	4ba0      	ldr	r3, [pc, #640]	; (800c784 <atan+0x324>)
 800c504:	f7f3 fec0 	bl	8000288 <__aeabi_dsub>
 800c508:	2200      	movs	r2, #0
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f3 feb9 	bl	800028c <__adddf3>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4630      	mov	r0, r6
 800c520:	4639      	mov	r1, r7
 800c522:	f7f4 f993 	bl	800084c <__aeabi_ddiv>
 800c526:	f04f 0a00 	mov.w	sl, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	460d      	mov	r5, r1
 800c52e:	4622      	mov	r2, r4
 800c530:	462b      	mov	r3, r5
 800c532:	4620      	mov	r0, r4
 800c534:	4629      	mov	r1, r5
 800c536:	f7f4 f85f 	bl	80005f8 <__aeabi_dmul>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4680      	mov	r8, r0
 800c540:	4689      	mov	r9, r1
 800c542:	f7f4 f859 	bl	80005f8 <__aeabi_dmul>
 800c546:	a374      	add	r3, pc, #464	; (adr r3, 800c718 <atan+0x2b8>)
 800c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	f7f4 f852 	bl	80005f8 <__aeabi_dmul>
 800c554:	a372      	add	r3, pc, #456	; (adr r3, 800c720 <atan+0x2c0>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f7f3 fe97 	bl	800028c <__adddf3>
 800c55e:	4632      	mov	r2, r6
 800c560:	463b      	mov	r3, r7
 800c562:	f7f4 f849 	bl	80005f8 <__aeabi_dmul>
 800c566:	a370      	add	r3, pc, #448	; (adr r3, 800c728 <atan+0x2c8>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	f7f3 fe8e 	bl	800028c <__adddf3>
 800c570:	4632      	mov	r2, r6
 800c572:	463b      	mov	r3, r7
 800c574:	f7f4 f840 	bl	80005f8 <__aeabi_dmul>
 800c578:	a36d      	add	r3, pc, #436	; (adr r3, 800c730 <atan+0x2d0>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f7f3 fe85 	bl	800028c <__adddf3>
 800c582:	4632      	mov	r2, r6
 800c584:	463b      	mov	r3, r7
 800c586:	f7f4 f837 	bl	80005f8 <__aeabi_dmul>
 800c58a:	a36b      	add	r3, pc, #428	; (adr r3, 800c738 <atan+0x2d8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe7c 	bl	800028c <__adddf3>
 800c594:	4632      	mov	r2, r6
 800c596:	463b      	mov	r3, r7
 800c598:	f7f4 f82e 	bl	80005f8 <__aeabi_dmul>
 800c59c:	a368      	add	r3, pc, #416	; (adr r3, 800c740 <atan+0x2e0>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	f7f3 fe73 	bl	800028c <__adddf3>
 800c5a6:	4642      	mov	r2, r8
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	f7f4 f825 	bl	80005f8 <__aeabi_dmul>
 800c5ae:	a366      	add	r3, pc, #408	; (adr r3, 800c748 <atan+0x2e8>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	4680      	mov	r8, r0
 800c5b6:	4689      	mov	r9, r1
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	4639      	mov	r1, r7
 800c5bc:	f7f4 f81c 	bl	80005f8 <__aeabi_dmul>
 800c5c0:	a363      	add	r3, pc, #396	; (adr r3, 800c750 <atan+0x2f0>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe5f 	bl	8000288 <__aeabi_dsub>
 800c5ca:	4632      	mov	r2, r6
 800c5cc:	463b      	mov	r3, r7
 800c5ce:	f7f4 f813 	bl	80005f8 <__aeabi_dmul>
 800c5d2:	a361      	add	r3, pc, #388	; (adr r3, 800c758 <atan+0x2f8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe56 	bl	8000288 <__aeabi_dsub>
 800c5dc:	4632      	mov	r2, r6
 800c5de:	463b      	mov	r3, r7
 800c5e0:	f7f4 f80a 	bl	80005f8 <__aeabi_dmul>
 800c5e4:	a35e      	add	r3, pc, #376	; (adr r3, 800c760 <atan+0x300>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fe4d 	bl	8000288 <__aeabi_dsub>
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	463b      	mov	r3, r7
 800c5f2:	f7f4 f801 	bl	80005f8 <__aeabi_dmul>
 800c5f6:	a35c      	add	r3, pc, #368	; (adr r3, 800c768 <atan+0x308>)
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f7f3 fe44 	bl	8000288 <__aeabi_dsub>
 800c600:	4632      	mov	r2, r6
 800c602:	463b      	mov	r3, r7
 800c604:	f7f3 fff8 	bl	80005f8 <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	f7f3 fe3c 	bl	800028c <__adddf3>
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f3 ffee 	bl	80005f8 <__aeabi_dmul>
 800c61c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	d14b      	bne.n	800c6be <atan+0x25e>
 800c626:	4620      	mov	r0, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	f7f3 fe2d 	bl	8000288 <__aeabi_dsub>
 800c62e:	e72c      	b.n	800c48a <atan+0x2a>
 800c630:	ee10 0a10 	vmov	r0, s0
 800c634:	2200      	movs	r2, #0
 800c636:	4b53      	ldr	r3, [pc, #332]	; (800c784 <atan+0x324>)
 800c638:	4629      	mov	r1, r5
 800c63a:	f7f3 fe25 	bl	8000288 <__aeabi_dsub>
 800c63e:	2200      	movs	r2, #0
 800c640:	4606      	mov	r6, r0
 800c642:	460f      	mov	r7, r1
 800c644:	4b4f      	ldr	r3, [pc, #316]	; (800c784 <atan+0x324>)
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f3 fe1f 	bl	800028c <__adddf3>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	4630      	mov	r0, r6
 800c654:	4639      	mov	r1, r7
 800c656:	f7f4 f8f9 	bl	800084c <__aeabi_ddiv>
 800c65a:	f04f 0a01 	mov.w	sl, #1
 800c65e:	4604      	mov	r4, r0
 800c660:	460d      	mov	r5, r1
 800c662:	e764      	b.n	800c52e <atan+0xce>
 800c664:	4b49      	ldr	r3, [pc, #292]	; (800c78c <atan+0x32c>)
 800c666:	429e      	cmp	r6, r3
 800c668:	dc1d      	bgt.n	800c6a6 <atan+0x246>
 800c66a:	ee10 0a10 	vmov	r0, s0
 800c66e:	2200      	movs	r2, #0
 800c670:	4b47      	ldr	r3, [pc, #284]	; (800c790 <atan+0x330>)
 800c672:	4629      	mov	r1, r5
 800c674:	f7f3 fe08 	bl	8000288 <__aeabi_dsub>
 800c678:	2200      	movs	r2, #0
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	4b44      	ldr	r3, [pc, #272]	; (800c790 <atan+0x330>)
 800c680:	4620      	mov	r0, r4
 800c682:	4629      	mov	r1, r5
 800c684:	f7f3 ffb8 	bl	80005f8 <__aeabi_dmul>
 800c688:	2200      	movs	r2, #0
 800c68a:	4b3e      	ldr	r3, [pc, #248]	; (800c784 <atan+0x324>)
 800c68c:	f7f3 fdfe 	bl	800028c <__adddf3>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	4630      	mov	r0, r6
 800c696:	4639      	mov	r1, r7
 800c698:	f7f4 f8d8 	bl	800084c <__aeabi_ddiv>
 800c69c:	f04f 0a02 	mov.w	sl, #2
 800c6a0:	4604      	mov	r4, r0
 800c6a2:	460d      	mov	r5, r1
 800c6a4:	e743      	b.n	800c52e <atan+0xce>
 800c6a6:	462b      	mov	r3, r5
 800c6a8:	ee10 2a10 	vmov	r2, s0
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4939      	ldr	r1, [pc, #228]	; (800c794 <atan+0x334>)
 800c6b0:	f7f4 f8cc 	bl	800084c <__aeabi_ddiv>
 800c6b4:	f04f 0a03 	mov.w	sl, #3
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	460d      	mov	r5, r1
 800c6bc:	e737      	b.n	800c52e <atan+0xce>
 800c6be:	4b36      	ldr	r3, [pc, #216]	; (800c798 <atan+0x338>)
 800c6c0:	4e36      	ldr	r6, [pc, #216]	; (800c79c <atan+0x33c>)
 800c6c2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c6c6:	4456      	add	r6, sl
 800c6c8:	449a      	add	sl, r3
 800c6ca:	e9da 2300 	ldrd	r2, r3, [sl]
 800c6ce:	f7f3 fddb 	bl	8000288 <__aeabi_dsub>
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	462b      	mov	r3, r5
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c6e2:	f7f3 fdd1 	bl	8000288 <__aeabi_dsub>
 800c6e6:	f1bb 0f00 	cmp.w	fp, #0
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	f6bf aed6 	bge.w	800c49e <atan+0x3e>
 800c6f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6f6:	461d      	mov	r5, r3
 800c6f8:	e6d1      	b.n	800c49e <atan+0x3e>
 800c6fa:	a51d      	add	r5, pc, #116	; (adr r5, 800c770 <atan+0x310>)
 800c6fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c700:	e6cd      	b.n	800c49e <atan+0x3e>
 800c702:	bf00      	nop
 800c704:	f3af 8000 	nop.w
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	3ff921fb 	.word	0x3ff921fb
 800c710:	8800759c 	.word	0x8800759c
 800c714:	7e37e43c 	.word	0x7e37e43c
 800c718:	e322da11 	.word	0xe322da11
 800c71c:	3f90ad3a 	.word	0x3f90ad3a
 800c720:	24760deb 	.word	0x24760deb
 800c724:	3fa97b4b 	.word	0x3fa97b4b
 800c728:	a0d03d51 	.word	0xa0d03d51
 800c72c:	3fb10d66 	.word	0x3fb10d66
 800c730:	c54c206e 	.word	0xc54c206e
 800c734:	3fb745cd 	.word	0x3fb745cd
 800c738:	920083ff 	.word	0x920083ff
 800c73c:	3fc24924 	.word	0x3fc24924
 800c740:	5555550d 	.word	0x5555550d
 800c744:	3fd55555 	.word	0x3fd55555
 800c748:	2c6a6c2f 	.word	0x2c6a6c2f
 800c74c:	bfa2b444 	.word	0xbfa2b444
 800c750:	52defd9a 	.word	0x52defd9a
 800c754:	3fadde2d 	.word	0x3fadde2d
 800c758:	af749a6d 	.word	0xaf749a6d
 800c75c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c760:	fe231671 	.word	0xfe231671
 800c764:	3fbc71c6 	.word	0x3fbc71c6
 800c768:	9998ebc4 	.word	0x9998ebc4
 800c76c:	3fc99999 	.word	0x3fc99999
 800c770:	54442d18 	.word	0x54442d18
 800c774:	bff921fb 	.word	0xbff921fb
 800c778:	440fffff 	.word	0x440fffff
 800c77c:	7ff00000 	.word	0x7ff00000
 800c780:	3fdbffff 	.word	0x3fdbffff
 800c784:	3ff00000 	.word	0x3ff00000
 800c788:	3ff2ffff 	.word	0x3ff2ffff
 800c78c:	40037fff 	.word	0x40037fff
 800c790:	3ff80000 	.word	0x3ff80000
 800c794:	bff00000 	.word	0xbff00000
 800c798:	0800ccb8 	.word	0x0800ccb8
 800c79c:	0800cc98 	.word	0x0800cc98

0800c7a0 <fabs>:
 800c7a0:	ec51 0b10 	vmov	r0, r1, d0
 800c7a4:	ee10 2a10 	vmov	r2, s0
 800c7a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7ac:	ec43 2b10 	vmov	d0, r2, r3
 800c7b0:	4770      	bx	lr

0800c7b2 <atan2>:
 800c7b2:	f000 b85d 	b.w	800c870 <__ieee754_atan2>
	...

0800c7b8 <sqrt>:
 800c7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	ed2d 8b02 	vpush	{d8}
 800c7c0:	b08b      	sub	sp, #44	; 0x2c
 800c7c2:	ec55 4b10 	vmov	r4, r5, d0
 800c7c6:	f000 f931 	bl	800ca2c <__ieee754_sqrt>
 800c7ca:	4b26      	ldr	r3, [pc, #152]	; (800c864 <sqrt+0xac>)
 800c7cc:	eeb0 8a40 	vmov.f32	s16, s0
 800c7d0:	eef0 8a60 	vmov.f32	s17, s1
 800c7d4:	f993 6000 	ldrsb.w	r6, [r3]
 800c7d8:	1c73      	adds	r3, r6, #1
 800c7da:	d02a      	beq.n	800c832 <sqrt+0x7a>
 800c7dc:	4622      	mov	r2, r4
 800c7de:	462b      	mov	r3, r5
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f7f4 f9a2 	bl	8000b2c <__aeabi_dcmpun>
 800c7e8:	4607      	mov	r7, r0
 800c7ea:	bb10      	cbnz	r0, 800c832 <sqrt+0x7a>
 800c7ec:	f04f 0800 	mov.w	r8, #0
 800c7f0:	f04f 0900 	mov.w	r9, #0
 800c7f4:	4642      	mov	r2, r8
 800c7f6:	464b      	mov	r3, r9
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	f7f4 f96e 	bl	8000adc <__aeabi_dcmplt>
 800c800:	b1b8      	cbz	r0, 800c832 <sqrt+0x7a>
 800c802:	2301      	movs	r3, #1
 800c804:	9300      	str	r3, [sp, #0]
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <sqrt+0xb0>)
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	9708      	str	r7, [sp, #32]
 800c80c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c810:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c814:	b9b6      	cbnz	r6, 800c844 <sqrt+0x8c>
 800c816:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c81a:	4668      	mov	r0, sp
 800c81c:	f000 f9b6 	bl	800cb8c <matherr>
 800c820:	b1d0      	cbz	r0, 800c858 <sqrt+0xa0>
 800c822:	9b08      	ldr	r3, [sp, #32]
 800c824:	b11b      	cbz	r3, 800c82e <sqrt+0x76>
 800c826:	f7ff f9d3 	bl	800bbd0 <__errno>
 800c82a:	9b08      	ldr	r3, [sp, #32]
 800c82c:	6003      	str	r3, [r0, #0]
 800c82e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c832:	eeb0 0a48 	vmov.f32	s0, s16
 800c836:	eef0 0a68 	vmov.f32	s1, s17
 800c83a:	b00b      	add	sp, #44	; 0x2c
 800c83c:	ecbd 8b02 	vpop	{d8}
 800c840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c844:	4642      	mov	r2, r8
 800c846:	464b      	mov	r3, r9
 800c848:	4640      	mov	r0, r8
 800c84a:	4649      	mov	r1, r9
 800c84c:	f7f3 fffe 	bl	800084c <__aeabi_ddiv>
 800c850:	2e02      	cmp	r6, #2
 800c852:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c856:	d1e0      	bne.n	800c81a <sqrt+0x62>
 800c858:	f7ff f9ba 	bl	800bbd0 <__errno>
 800c85c:	2321      	movs	r3, #33	; 0x21
 800c85e:	6003      	str	r3, [r0, #0]
 800c860:	e7df      	b.n	800c822 <sqrt+0x6a>
 800c862:	bf00      	nop
 800c864:	20000274 	.word	0x20000274
 800c868:	0800ccd8 	.word	0x0800ccd8
 800c86c:	00000000 	.word	0x00000000

0800c870 <__ieee754_atan2>:
 800c870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c874:	ec57 6b11 	vmov	r6, r7, d1
 800c878:	4273      	negs	r3, r6
 800c87a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c87e:	4333      	orrs	r3, r6
 800c880:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800ca28 <__ieee754_atan2+0x1b8>
 800c884:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c888:	4573      	cmp	r3, lr
 800c88a:	ec51 0b10 	vmov	r0, r1, d0
 800c88e:	ee11 8a10 	vmov	r8, s2
 800c892:	d80a      	bhi.n	800c8aa <__ieee754_atan2+0x3a>
 800c894:	4244      	negs	r4, r0
 800c896:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c89a:	4304      	orrs	r4, r0
 800c89c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c8a0:	4574      	cmp	r4, lr
 800c8a2:	468c      	mov	ip, r1
 800c8a4:	ee10 9a10 	vmov	r9, s0
 800c8a8:	d907      	bls.n	800c8ba <__ieee754_atan2+0x4a>
 800c8aa:	4632      	mov	r2, r6
 800c8ac:	463b      	mov	r3, r7
 800c8ae:	f7f3 fced 	bl	800028c <__adddf3>
 800c8b2:	ec41 0b10 	vmov	d0, r0, r1
 800c8b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c8be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c8c2:	4334      	orrs	r4, r6
 800c8c4:	d103      	bne.n	800c8ce <__ieee754_atan2+0x5e>
 800c8c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ca:	f7ff bdc9 	b.w	800c460 <atan>
 800c8ce:	17bc      	asrs	r4, r7, #30
 800c8d0:	f004 0402 	and.w	r4, r4, #2
 800c8d4:	ea53 0909 	orrs.w	r9, r3, r9
 800c8d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c8dc:	d107      	bne.n	800c8ee <__ieee754_atan2+0x7e>
 800c8de:	2c02      	cmp	r4, #2
 800c8e0:	d073      	beq.n	800c9ca <__ieee754_atan2+0x15a>
 800c8e2:	2c03      	cmp	r4, #3
 800c8e4:	d1e5      	bne.n	800c8b2 <__ieee754_atan2+0x42>
 800c8e6:	a13e      	add	r1, pc, #248	; (adr r1, 800c9e0 <__ieee754_atan2+0x170>)
 800c8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ec:	e7e1      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c8ee:	ea52 0808 	orrs.w	r8, r2, r8
 800c8f2:	d106      	bne.n	800c902 <__ieee754_atan2+0x92>
 800c8f4:	f1bc 0f00 	cmp.w	ip, #0
 800c8f8:	da6b      	bge.n	800c9d2 <__ieee754_atan2+0x162>
 800c8fa:	a13b      	add	r1, pc, #236	; (adr r1, 800c9e8 <__ieee754_atan2+0x178>)
 800c8fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c900:	e7d7      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c902:	4572      	cmp	r2, lr
 800c904:	d120      	bne.n	800c948 <__ieee754_atan2+0xd8>
 800c906:	4293      	cmp	r3, r2
 800c908:	d111      	bne.n	800c92e <__ieee754_atan2+0xbe>
 800c90a:	2c02      	cmp	r4, #2
 800c90c:	d007      	beq.n	800c91e <__ieee754_atan2+0xae>
 800c90e:	2c03      	cmp	r4, #3
 800c910:	d009      	beq.n	800c926 <__ieee754_atan2+0xb6>
 800c912:	2c01      	cmp	r4, #1
 800c914:	d155      	bne.n	800c9c2 <__ieee754_atan2+0x152>
 800c916:	a136      	add	r1, pc, #216	; (adr r1, 800c9f0 <__ieee754_atan2+0x180>)
 800c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91c:	e7c9      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c91e:	a136      	add	r1, pc, #216	; (adr r1, 800c9f8 <__ieee754_atan2+0x188>)
 800c920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c924:	e7c5      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c926:	a136      	add	r1, pc, #216	; (adr r1, 800ca00 <__ieee754_atan2+0x190>)
 800c928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92c:	e7c1      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c92e:	2c02      	cmp	r4, #2
 800c930:	d04b      	beq.n	800c9ca <__ieee754_atan2+0x15a>
 800c932:	2c03      	cmp	r4, #3
 800c934:	d0d7      	beq.n	800c8e6 <__ieee754_atan2+0x76>
 800c936:	2c01      	cmp	r4, #1
 800c938:	f04f 0000 	mov.w	r0, #0
 800c93c:	d102      	bne.n	800c944 <__ieee754_atan2+0xd4>
 800c93e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c942:	e7b6      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c944:	2100      	movs	r1, #0
 800c946:	e7b4      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c948:	4573      	cmp	r3, lr
 800c94a:	d0d3      	beq.n	800c8f4 <__ieee754_atan2+0x84>
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	151b      	asrs	r3, r3, #20
 800c950:	2b3c      	cmp	r3, #60	; 0x3c
 800c952:	dc1e      	bgt.n	800c992 <__ieee754_atan2+0x122>
 800c954:	2f00      	cmp	r7, #0
 800c956:	da01      	bge.n	800c95c <__ieee754_atan2+0xec>
 800c958:	333c      	adds	r3, #60	; 0x3c
 800c95a:	db1e      	blt.n	800c99a <__ieee754_atan2+0x12a>
 800c95c:	4632      	mov	r2, r6
 800c95e:	463b      	mov	r3, r7
 800c960:	f7f3 ff74 	bl	800084c <__aeabi_ddiv>
 800c964:	ec41 0b10 	vmov	d0, r0, r1
 800c968:	f7ff ff1a 	bl	800c7a0 <fabs>
 800c96c:	f7ff fd78 	bl	800c460 <atan>
 800c970:	ec51 0b10 	vmov	r0, r1, d0
 800c974:	2c01      	cmp	r4, #1
 800c976:	d013      	beq.n	800c9a0 <__ieee754_atan2+0x130>
 800c978:	2c02      	cmp	r4, #2
 800c97a:	d015      	beq.n	800c9a8 <__ieee754_atan2+0x138>
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	d098      	beq.n	800c8b2 <__ieee754_atan2+0x42>
 800c980:	a321      	add	r3, pc, #132	; (adr r3, 800ca08 <__ieee754_atan2+0x198>)
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f7f3 fc7f 	bl	8000288 <__aeabi_dsub>
 800c98a:	a321      	add	r3, pc, #132	; (adr r3, 800ca10 <__ieee754_atan2+0x1a0>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	e014      	b.n	800c9bc <__ieee754_atan2+0x14c>
 800c992:	a121      	add	r1, pc, #132	; (adr r1, 800ca18 <__ieee754_atan2+0x1a8>)
 800c994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c998:	e7ec      	b.n	800c974 <__ieee754_atan2+0x104>
 800c99a:	2000      	movs	r0, #0
 800c99c:	2100      	movs	r1, #0
 800c99e:	e7e9      	b.n	800c974 <__ieee754_atan2+0x104>
 800c9a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	e784      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c9a8:	a317      	add	r3, pc, #92	; (adr r3, 800ca08 <__ieee754_atan2+0x198>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7f3 fc6b 	bl	8000288 <__aeabi_dsub>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	a116      	add	r1, pc, #88	; (adr r1, 800ca10 <__ieee754_atan2+0x1a0>)
 800c9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	e777      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c9c2:	a117      	add	r1, pc, #92	; (adr r1, 800ca20 <__ieee754_atan2+0x1b0>)
 800c9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c8:	e773      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c9ca:	a111      	add	r1, pc, #68	; (adr r1, 800ca10 <__ieee754_atan2+0x1a0>)
 800c9cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9d0:	e76f      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c9d2:	a111      	add	r1, pc, #68	; (adr r1, 800ca18 <__ieee754_atan2+0x1a8>)
 800c9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9d8:	e76b      	b.n	800c8b2 <__ieee754_atan2+0x42>
 800c9da:	bf00      	nop
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	54442d18 	.word	0x54442d18
 800c9e4:	c00921fb 	.word	0xc00921fb
 800c9e8:	54442d18 	.word	0x54442d18
 800c9ec:	bff921fb 	.word	0xbff921fb
 800c9f0:	54442d18 	.word	0x54442d18
 800c9f4:	bfe921fb 	.word	0xbfe921fb
 800c9f8:	7f3321d2 	.word	0x7f3321d2
 800c9fc:	4002d97c 	.word	0x4002d97c
 800ca00:	7f3321d2 	.word	0x7f3321d2
 800ca04:	c002d97c 	.word	0xc002d97c
 800ca08:	33145c07 	.word	0x33145c07
 800ca0c:	3ca1a626 	.word	0x3ca1a626
 800ca10:	54442d18 	.word	0x54442d18
 800ca14:	400921fb 	.word	0x400921fb
 800ca18:	54442d18 	.word	0x54442d18
 800ca1c:	3ff921fb 	.word	0x3ff921fb
 800ca20:	54442d18 	.word	0x54442d18
 800ca24:	3fe921fb 	.word	0x3fe921fb
 800ca28:	7ff00000 	.word	0x7ff00000

0800ca2c <__ieee754_sqrt>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	4955      	ldr	r1, [pc, #340]	; (800cb88 <__ieee754_sqrt+0x15c>)
 800ca32:	ec55 4b10 	vmov	r4, r5, d0
 800ca36:	43a9      	bics	r1, r5
 800ca38:	462b      	mov	r3, r5
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	d112      	bne.n	800ca64 <__ieee754_sqrt+0x38>
 800ca3e:	ee10 2a10 	vmov	r2, s0
 800ca42:	ee10 0a10 	vmov	r0, s0
 800ca46:	4629      	mov	r1, r5
 800ca48:	f7f3 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4620      	mov	r0, r4
 800ca52:	4629      	mov	r1, r5
 800ca54:	f7f3 fc1a 	bl	800028c <__adddf3>
 800ca58:	4604      	mov	r4, r0
 800ca5a:	460d      	mov	r5, r1
 800ca5c:	ec45 4b10 	vmov	d0, r4, r5
 800ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca64:	2d00      	cmp	r5, #0
 800ca66:	ee10 0a10 	vmov	r0, s0
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	dc0f      	bgt.n	800ca8e <__ieee754_sqrt+0x62>
 800ca6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca72:	4330      	orrs	r0, r6
 800ca74:	d0f2      	beq.n	800ca5c <__ieee754_sqrt+0x30>
 800ca76:	b155      	cbz	r5, 800ca8e <__ieee754_sqrt+0x62>
 800ca78:	ee10 2a10 	vmov	r2, s0
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	4629      	mov	r1, r5
 800ca80:	f7f3 fc02 	bl	8000288 <__aeabi_dsub>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	f7f3 fee0 	bl	800084c <__aeabi_ddiv>
 800ca8c:	e7e4      	b.n	800ca58 <__ieee754_sqrt+0x2c>
 800ca8e:	151b      	asrs	r3, r3, #20
 800ca90:	d073      	beq.n	800cb7a <__ieee754_sqrt+0x14e>
 800ca92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca96:	07dd      	lsls	r5, r3, #31
 800ca98:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ca9c:	bf48      	it	mi
 800ca9e:	0fc8      	lsrmi	r0, r1, #31
 800caa0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800caa4:	bf44      	itt	mi
 800caa6:	0049      	lslmi	r1, r1, #1
 800caa8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800caac:	2500      	movs	r5, #0
 800caae:	1058      	asrs	r0, r3, #1
 800cab0:	0fcb      	lsrs	r3, r1, #31
 800cab2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cab6:	0049      	lsls	r1, r1, #1
 800cab8:	2316      	movs	r3, #22
 800caba:	462c      	mov	r4, r5
 800cabc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cac0:	19a7      	adds	r7, r4, r6
 800cac2:	4297      	cmp	r7, r2
 800cac4:	bfde      	ittt	le
 800cac6:	19bc      	addle	r4, r7, r6
 800cac8:	1bd2      	suble	r2, r2, r7
 800caca:	19ad      	addle	r5, r5, r6
 800cacc:	0fcf      	lsrs	r7, r1, #31
 800cace:	3b01      	subs	r3, #1
 800cad0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800cad4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cadc:	d1f0      	bne.n	800cac0 <__ieee754_sqrt+0x94>
 800cade:	f04f 0c20 	mov.w	ip, #32
 800cae2:	469e      	mov	lr, r3
 800cae4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cae8:	42a2      	cmp	r2, r4
 800caea:	eb06 070e 	add.w	r7, r6, lr
 800caee:	dc02      	bgt.n	800caf6 <__ieee754_sqrt+0xca>
 800caf0:	d112      	bne.n	800cb18 <__ieee754_sqrt+0xec>
 800caf2:	428f      	cmp	r7, r1
 800caf4:	d810      	bhi.n	800cb18 <__ieee754_sqrt+0xec>
 800caf6:	2f00      	cmp	r7, #0
 800caf8:	eb07 0e06 	add.w	lr, r7, r6
 800cafc:	da42      	bge.n	800cb84 <__ieee754_sqrt+0x158>
 800cafe:	f1be 0f00 	cmp.w	lr, #0
 800cb02:	db3f      	blt.n	800cb84 <__ieee754_sqrt+0x158>
 800cb04:	f104 0801 	add.w	r8, r4, #1
 800cb08:	1b12      	subs	r2, r2, r4
 800cb0a:	428f      	cmp	r7, r1
 800cb0c:	bf88      	it	hi
 800cb0e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cb12:	1bc9      	subs	r1, r1, r7
 800cb14:	4433      	add	r3, r6
 800cb16:	4644      	mov	r4, r8
 800cb18:	0052      	lsls	r2, r2, #1
 800cb1a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cb1e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cb22:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cb26:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb2a:	d1dd      	bne.n	800cae8 <__ieee754_sqrt+0xbc>
 800cb2c:	430a      	orrs	r2, r1
 800cb2e:	d006      	beq.n	800cb3e <__ieee754_sqrt+0x112>
 800cb30:	1c5c      	adds	r4, r3, #1
 800cb32:	bf13      	iteet	ne
 800cb34:	3301      	addne	r3, #1
 800cb36:	3501      	addeq	r5, #1
 800cb38:	4663      	moveq	r3, ip
 800cb3a:	f023 0301 	bicne.w	r3, r3, #1
 800cb3e:	106a      	asrs	r2, r5, #1
 800cb40:	085b      	lsrs	r3, r3, #1
 800cb42:	07e9      	lsls	r1, r5, #31
 800cb44:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cb48:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cb4c:	bf48      	it	mi
 800cb4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cb52:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cb56:	461c      	mov	r4, r3
 800cb58:	e780      	b.n	800ca5c <__ieee754_sqrt+0x30>
 800cb5a:	0aca      	lsrs	r2, r1, #11
 800cb5c:	3815      	subs	r0, #21
 800cb5e:	0549      	lsls	r1, r1, #21
 800cb60:	2a00      	cmp	r2, #0
 800cb62:	d0fa      	beq.n	800cb5a <__ieee754_sqrt+0x12e>
 800cb64:	02d6      	lsls	r6, r2, #11
 800cb66:	d50a      	bpl.n	800cb7e <__ieee754_sqrt+0x152>
 800cb68:	f1c3 0420 	rsb	r4, r3, #32
 800cb6c:	fa21 f404 	lsr.w	r4, r1, r4
 800cb70:	1e5d      	subs	r5, r3, #1
 800cb72:	4099      	lsls	r1, r3
 800cb74:	4322      	orrs	r2, r4
 800cb76:	1b43      	subs	r3, r0, r5
 800cb78:	e78b      	b.n	800ca92 <__ieee754_sqrt+0x66>
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	e7f0      	b.n	800cb60 <__ieee754_sqrt+0x134>
 800cb7e:	0052      	lsls	r2, r2, #1
 800cb80:	3301      	adds	r3, #1
 800cb82:	e7ef      	b.n	800cb64 <__ieee754_sqrt+0x138>
 800cb84:	46a0      	mov	r8, r4
 800cb86:	e7bf      	b.n	800cb08 <__ieee754_sqrt+0xdc>
 800cb88:	7ff00000 	.word	0x7ff00000

0800cb8c <matherr>:
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	4770      	bx	lr

0800cb90 <_init>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	bf00      	nop
 800cb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb96:	bc08      	pop	{r3}
 800cb98:	469e      	mov	lr, r3
 800cb9a:	4770      	bx	lr

0800cb9c <_fini>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	bf00      	nop
 800cba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba2:	bc08      	pop	{r3}
 800cba4:	469e      	mov	lr, r3
 800cba6:	4770      	bx	lr
