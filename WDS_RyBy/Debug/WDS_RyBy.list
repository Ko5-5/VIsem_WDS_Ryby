
WDS_RyBy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800cc08  0800cc08  0001cc08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd48  0800cd48  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd50  0800cd50  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd50  0800cd50  0001cd50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd54  0800cd54  0001cd54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800cd58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  20000278  0800cfd0  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001db4  0800cfd0  00021db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edf8  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004270  00000000  00000000  0003f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001618  00000000  00000000  00043310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00044928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c015  00000000  00000000  00045d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000161ce  00000000  00000000  00061d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096e22  00000000  00000000  00077f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010ed55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  0010edd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbf0 	.word	0x0800cbf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800cbf0 	.word	0x0800cbf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <MX_ADC1_Init+0xb8>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_ADC1_Init+0xbc>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4814      	ldr	r0, [pc, #80]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000efa:	f001 fa73 	bl	80023e4 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fc38 	bl	8001778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f10:	2307      	movs	r3, #7
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f1a:	f001 fb99 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fc28 	bl	8001778 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_ADC1_Init+0xb4>)
 8000f36:	f001 fb8b 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f40:	f000 fc1a 	bl	8001778 <Error_Handler>
  }

}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002c8 	.word	0x200002c8
 8000f50:	40012000 	.word	0x40012000
 8000f54:	0f000001 	.word	0x0f000001

08000f58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a2f      	ldr	r2, [pc, #188]	; (8001034 <HAL_ADC_MspInit+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d157      	bne.n	800102a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JOY_HORIZONTAL_Pin|JOY_VERTICAL_Pin;
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <HAL_ADC_MspInit+0xe4>)
 8000fc6:	f002 fae9 	bl	800359c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0xec>)
 8000fce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001000:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001010:	f001 ff26 	bl	8002e60 <HAL_DMA_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800101a:	f000 fbad 	bl	8001778 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_ADC_MspInit+0xe8>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012000 	.word	0x40012000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	20000310 	.word	0x20000310
 8001044:	40026410 	.word	0x40026410

08001048 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_CRC_Init+0x20>)
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <MX_CRC_Init+0x24>)
 8001050:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_CRC_Init+0x20>)
 8001054:	f001 febd 	bl	8002dd2 <HAL_CRC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800105e:	f000 fb8b 	bl	8001778 <Error_Handler>
  }

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000370 	.word	0x20000370
 800106c:	40023000 	.word	0x40023000

08001070 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_CRC_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_CRC_MspInit+0x40>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023000 	.word	0x40023000
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_DMA_Init+0x3c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2038      	movs	r0, #56	; 0x38
 80010dc:	f001 fe43 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010e0:	2038      	movs	r0, #56	; 0x38
 80010e2:	f001 fe5c 	bl	8002d9e <HAL_NVIC_EnableIRQ>

}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_GPIO_Init+0x12c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <MX_GPIO_Init+0x12c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a35      	ldr	r2, [pc, #212]	; (8001220 <MX_GPIO_Init+0x12c>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_GPIO_Init+0x12c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_LED_Pin|VIBROMOTOR_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f244 0102 	movw	r1, #16386	; 0x4002
 8001180:	4828      	ldr	r0, [pc, #160]	; (8001224 <MX_GPIO_Init+0x130>)
 8001182:	f002 fb8d 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT_1_IT_Pin|BUT_2_IT_Pin;
 8001186:	2303      	movs	r3, #3
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_GPIO_Init+0x134>)
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4824      	ldr	r0, [pc, #144]	; (800122c <MX_GPIO_Init+0x138>)
 800119a:	f002 f9ff 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin|VIBROMOTOR_Pin;
 800119e:	f244 0302 	movw	r3, #16386	; 0x4002
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	481b      	ldr	r0, [pc, #108]	; (8001224 <MX_GPIO_Init+0x130>)
 80011b8:	f002 f9f0 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = JOY_BUT_IT_Pin|ROT_BUT_IT_Pin;
 80011bc:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_GPIO_Init+0x134>)
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_GPIO_Init+0x130>)
 80011d2:	f002 f9e3 	bl	800359c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2006      	movs	r0, #6
 80011dc:	f001 fdc3 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e0:	2006      	movs	r0, #6
 80011e2:	f001 fddc 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2007      	movs	r0, #7
 80011ec:	f001 fdbb 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f001 fdd4 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200a      	movs	r0, #10
 80011fc:	f001 fdb3 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001200:	200a      	movs	r0, #10
 8001202:	f001 fdcc 	bl	8002d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2028      	movs	r0, #40	; 0x28
 800120c:	f001 fdab 	bl	8002d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001210:	2028      	movs	r0, #40	; 0x28
 8001212:	f001 fdc4 	bl	8002d9e <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400
 8001228:	10210000 	.word	0x10210000
 800122c:	40020000 	.word	0x40020000

08001230 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2C1_Init+0x50>)
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_I2C1_Init+0x54>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_I2C1_Init+0x50>)
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <MX_I2C1_Init+0x58>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_I2C1_Init+0x50>)
 800124e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001252:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_I2C1_Init+0x50>)
 800126e:	f002 fb49 	bl	8003904 <HAL_I2C_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001278:	f000 fa7e 	bl	8001778 <Error_Handler>
  }

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000378 	.word	0x20000378
 8001284:	40005400 	.word	0x40005400
 8001288:	00061a80 	.word	0x00061a80

0800128c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <HAL_I2C_MspInit+0xa4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d13b      	bne.n	8001326 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a1f      	ldr	r2, [pc, #124]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23c0      	movs	r3, #192	; 0xc0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012da:	2304      	movs	r3, #4
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <HAL_I2C_MspInit+0xac>)
 80012e6:	f002 f959 	bl	800359c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_I2C_MspInit+0xa8>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201f      	movs	r0, #31
 800130c:	f001 fd2b 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001310:	201f      	movs	r0, #31
 8001312:	f001 fd44 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2020      	movs	r0, #32
 800131c:	f001 fd23 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001320:	2020      	movs	r0, #32
 8001322:	f001 fd3c 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	00000000 	.word	0x00000000

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	b093      	sub	sp, #76	; 0x4c
 8001344:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 ffb9 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f973 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f7ff fed1 	bl	80010f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001352:	f7ff feaf 	bl	80010b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001356:	f7ff fd9f 	bl	8000e98 <MX_ADC1_Init>
  MX_I2C1_Init();
 800135a:	f7ff ff69 	bl	8001230 <MX_I2C1_Init>
  MX_TIM1_Init();
 800135e:	f000 fec3 	bl	80020e8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001362:	f009 ff57 	bl	800b214 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8001366:	f7ff fe6f 	bl	8001048 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

	//---- Akcelerometr i żyroskop
	while (MPU6050_Init(&hi2c1) == 1);
 800136a:	bf00      	nop
 800136c:	489e      	ldr	r0, [pc, #632]	; (80015e8 <main+0x2a8>)
 800136e:	f000 fa0a 	bl	8001786 <MPU6050_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d0f9      	beq.n	800136c <main+0x2c>
	//MPU6050_Init(&hi2c1);

	//---- Joystick ciągły pomiar
	HAL_ADC_Start_DMA(&hadc1, Joystick, 2);
 8001378:	2202      	movs	r2, #2
 800137a:	499c      	ldr	r1, [pc, #624]	; (80015ec <main+0x2ac>)
 800137c:	489c      	ldr	r0, [pc, #624]	; (80015f0 <main+0x2b0>)
 800137e:	f001 f875 	bl	800246c <HAL_ADC_Start_DMA>

	//---- Inicjalizacja enkodera
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8001382:	213c      	movs	r1, #60	; 0x3c
 8001384:	489b      	ldr	r0, [pc, #620]	; (80015f4 <main+0x2b4>)
 8001386:	f006 fd63 	bl	8007e50 <HAL_TIM_Encoder_Start_IT>


	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 800138a:	2201      	movs	r2, #1
 800138c:	2102      	movs	r1, #2
 800138e:	489a      	ldr	r0, [pc, #616]	; (80015f8 <main+0x2b8>)
 8001390:	f002 fa86 	bl	80038a0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		++MessageCounter;
 8001394:	4b99      	ldr	r3, [pc, #612]	; (80015fc <main+0x2bc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b97      	ldr	r3, [pc, #604]	; (80015fc <main+0x2bc>)
 800139e:	701a      	strb	r2, [r3, #0]
		Joystick[0] /= 40.96;
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <main+0x2ac>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	a38d      	add	r3, pc, #564	; (adr r3, 80015e0 <main+0x2a0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff fa4c 	bl	800084c <__aeabi_ddiv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	460c      	mov	r4, r1
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fbcc 	bl	8000b58 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b89      	ldr	r3, [pc, #548]	; (80015ec <main+0x2ac>)
 80013c6:	801a      	strh	r2, [r3, #0]
		Joystick[1] /= 40.96;
 80013c8:	4b88      	ldr	r3, [pc, #544]	; (80015ec <main+0x2ac>)
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8a9 	bl	8000524 <__aeabi_i2d>
 80013d2:	a383      	add	r3, pc, #524	; (adr r3, 80015e0 <main+0x2a0>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4618      	mov	r0, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	f7ff fbb8 	bl	8000b58 <__aeabi_d2uiz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b7f      	ldr	r3, [pc, #508]	; (80015ec <main+0x2ac>)
 80013ee:	805a      	strh	r2, [r3, #2]
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80013f0:	4983      	ldr	r1, [pc, #524]	; (8001600 <main+0x2c0>)
 80013f2:	487d      	ldr	r0, [pc, #500]	; (80015e8 <main+0x2a8>)
 80013f4:	f000 fa20 	bl	8001838 <MPU6050_Read_All>
		akcelerometr[0] = MPU6050.Ax;
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <main+0x2c0>)
 80013fa:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	f7ff fba9 	bl	8000b58 <__aeabi_d2uiz>
 8001406:	4603      	mov	r3, r0
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <main+0x2c4>)
 800140c:	801a      	strh	r2, [r3, #0]
		akcelerometr[1] = MPU6050.Ay;
 800140e:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <main+0x2c0>)
 8001410:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001414:	4618      	mov	r0, r3
 8001416:	4621      	mov	r1, r4
 8001418:	f7ff fb9e 	bl	8000b58 <__aeabi_d2uiz>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b78      	ldr	r3, [pc, #480]	; (8001604 <main+0x2c4>)
 8001422:	805a      	strh	r2, [r3, #2]
		akcelerometr[2] = MPU6050.Az;
 8001424:	4b76      	ldr	r3, [pc, #472]	; (8001600 <main+0x2c0>)
 8001426:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	f7ff fb93 	bl	8000b58 <__aeabi_d2uiz>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b73      	ldr	r3, [pc, #460]	; (8001604 <main+0x2c4>)
 8001438:	809a      	strh	r2, [r3, #4]
		zyroskop[0] = MPU6050.Gx;
 800143a:	4b71      	ldr	r3, [pc, #452]	; (8001600 <main+0x2c0>)
 800143c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f7ff fb88 	bl	8000b58 <__aeabi_d2uiz>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <main+0x2c8>)
 800144e:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gy;
 8001450:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <main+0x2c0>)
 8001452:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001456:	4618      	mov	r0, r3
 8001458:	4621      	mov	r1, r4
 800145a:	f7ff fb7d 	bl	8000b58 <__aeabi_d2uiz>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b69      	ldr	r3, [pc, #420]	; (8001608 <main+0x2c8>)
 8001464:	801a      	strh	r2, [r3, #0]
		zyroskop[0] = MPU6050.Gz;
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <main+0x2c0>)
 8001468:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800146c:	4618      	mov	r0, r3
 800146e:	4621      	mov	r1, r4
 8001470:	f7ff fb72 	bl	8000b58 <__aeabi_d2uiz>
 8001474:	4603      	mov	r3, r0
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b63      	ldr	r3, [pc, #396]	; (8001608 <main+0x2c8>)
 800147a:	801a      	strh	r2, [r3, #0]
		MessageLength = sprintf(DataToSend, "W %d %d %d %d %d %d %d %d %d %d %d %d \n\r", akcelerometr[0], akcelerometr[1], akcelerometr[2], zyroskop[0], zyroskop[0], zyroskop[0], przyciski[0], przyciski[1], Joystick[0], Joystick[1], JoyBut, count);
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <main+0x2c4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	469c      	mov	ip, r3
 8001482:	4b60      	ldr	r3, [pc, #384]	; (8001604 <main+0x2c4>)
 8001484:	885b      	ldrh	r3, [r3, #2]
 8001486:	469e      	mov	lr, r3
 8001488:	4b5e      	ldr	r3, [pc, #376]	; (8001604 <main+0x2c4>)
 800148a:	889b      	ldrh	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <main+0x2c8>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <main+0x2c8>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	4b5b      	ldr	r3, [pc, #364]	; (8001608 <main+0x2c8>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461c      	mov	r4, r3
 80014a0:	4b5a      	ldr	r3, [pc, #360]	; (800160c <main+0x2cc>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461d      	mov	r5, r3
 80014a8:	4b58      	ldr	r3, [pc, #352]	; (800160c <main+0x2cc>)
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461e      	mov	r6, r3
 80014b0:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <main+0x2ac>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <main+0x2ac>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	4b54      	ldr	r3, [pc, #336]	; (8001610 <main+0x2d0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <main+0x2d4>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	9306      	str	r3, [sp, #24]
 80014d8:	9605      	str	r6, [sp, #20]
 80014da:	9504      	str	r5, [sp, #16]
 80014dc:	9403      	str	r4, [sp, #12]
 80014de:	9002      	str	r0, [sp, #8]
 80014e0:	9101      	str	r1, [sp, #4]
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	4673      	mov	r3, lr
 80014e6:	4662      	mov	r2, ip
 80014e8:	494b      	ldr	r1, [pc, #300]	; (8001618 <main+0x2d8>)
 80014ea:	484c      	ldr	r0, [pc, #304]	; (800161c <main+0x2dc>)
 80014ec:	f00a fca4 	bl	800be38 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <main+0x2e0>)
 80014f6:	701a      	strb	r2, [r3, #0]
		uint16_t crc = HAL_CRC_Accumulate(&hcrc, (uint32_t*)DataToSend, sizeof(DataToSend)/(sizeof(uint32_t)));
 80014f8:	220a      	movs	r2, #10
 80014fa:	4948      	ldr	r1, [pc, #288]	; (800161c <main+0x2dc>)
 80014fc:	4849      	ldr	r0, [pc, #292]	; (8001624 <main+0x2e4>)
 80014fe:	f001 fc84 	bl	8002e0a <HAL_CRC_Accumulate>
 8001502:	4603      	mov	r3, r0
 8001504:	82fb      	strh	r3, [r7, #22]
		MessageLength = sprintf(DataToSend, "W %d %d %d %d %d %d %d %d %d %d %d %d %d \n\r", akcelerometr[0], akcelerometr[1], akcelerometr[2], zyroskop[0], zyroskop[0], zyroskop[0], przyciski[0], przyciski[1], Joystick[0], Joystick[1], JoyBut, count, crc);
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <main+0x2c4>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	469c      	mov	ip, r3
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <main+0x2c4>)
 800150e:	885b      	ldrh	r3, [r3, #2]
 8001510:	469e      	mov	lr, r3
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <main+0x2c4>)
 8001514:	889b      	ldrh	r3, [r3, #4]
 8001516:	461a      	mov	r2, r3
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <main+0x2c8>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4b3a      	ldr	r3, [pc, #232]	; (8001608 <main+0x2c8>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <main+0x2c8>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	461c      	mov	r4, r3
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <main+0x2cc>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461d      	mov	r5, r3
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <main+0x2cc>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	461e      	mov	r6, r3
 800153a:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <main+0x2ac>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <main+0x2ac>)
 8001542:	885b      	ldrh	r3, [r3, #2]
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <main+0x2d0>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <main+0x2d4>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b21b      	sxth	r3, r3
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	8afb      	ldrh	r3, [r7, #22]
 8001558:	930a      	str	r3, [sp, #40]	; 0x28
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	9308      	str	r3, [sp, #32]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	9307      	str	r3, [sp, #28]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	9306      	str	r3, [sp, #24]
 800156a:	9605      	str	r6, [sp, #20]
 800156c:	9504      	str	r5, [sp, #16]
 800156e:	9403      	str	r4, [sp, #12]
 8001570:	9002      	str	r0, [sp, #8]
 8001572:	9101      	str	r1, [sp, #4]
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	4673      	mov	r3, lr
 8001578:	4662      	mov	r2, ip
 800157a:	492b      	ldr	r1, [pc, #172]	; (8001628 <main+0x2e8>)
 800157c:	4827      	ldr	r0, [pc, #156]	; (800161c <main+0x2dc>)
 800157e:	f00a fc5b 	bl	800be38 <siprintf>
 8001582:	4603      	mov	r3, r0
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <main+0x2e0>)
 8001588:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(DataToSend, MessageLength);
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <main+0x2e0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <main+0x2dc>)
 8001594:	f009 ff12 	bl	800b3bc <CDC_Transmit_FS>
		przyciski[0] = 0;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <main+0x2cc>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
		przyciski[1] = 0;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <main+0x2cc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	705a      	strb	r2, [r3, #1]
		JoyBut = 0;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <main+0x2d0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
	    if(DataToRead[0] == 'e')
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <main+0x2ec>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b65      	cmp	r3, #101	; 0x65
 80015b0:	d106      	bne.n	80015c0 <main+0x280>
	    	HAL_GPIO_WritePin(VIBROMOTOR_GPIO_Port, VIBROMOTOR_Pin, 1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b8:	480f      	ldr	r0, [pc, #60]	; (80015f8 <main+0x2b8>)
 80015ba:	f002 f971 	bl	80038a0 <HAL_GPIO_WritePin>
 80015be:	e009      	b.n	80015d4 <main+0x294>
	    else if(DataToRead == "j")
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <main+0x2ec>)
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <main+0x2f0>)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d105      	bne.n	80015d4 <main+0x294>
	    	HAL_GPIO_WritePin(VIBROMOTOR_GPIO_Port, VIBROMOTOR_Pin, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <main+0x2b8>)
 80015d0:	f002 f966 	bl	80038a0 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f000 fee3 	bl	80023a0 <HAL_Delay>
	{
 80015da:	e6db      	b.n	8001394 <main+0x54>
 80015dc:	f3af 8000 	nop.w
 80015e0:	47ae147b 	.word	0x47ae147b
 80015e4:	40447ae1 	.word	0x40447ae1
 80015e8:	20000378 	.word	0x20000378
 80015ec:	200002a8 	.word	0x200002a8
 80015f0:	200002c8 	.word	0x200002c8
 80015f4:	20000494 	.word	0x20000494
 80015f8:	40020400 	.word	0x40020400
 80015fc:	200002b6 	.word	0x200002b6
 8001600:	200003d0 	.word	0x200003d0
 8001604:	20000294 	.word	0x20000294
 8001608:	2000029c 	.word	0x2000029c
 800160c:	200002a4 	.word	0x200002a4
 8001610:	200002ac 	.word	0x200002ac
 8001614:	200002b4 	.word	0x200002b4
 8001618:	0800cc08 	.word	0x0800cc08
 800161c:	20000428 	.word	0x20000428
 8001620:	200002b7 	.word	0x200002b7
 8001624:	20000370 	.word	0x20000370
 8001628:	0800cc34 	.word	0x0800cc34
 800162c:	20000450 	.word	0x20000450
 8001630:	0800cc60 	.word	0x0800cc60

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00a fb37 	bl	800bcb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <SystemClock_Config+0xc8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <SystemClock_Config+0xc8>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <SystemClock_Config+0xc8>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <SystemClock_Config+0xcc>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a20      	ldr	r2, [pc, #128]	; (8001700 <SystemClock_Config+0xcc>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <SystemClock_Config+0xcc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001690:	2301      	movs	r3, #1
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016a4:	2319      	movs	r3, #25
 80016a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0320 	add.w	r3, r7, #32
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 ff0f 	bl	80074dc <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c4:	f000 f858 	bl	8001778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2103      	movs	r1, #3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f006 f969 	bl	80079bc <HAL_RCC_ClockConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016f0:	f000 f842 	bl	8001778 <Error_Handler>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3750      	adds	r7, #80	; 0x50
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001714:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800171e:	801a      	strh	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	200002b0 	.word	0x200002b0
 8001730:	200002b4 	.word	0x200002b4

08001734 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == JOY_BUT_IT_Pin){
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d102      	bne.n	800174c <HAL_GPIO_EXTI_Callback+0x18>
		JoyBut = 1;
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_1_IT_Pin){
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d102      	bne.n	8001758 <HAL_GPIO_EXTI_Callback+0x24>
		przyciski[0] = 1;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_GPIO_EXTI_Callback+0x40>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == BUT_2_IT_Pin){
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d102      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x30>
		przyciski[1] = 1;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_GPIO_EXTI_Callback+0x40>)
 8001760:	2201      	movs	r2, #1
 8001762:	705a      	strb	r2, [r3, #1]
	}
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	200002ac 	.word	0x200002ac
 8001774:	200002a4 	.word	0x200002a4

08001778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b088      	sub	sp, #32
 800178a:	af04      	add	r7, sp, #16
 800178c:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800178e:	2364      	movs	r3, #100	; 0x64
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2301      	movs	r3, #1
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f107 030f 	add.w	r3, r7, #15
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2301      	movs	r3, #1
 800179e:	2275      	movs	r2, #117	; 0x75
 80017a0:	21d0      	movs	r1, #208	; 0xd0
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f002 fae0 	bl	8003d68 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b68      	cmp	r3, #104	; 0x68
 80017ac:	d13d      	bne.n	800182a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80017b2:	2364      	movs	r3, #100	; 0x64
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	2301      	movs	r3, #1
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	f107 030e 	add.w	r3, r7, #14
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2301      	movs	r3, #1
 80017c2:	226b      	movs	r2, #107	; 0x6b
 80017c4:	21d0      	movs	r1, #208	; 0xd0
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f002 f9d4 	bl	8003b74 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80017cc:	2307      	movs	r3, #7
 80017ce:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f107 030e 	add.w	r3, r7, #14
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	2219      	movs	r2, #25
 80017e2:	21d0      	movs	r1, #208	; 0xd0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f002 f9c5 	bl	8003b74 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 030e 	add.w	r3, r7, #14
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	221c      	movs	r2, #28
 8001800:	21d0      	movs	r1, #208	; 0xd0
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f002 f9b6 	bl	8003b74 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800180c:	2364      	movs	r3, #100	; 0x64
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	f107 030e 	add.w	r3, r7, #14
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	221b      	movs	r2, #27
 800181e:	21d0      	movs	r1, #208	; 0xd0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f002 f9a7 	bl	8003b74 <HAL_I2C_Mem_Write>
        return 0;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <MPU6050_Init+0xa6>
    }
    return 1;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	0000      	movs	r0, r0
	...

08001838 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800183c:	b094      	sub	sp, #80	; 0x50
 800183e:	af04      	add	r7, sp, #16
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	230e      	movs	r3, #14
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2301      	movs	r3, #1
 8001854:	223b      	movs	r2, #59	; 0x3b
 8001856:	21d0      	movs	r1, #208	; 0xd0
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f002 fa85 	bl	8003d68 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800185e:	7a3b      	ldrb	r3, [r7, #8]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	7a7b      	ldrb	r3, [r7, #9]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21a      	sxth	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001870:	7abb      	ldrb	r3, [r7, #10]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21a      	sxth	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001882:	7b3b      	ldrb	r3, [r7, #12]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	7b7b      	ldrb	r3, [r7, #13]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21a      	sxth	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b21a      	sxth	r2, r3
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80018a2:	7c3b      	ldrb	r3, [r7, #16]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	7c7b      	ldrb	r3, [r7, #17]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80018b4:	7cbb      	ldrb	r3, [r7, #18]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	7cfb      	ldrb	r3, [r7, #19]
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4313      	orrs	r3, r2
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80018c6:	7d3b      	ldrb	r3, [r7, #20]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	7d7b      	ldrb	r3, [r7, #21]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe20 	bl	8000524 <__aeabi_i2d>
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4bbd      	ldr	r3, [pc, #756]	; (8001be0 <MPU6050_Read_All+0x3a8>)
 80018ea:	f7fe ffaf 	bl	800084c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe10 	bl	8000524 <__aeabi_i2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4bb5      	ldr	r3, [pc, #724]	; (8001be0 <MPU6050_Read_All+0x3a8>)
 800190a:	f7fe ff9f 	bl	800084c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	6839      	ldr	r1, [r7, #0]
 8001914:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe00 	bl	8000524 <__aeabi_i2d>
 8001924:	a3a8      	add	r3, pc, #672	; (adr r3, 8001bc8 <MPU6050_Read_All+0x390>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe ff8f 	bl	800084c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	6839      	ldr	r1, [r7, #0]
 8001934:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001938:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001944:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001be4 <MPU6050_Read_All+0x3ac>
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001be8 <MPU6050_Read_All+0x3b0>
 8001950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fddf 	bl	8000524 <__aeabi_i2d>
 8001966:	a39a      	add	r3, pc, #616	; (adr r3, 8001bd0 <MPU6050_Read_All+0x398>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe ff6e 	bl	800084c <__aeabi_ddiv>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	6839      	ldr	r1, [r7, #0]
 8001976:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdcf 	bl	8000524 <__aeabi_i2d>
 8001986:	a392      	add	r3, pc, #584	; (adr r3, 8001bd0 <MPU6050_Read_All+0x398>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe ff5e 	bl	800084c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	6839      	ldr	r1, [r7, #0]
 8001996:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdbf 	bl	8000524 <__aeabi_i2d>
 80019a6:	a38a      	add	r3, pc, #552	; (adr r3, 8001bd0 <MPU6050_Read_All+0x398>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe ff4e 	bl	800084c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	6839      	ldr	r1, [r7, #0]
 80019b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80019ba:	f000 fce5 	bl	8002388 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b8a      	ldr	r3, [pc, #552]	; (8001bec <MPU6050_Read_All+0x3b4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd9c 	bl	8000504 <__aeabi_ui2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <MPU6050_Read_All+0x3b8>)
 80019d2:	f7fe ff3b 	bl	800084c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80019de:	f000 fcd3 	bl	8002388 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b81      	ldr	r3, [pc, #516]	; (8001bec <MPU6050_Read_All+0x3b4>)
 80019e6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f6:	fb03 f202 	mul.w	r2, r3, r2
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a00:	4619      	mov	r1, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a08:	fb03 f301 	mul.w	r3, r3, r1
 8001a0c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd88 	bl	8000524 <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b10 	vmov	d0, r2, r3
 8001a1c:	f00a fefc 	bl	800c818 <sqrt>
 8001a20:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a30:	f7ff f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d11f      	bne.n	8001a7a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd6f 	bl	8000524 <__aeabi_i2d>
 8001a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4a:	f7fe feff 	bl	800084c <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	ec43 2b17 	vmov	d7, r2, r3
 8001a56:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5a:	eef0 0a67 	vmov.f32	s1, s15
 8001a5e:	f00a fd2f 	bl	800c4c0 <atan>
 8001a62:	ec51 0b10 	vmov	r0, r1, d0
 8001a66:	a35c      	add	r3, pc, #368	; (adr r3, 8001bd8 <MPU6050_Read_All+0x3a0>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fdc4 	bl	80005f8 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a78:	e005      	b.n	8001a86 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	425b      	negs	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd48 	bl	8000524 <__aeabi_i2d>
 8001a94:	4682      	mov	sl, r0
 8001a96:	468b      	mov	fp, r1
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd40 	bl	8000524 <__aeabi_i2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b11 	vmov	d1, r2, r3
 8001aac:	ec4b ab10 	vmov	d0, sl, fp
 8001ab0:	f00a feaf 	bl	800c812 <atan2>
 8001ab4:	ec51 0b10 	vmov	r0, r1, d0
 8001ab8:	a347      	add	r3, pc, #284	; (adr r3, 8001bd8 <MPU6050_Read_All+0x3a0>)
 8001aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abe:	f7fe fd9b 	bl	80005f8 <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <MPU6050_Read_All+0x3bc>)
 8001ad0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ad4:	f7ff f802 	bl	8000adc <__aeabi_dcmplt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <MPU6050_Read_All+0x2bc>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <MPU6050_Read_All+0x3c0>)
 8001aea:	f7ff f815 	bl	8000b18 <__aeabi_dcmpgt>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d114      	bne.n	8001b1e <MPU6050_Read_All+0x2e6>
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <MPU6050_Read_All+0x3c0>)
 8001afa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001afe:	f7ff f80b 	bl	8000b18 <__aeabi_dcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <MPU6050_Read_All+0x2fc>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <MPU6050_Read_All+0x3bc>)
 8001b14:	f7fe ffe2 	bl	8000adc <__aeabi_dcmplt>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00a      	beq.n	8001b34 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001b1e:	4937      	ldr	r1, [pc, #220]	; (8001bfc <MPU6050_Read_All+0x3c4>)
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b32:	e014      	b.n	8001b5e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001b3a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b3e:	eeb0 1a47 	vmov.f32	s2, s14
 8001b42:	eef0 1a67 	vmov.f32	s3, s15
 8001b46:	ed97 0b06 	vldr	d0, [r7, #24]
 8001b4a:	482c      	ldr	r0, [pc, #176]	; (8001bfc <MPU6050_Read_All+0x3c4>)
 8001b4c:	f000 f85a 	bl	8001c04 <Kalman_getAngle>
 8001b50:	eeb0 7a40 	vmov.f32	s14, s0
 8001b54:	eef0 7a60 	vmov.f32	s15, s1
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b64:	4690      	mov	r8, r2
 8001b66:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <MPU6050_Read_All+0x3c0>)
 8001b70:	4640      	mov	r0, r8
 8001b72:	4649      	mov	r1, r9
 8001b74:	f7fe ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b84:	4614      	mov	r4, r2
 8001b86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001b96:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001b9a:	eeb0 1a47 	vmov.f32	s2, s14
 8001b9e:	eef0 1a67 	vmov.f32	s3, s15
 8001ba2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001ba6:	4816      	ldr	r0, [pc, #88]	; (8001c00 <MPU6050_Read_All+0x3c8>)
 8001ba8:	f000 f82c 	bl	8001c04 <Kalman_getAngle>
 8001bac:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb0:	eef0 7a60 	vmov.f32	s15, s1
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001bba:	bf00      	nop
 8001bbc:	3740      	adds	r7, #64	; 0x40
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40cc2900 	.word	0x40cc2900
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40606000 	.word	0x40606000
 8001bd8:	1a63c1f8 	.word	0x1a63c1f8
 8001bdc:	404ca5dc 	.word	0x404ca5dc
 8001be0:	40d00000 	.word	0x40d00000
 8001be4:	43aa0000 	.word	0x43aa0000
 8001be8:	42121eb8 	.word	0x42121eb8
 8001bec:	20000490 	.word	0x20000490
 8001bf0:	408f4000 	.word	0x408f4000
 8001bf4:	c0568000 	.word	0xc0568000
 8001bf8:	40568000 	.word	0x40568000
 8001bfc:	20000048 	.word	0x20000048
 8001c00:	20000000 	.word	0x20000000

08001c04 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b096      	sub	sp, #88	; 0x58
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	61f8      	str	r0, [r7, #28]
 8001c0c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001c10:	ed87 1b02 	vstr	d1, [r7, #8]
 8001c14:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c26:	f7fe fb2f 	bl	8000288 <__aeabi_dsub>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c40:	f7fe fcda 	bl	80005f8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4620      	mov	r0, r4
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f7fe fb1e 	bl	800028c <__adddf3>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c7c:	f7fe fb04 	bl	8000288 <__aeabi_dsub>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c8e:	f7fe fafb 	bl	8000288 <__aeabi_dsub>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb0:	f7fe fca2 	bl	80005f8 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f7fe fae6 	bl	800028c <__adddf3>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cda:	f7fe fc8d 	bl	80005f8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe facf 	bl	8000288 <__aeabi_dsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d04:	f7fe fc78 	bl	80005f8 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe faba 	bl	8000288 <__aeabi_dsub>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d2e:	f7fe fc63 	bl	80005f8 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4620      	mov	r0, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	f7fe faa7 	bl	800028c <__adddf3>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	f7fe fa98 	bl	800028c <__adddf3>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d6e:	f7fe fd6d 	bl	800084c <__aeabi_ddiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d84:	f7fe fd62 	bl	800084c <__aeabi_ddiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4623      	mov	r3, r4
 8001d9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d9e:	f7fe fa73 	bl	8000288 <__aeabi_dsub>
 8001da2:	4603      	mov	r3, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001db0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001db4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001db8:	f7fe fc1e 	bl	80005f8 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fa62 	bl	800028c <__adddf3>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001dd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ddc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001de0:	f7fe fc0a 	bl	80005f8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe fa4e 	bl	800028c <__adddf3>
 8001df0:	4603      	mov	r3, r0
 8001df2:	460c      	mov	r4, r1
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001e00:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001e0a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e1c:	f7fe fbec 	bl	80005f8 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fa2e 	bl	8000288 <__aeabi_dsub>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	460c      	mov	r4, r1
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e44:	f7fe fbd8 	bl	80005f8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fa1a 	bl	8000288 <__aeabi_dsub>
 8001e54:	4603      	mov	r3, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e64:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe fa06 	bl	8000288 <__aeabi_dsub>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e94:	f7fe fbb0 	bl	80005f8 <__aeabi_dmul>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe f9f2 	bl	8000288 <__aeabi_dsub>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001eb4:	ec44 3b17 	vmov	d7, r3, r4
};
 8001eb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ebc:	eef0 0a67 	vmov.f32	s1, s15
 8001ec0:	3758      	adds	r7, #88	; 0x58
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_MspInit+0x4c>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f9f8 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f001 fcab 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f001 fca4 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f94:	2010      	movs	r0, #16
 8001f96:	f001 fc9d 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001fa6:	f005 ffaa 	bl	8007efe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000494 	.word	0x20000494

08001fb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fba:	f005 ffa0 	bl	8007efe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000494 	.word	0x20000494

08001fc8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001fce:	f005 ff96 	bl	8007efe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000494 	.word	0x20000494

08001fdc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM1_CC_IRQHandler+0x10>)
 8001fe2:	f005 ff8c 	bl	8007efe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000494 	.word	0x20000494

08001ff0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <I2C1_EV_IRQHandler+0x10>)
 8001ff6:	f002 f8dd 	bl	80041b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000378 	.word	0x20000378

08002004 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <I2C1_ER_IRQHandler+0x10>)
 800200a:	f002 fa40 	bl	800448e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000378 	.word	0x20000378

08002018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800201c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002020:	f001 fc58 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA2_Stream0_IRQHandler+0x10>)
 800202e:	f001 f83f 	bl	80030b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000310 	.word	0x20000310

0800203c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <OTG_FS_IRQHandler+0x10>)
 8002042:	f004 fa17 	bl	8006474 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200019a8 	.word	0x200019a8

08002050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <_sbrk+0x5c>)
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <_sbrk+0x60>)
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_sbrk+0x64>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <_sbrk+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d207      	bcs.n	8002090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002080:	f009 fdd4 	bl	800bc2c <__errno>
 8002084:	4602      	mov	r2, r0
 8002086:	230c      	movs	r3, #12
 8002088:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800208e:	e009      	b.n	80020a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <_sbrk+0x64>)
 80020a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20020000 	.word	0x20020000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	200002b8 	.word	0x200002b8
 80020b8:	20001db8 	.word	0x20001db8

080020bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <SystemInit+0x28>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <SystemInit+0x28>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <SystemInit+0x28>)
 80020d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020d6:	609a      	str	r2, [r3, #8]
#endif
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f009 fddd 	bl	800bcb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002106:	4a23      	ldr	r2, [pc, #140]	; (8002194 <MX_TIM1_Init+0xac>)
 8002108:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MX_TIM1_Init+0xa8>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800211c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_TIM1_Init+0xa8>)
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002130:	2303      	movs	r3, #3
 8002132:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002134:	2302      	movs	r3, #2
 8002136:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002138:	2301      	movs	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002140:	230a      	movs	r3, #10
 8002142:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002148:	2301      	movs	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002150:	230a      	movs	r3, #10
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	4619      	mov	r1, r3
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <MX_TIM1_Init+0xa8>)
 800215c:	f005 fde6 	bl	8007d2c <HAL_TIM_Encoder_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002166:	f7ff fb07 	bl	8001778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_TIM1_Init+0xa8>)
 8002178:	f006 f898 	bl	80082ac <HAL_TIMEx_MasterConfigSynchronization>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002182:	f7ff faf9 	bl	8001778 <Error_Handler>
  }

}
 8002186:	bf00      	nop
 8002188:	3730      	adds	r7, #48	; 0x30
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000494 	.word	0x20000494
 8002194:	40010000 	.word	0x40010000

08002198 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a29      	ldr	r2, [pc, #164]	; (800225c <HAL_TIM_Encoder_MspInit+0xc4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d14c      	bne.n	8002254 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fc:	2301      	movs	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4815      	ldr	r0, [pc, #84]	; (8002264 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002210:	f001 f9c4 	bl	800359c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2018      	movs	r0, #24
 800221a:	f000 fda4 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800221e:	2018      	movs	r0, #24
 8002220:	f000 fdbd 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002224:	2200      	movs	r2, #0
 8002226:	2100      	movs	r1, #0
 8002228:	2019      	movs	r0, #25
 800222a:	f000 fd9c 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800222e:	2019      	movs	r0, #25
 8002230:	f000 fdb5 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	201a      	movs	r0, #26
 800223a:	f000 fd94 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800223e:	201a      	movs	r0, #26
 8002240:	f000 fdad 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	201b      	movs	r0, #27
 800224a:	f000 fd8c 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800224e:	201b      	movs	r0, #27
 8002250:	f000 fda5 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010000 	.word	0x40010000
 8002260:	40023800 	.word	0x40023800
 8002264:	40020000 	.word	0x40020000

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800226c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800226e:	e003      	b.n	8002278 <LoopCopyDataInit>

08002270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002276:	3104      	adds	r1, #4

08002278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800227c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800227e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002280:	d3f6      	bcc.n	8002270 <CopyDataInit>
  ldr  r2, =_sbss
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002284:	e002      	b.n	800228c <LoopFillZerobss>

08002286 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002288:	f842 3b04 	str.w	r3, [r2], #4

0800228c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800228e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002290:	d3f9      	bcc.n	8002286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002292:	f7ff ff13 	bl	80020bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002296:	f009 fccf 	bl	800bc38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7ff f851 	bl	8001340 <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022a4:	0800cd58 	.word	0x0800cd58
  ldr  r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022ac:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 80022b0:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 80022b4:	20001db4 	.word	0x20001db4

080022b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <HAL_Init+0x40>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_Init+0x40>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_Init+0x40>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 fd33 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fdea 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd4b 	bl	8002dba <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800233c:	f000 fd13 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000090 	.word	0x20000090
 8002358:	20000098 	.word	0x20000098
 800235c:	20000094 	.word	0x20000094

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000098 	.word	0x20000098
 8002384:	200004d4 	.word	0x200004d4

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200004d4 	.word	0x200004d4

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_Delay+0x40>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffde 	bl	8002388 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000098 	.word	0x20000098

080023e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e033      	b.n	8002462 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fda8 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800242a:	f023 0302 	bic.w	r3, r3, #2
 800242e:	f043 0202 	orr.w	r2, r3, #2
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa3c 	bl	80028b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
 8002452:	e001      	b.n	8002458 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start_DMA+0x1e>
 8002486:	2302      	movs	r3, #2
 8002488:	e0b1      	b.n	80025ee <HAL_ADC_Start_DMA+0x182>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d018      	beq.n	80024d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024b0:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_ADC_Start_DMA+0x18c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_ADC_Start_DMA+0x190>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 8085 	bne.w	80025ec <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024ea:	f023 0301 	bic.w	r3, r3, #1
 80024ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800250c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d106      	bne.n	8002530 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f023 0206 	bic.w	r2, r3, #6
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
 800252e:	e002      	b.n	8002536 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_ADC_Start_DMA+0x194>)
 8002540:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <HAL_ADC_Start_DMA+0x198>)
 8002548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <HAL_ADC_Start_DMA+0x19c>)
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a2d      	ldr	r2, [pc, #180]	; (800260c <HAL_ADC_Start_DMA+0x1a0>)
 8002558:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002562:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002572:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002582:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	334c      	adds	r3, #76	; 0x4c
 800258e:	4619      	mov	r1, r3
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f000 fd12 	bl	8002fbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10f      	bne.n	80025c4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11c      	bne.n	80025ec <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	e013      	b.n	80025ec <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_ADC_Start_DMA+0x1a4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10e      	bne.n	80025ec <HAL_ADC_Start_DMA+0x180>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000090 	.word	0x20000090
 80025fc:	431bde83 	.word	0x431bde83
 8002600:	40012300 	.word	0x40012300
 8002604:	08002aad 	.word	0x08002aad
 8002608:	08002b67 	.word	0x08002b67
 800260c:	08002b83 	.word	0x08002b83
 8002610:	40012000 	.word	0x40012000

08002614 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1c>
 8002668:	2302      	movs	r3, #2
 800266a:	e113      	b.n	8002894 <HAL_ADC_ConfigChannel+0x244>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d925      	bls.n	80026c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68d9      	ldr	r1, [r3, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	3b1e      	subs	r3, #30
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43da      	mvns	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	400a      	ands	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4403      	add	r3, r0
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	409a      	lsls	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e022      	b.n	800270e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	2207      	movs	r2, #7
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4403      	add	r3, r0
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d824      	bhi.n	8002760 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b05      	subs	r3, #5
 8002728:	221f      	movs	r2, #31
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b05      	subs	r3, #5
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	e04c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d824      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b23      	subs	r3, #35	; 0x23
 800277a:	221f      	movs	r2, #31
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b23      	subs	r3, #35	; 0x23
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
 80027b0:	e023      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b41      	subs	r3, #65	; 0x41
 80027c4:	221f      	movs	r2, #31
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b41      	subs	r3, #65	; 0x41
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fa:	4b29      	ldr	r3, [pc, #164]	; (80028a0 <HAL_ADC_ConfigChannel+0x250>)
 80027fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <HAL_ADC_ConfigChannel+0x254>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10f      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d8>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b12      	cmp	r3, #18
 800280e:	d10b      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_ADC_ConfigChannel+0x254>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d12b      	bne.n	800288a <HAL_ADC_ConfigChannel+0x23a>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_ADC_ConfigChannel+0x258>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x1f4>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b11      	cmp	r3, #17
 8002842:	d122      	bne.n	800288a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_ADC_ConfigChannel+0x258>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d111      	bne.n	800288a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_ADC_ConfigChannel+0x25c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <HAL_ADC_ConfigChannel+0x260>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	0c9a      	lsrs	r2, r3, #18
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800287c:	e002      	b.n	8002884 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	3b01      	subs	r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40012300 	.word	0x40012300
 80028a4:	40012000 	.word	0x40012000
 80028a8:	10000012 	.word	0x10000012
 80028ac:	20000090 	.word	0x20000090
 80028b0:	431bde83 	.word	0x431bde83

080028b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <ADC_Init+0x1f0>)
 80028be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	021a      	lsls	r2, r3, #8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800290c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <ADC_Init+0x1f4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800297c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e00f      	b.n	80029b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0202 	bic.w	r2, r2, #2
 80029c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6899      	ldr	r1, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e1b      	ldrb	r3, [r3, #24]
 80029cc:	005a      	lsls	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6859      	ldr	r1, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	035a      	lsls	r2, r3, #13
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	e007      	b.n	8002a28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	051a      	lsls	r2, r3, #20
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a6a:	025a      	lsls	r2, r3, #9
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	029a      	lsls	r2, r3, #10
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40012300 	.word	0x40012300
 8002aa8:	0f000001 	.word	0x0f000001

08002aac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d13c      	bne.n	8002b40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d12b      	bne.n	8002b38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d127      	bne.n	8002b38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d119      	bne.n	8002b38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0220 	bic.w	r2, r2, #32
 8002b12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff fd6b 	bl	8002614 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b3e:	e00e      	b.n	8002b5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff fd75 	bl	800263c <HAL_ADC_ErrorCallback>
}
 8002b52:	e004      	b.n	8002b5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff fd57 	bl	8002628 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2240      	movs	r2, #64	; 0x40
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7ff fd4a 	bl	800263c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be2:	4a04      	ldr	r2, [pc, #16]	; (8002bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	60d3      	str	r3, [r2, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <__NVIC_GetPriorityGrouping+0x18>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	f003 0307 	and.w	r3, r3, #7
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db0b      	blt.n	8002c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <__NVIC_EnableIRQ+0x38>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d30:	f7ff ff8e 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff29 	bl	8002bb0 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff3e 	bl	8002bf8 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff8e 	bl	8002ca4 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5d 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff31 	bl	8002c14 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e00e      	b.n	8002e02 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	795b      	ldrb	r3, [r3, #5]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe f93b 	bl	8001070 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b087      	sub	sp, #28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e00a      	b.n	8002e3c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3f0      	bcc.n	8002e26 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002e52:	693b      	ldr	r3, [r7, #16]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff fa8c 	bl	8002388 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e099      	b.n	8002fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9c:	e00f      	b.n	8002ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9e:	f7ff fa73 	bl	8002388 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d908      	bls.n	8002ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e078      	b.n	8002fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e8      	bne.n	8002e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_DMA_Init+0x158>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d107      	bne.n	8002f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	4313      	orrs	r3, r2
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0307 	bic.w	r3, r3, #7
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d117      	bne.n	8002f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa9f 	bl	80034a8 <DMA_CheckFifoParam>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e016      	b.n	8002fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa56 	bl	800343c <DMA_CalcBaseAndBitshift>
 8002f90:	4603      	mov	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	223f      	movs	r2, #63	; 0x3f
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	f010803f 	.word	0xf010803f

08002fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_Start_IT+0x26>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e040      	b.n	8003064 <HAL_DMA_Start_IT+0xa8>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12f      	bne.n	8003056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f9e8 	bl	80033e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	223f      	movs	r2, #63	; 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0216 	orr.w	r2, r2, #22
 800302a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e005      	b.n	8003062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d004      	beq.n	800308a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00c      	b.n	80030a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2205      	movs	r2, #5
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <HAL_DMA_IRQHandler+0x258>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a92      	ldr	r2, [pc, #584]	; (800330c <HAL_DMA_IRQHandler+0x25c>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	2208      	movs	r2, #8
 80030dc:	409a      	lsls	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01a      	beq.n	800311c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d013      	beq.n	800311c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0204 	bic.w	r2, r2, #4
 8003102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	2208      	movs	r2, #8
 800310a:	409a      	lsls	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2201      	movs	r2, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f043 0202 	orr.w	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	2204      	movs	r2, #4
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	2204      	movs	r2, #4
 8003176:	409a      	lsls	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f043 0204 	orr.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	2210      	movs	r2, #16
 800318e:	409a      	lsls	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d043      	beq.n	8003220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03c      	beq.n	8003220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	2210      	movs	r2, #16
 80031ac:	409a      	lsls	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d018      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d024      	beq.n	8003220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	4798      	blx	r3
 80031de:	e01f      	b.n	8003220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
 80031f0:	e016      	b.n	8003220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d107      	bne.n	8003210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0208 	bic.w	r2, r2, #8
 800320e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	2220      	movs	r2, #32
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 808e 	beq.w	800334e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8086 	beq.w	800334e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	2220      	movs	r2, #32
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b05      	cmp	r3, #5
 8003258:	d136      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0216 	bic.w	r2, r2, #22
 8003268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <HAL_DMA_IRQHandler+0x1da>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0208 	bic.w	r2, r2, #8
 8003298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	223f      	movs	r2, #63	; 0x3f
 80032a0:	409a      	lsls	r2, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d07d      	beq.n	80033ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
        }
        return;
 80032c6:	e078      	b.n	80033ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d01c      	beq.n	8003310 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d108      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d030      	beq.n	800334e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e02b      	b.n	800334e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d027      	beq.n	800334e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e022      	b.n	800334e <HAL_DMA_IRQHandler+0x29e>
 8003308:	20000090 	.word	0x20000090
 800330c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10f      	bne.n	800333e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0210 	bic.w	r2, r2, #16
 800332c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	2b00      	cmp	r3, #0
 8003354:	d032      	beq.n	80033bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d022      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2205      	movs	r2, #5
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	429a      	cmp	r2, r3
 8003384:	d307      	bcc.n	8003396 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f2      	bne.n	800337a <HAL_DMA_IRQHandler+0x2ca>
 8003394:	e000      	b.n	8003398 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003396:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e000      	b.n	80033bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80033ba:	bf00      	nop
    }
  }
}
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d2:	b2db      	uxtb	r3, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b40      	cmp	r3, #64	; 0x40
 800340c:	d108      	bne.n	8003420 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800341e:	e007      	b.n	8003430 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	3b10      	subs	r3, #16
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <DMA_CalcBaseAndBitshift+0x64>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003456:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d909      	bls.n	800347e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	1d1a      	adds	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	659a      	str	r2, [r3, #88]	; 0x58
 800347c:	e007      	b.n	800348e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	aaaaaaab 	.word	0xaaaaaaab
 80034a4:	0800ccc0 	.word	0x0800ccc0

080034a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11f      	bne.n	8003502 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d855      	bhi.n	8003574 <DMA_CheckFifoParam+0xcc>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <DMA_CheckFifoParam+0x28>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f3 	.word	0x080034f3
 80034d8:	080034e1 	.word	0x080034e1
 80034dc:	08003575 	.word	0x08003575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d045      	beq.n	8003578 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e042      	b.n	8003578 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034fa:	d13f      	bne.n	800357c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e03c      	b.n	800357c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350a:	d121      	bne.n	8003550 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d836      	bhi.n	8003580 <DMA_CheckFifoParam+0xd8>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <DMA_CheckFifoParam+0x70>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	0800352f 	.word	0x0800352f
 8003520:	08003529 	.word	0x08003529
 8003524:	08003541 	.word	0x08003541
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e02f      	b.n	800358e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353e:	e021      	b.n	8003584 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003548:	d11e      	bne.n	8003588 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800354e:	e01b      	b.n	8003588 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d902      	bls.n	800355c <DMA_CheckFifoParam+0xb4>
 8003556:	2b03      	cmp	r3, #3
 8003558:	d003      	beq.n	8003562 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800355a:	e018      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e015      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      break;
 8003572:	e00b      	b.n	800358c <DMA_CheckFifoParam+0xe4>
      break;
 8003574:	bf00      	nop
 8003576:	e00a      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 8003578:	bf00      	nop
 800357a:	e008      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 800357c:	bf00      	nop
 800357e:	e006      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 8003580:	bf00      	nop
 8003582:	e004      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 8003584:	bf00      	nop
 8003586:	e002      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;   
 8003588:	bf00      	nop
 800358a:	e000      	b.n	800358e <DMA_CheckFifoParam+0xe6>
      break;
 800358c:	bf00      	nop
    }
  } 
  
  return status; 
 800358e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e159      	b.n	800386c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8148 	bne.w	8003866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d00b      	beq.n	80035f6 <HAL_GPIO_Init+0x5a>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d007      	beq.n	80035f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035ea:	2b11      	cmp	r3, #17
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d130      	bne.n	8003658 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	2203      	movs	r2, #3
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800362c:	2201      	movs	r2, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 0201 	and.w	r2, r3, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0xfc>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b12      	cmp	r3, #18
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a2 	beq.w	8003866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b56      	ldr	r3, [pc, #344]	; (8003880 <HAL_GPIO_Init+0x2e4>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	4a55      	ldr	r2, [pc, #340]	; (8003880 <HAL_GPIO_Init+0x2e4>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003730:	6453      	str	r3, [r2, #68]	; 0x44
 8003732:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_GPIO_Init+0x2e4>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373e:	4a51      	ldr	r2, [pc, #324]	; (8003884 <HAL_GPIO_Init+0x2e8>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a48      	ldr	r2, [pc, #288]	; (8003888 <HAL_GPIO_Init+0x2ec>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d019      	beq.n	800379e <HAL_GPIO_Init+0x202>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a47      	ldr	r2, [pc, #284]	; (800388c <HAL_GPIO_Init+0x2f0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0x1fe>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a46      	ldr	r2, [pc, #280]	; (8003890 <HAL_GPIO_Init+0x2f4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00d      	beq.n	8003796 <HAL_GPIO_Init+0x1fa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a45      	ldr	r2, [pc, #276]	; (8003894 <HAL_GPIO_Init+0x2f8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <HAL_GPIO_Init+0x1f6>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a44      	ldr	r2, [pc, #272]	; (8003898 <HAL_GPIO_Init+0x2fc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_GPIO_Init+0x1f2>
 800378a:	2304      	movs	r3, #4
 800378c:	e008      	b.n	80037a0 <HAL_GPIO_Init+0x204>
 800378e:	2307      	movs	r3, #7
 8003790:	e006      	b.n	80037a0 <HAL_GPIO_Init+0x204>
 8003792:	2303      	movs	r3, #3
 8003794:	e004      	b.n	80037a0 <HAL_GPIO_Init+0x204>
 8003796:	2302      	movs	r3, #2
 8003798:	e002      	b.n	80037a0 <HAL_GPIO_Init+0x204>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_GPIO_Init+0x204>
 800379e:	2300      	movs	r3, #0
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	f002 0203 	and.w	r2, r2, #3
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	4093      	lsls	r3, r2
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037b0:	4934      	ldr	r1, [pc, #208]	; (8003884 <HAL_GPIO_Init+0x2e8>)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	3302      	adds	r3, #2
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_GPIO_Init+0x300>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e2:	4a2e      	ldr	r2, [pc, #184]	; (800389c <HAL_GPIO_Init+0x300>)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <HAL_GPIO_Init+0x300>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_GPIO_Init+0x300>)
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_GPIO_Init+0x300>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	43db      	mvns	r3, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4013      	ands	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_GPIO_Init+0x300>)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_GPIO_Init+0x300>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003860:	4a0e      	ldr	r2, [pc, #56]	; (800389c <HAL_GPIO_Init+0x300>)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3301      	adds	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	f67f aea2 	bls.w	80035b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003874:	bf00      	nop
 8003876:	3724      	adds	r7, #36	; 0x24
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40023800 	.word	0x40023800
 8003884:	40013800 	.word	0x40013800
 8003888:	40020000 	.word	0x40020000
 800388c:	40020400 	.word	0x40020400
 8003890:	40020800 	.word	0x40020800
 8003894:	40020c00 	.word	0x40020c00
 8003898:	40021000 	.word	0x40021000
 800389c:	40013c00 	.word	0x40013c00

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038bc:	e003      	b.n	80038c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038be:	887b      	ldrh	r3, [r7, #2]
 80038c0:	041a      	lsls	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ea:	4a05      	ldr	r2, [pc, #20]	; (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd ff1e 	bl	8001734 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40013c00 	.word	0x40013c00

08003904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e11f      	b.n	8003b56 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fcae 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003968:	f004 f9cc 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 800396c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4a7b      	ldr	r2, [pc, #492]	; (8003b60 <HAL_I2C_Init+0x25c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d807      	bhi.n	8003988 <HAL_I2C_Init+0x84>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a7a      	ldr	r2, [pc, #488]	; (8003b64 <HAL_I2C_Init+0x260>)
 800397c:	4293      	cmp	r3, r2
 800397e:	bf94      	ite	ls
 8003980:	2301      	movls	r3, #1
 8003982:	2300      	movhi	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	e006      	b.n	8003996 <HAL_I2C_Init+0x92>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a77      	ldr	r2, [pc, #476]	; (8003b68 <HAL_I2C_Init+0x264>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0db      	b.n	8003b56 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a72      	ldr	r2, [pc, #456]	; (8003b6c <HAL_I2C_Init+0x268>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0c9b      	lsrs	r3, r3, #18
 80039a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a64      	ldr	r2, [pc, #400]	; (8003b60 <HAL_I2C_Init+0x25c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d802      	bhi.n	80039d8 <HAL_I2C_Init+0xd4>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	e009      	b.n	80039ec <HAL_I2C_Init+0xe8>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a63      	ldr	r2, [pc, #396]	; (8003b70 <HAL_I2C_Init+0x26c>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	3301      	adds	r3, #1
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	4956      	ldr	r1, [pc, #344]	; (8003b60 <HAL_I2C_Init+0x25c>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d80d      	bhi.n	8003a28 <HAL_I2C_Init+0x124>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e59      	subs	r1, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	bf38      	it	cc
 8003a24:	2304      	movcc	r3, #4
 8003a26:	e04f      	b.n	8003ac8 <HAL_I2C_Init+0x1c4>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d111      	bne.n	8003a54 <HAL_I2C_Init+0x150>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e58      	subs	r0, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	440b      	add	r3, r1
 8003a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a42:	3301      	adds	r3, #1
 8003a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e012      	b.n	8003a7a <HAL_I2C_Init+0x176>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e58      	subs	r0, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	0099      	lsls	r1, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Init+0x17e>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e022      	b.n	8003ac8 <HAL_I2C_Init+0x1c4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10e      	bne.n	8003aa8 <HAL_I2C_Init+0x1a4>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e58      	subs	r0, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	440b      	add	r3, r1
 8003a98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa6:	e00f      	b.n	8003ac8 <HAL_I2C_Init+0x1c4>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1e58      	subs	r0, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	0099      	lsls	r1, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	6809      	ldr	r1, [r1, #0]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003af6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6911      	ldr	r1, [r2, #16]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68d2      	ldr	r2, [r2, #12]
 8003b02:	4311      	orrs	r1, r2
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	000186a0 	.word	0x000186a0
 8003b64:	001e847f 	.word	0x001e847f
 8003b68:	003d08ff 	.word	0x003d08ff
 8003b6c:	431bde83 	.word	0x431bde83
 8003b70:	10624dd3 	.word	0x10624dd3

08003b74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	4603      	mov	r3, r0
 8003b84:	817b      	strh	r3, [r7, #10]
 8003b86:	460b      	mov	r3, r1
 8003b88:	813b      	strh	r3, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8e:	f7fe fbfb 	bl	8002388 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	f040 80d9 	bne.w	8003d54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2319      	movs	r3, #25
 8003ba8:	2201      	movs	r2, #1
 8003baa:	496d      	ldr	r1, [pc, #436]	; (8003d60 <HAL_I2C_Mem_Write+0x1ec>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f002 f8e7 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e0cc      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_I2C_Mem_Write+0x56>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0c5      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d007      	beq.n	8003bf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2221      	movs	r2, #33	; 0x21
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a3a      	ldr	r2, [r7, #32]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a4d      	ldr	r2, [pc, #308]	; (8003d64 <HAL_I2C_Mem_Write+0x1f0>)
 8003c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c32:	88f8      	ldrh	r0, [r7, #6]
 8003c34:	893a      	ldrh	r2, [r7, #8]
 8003c36:	8979      	ldrh	r1, [r7, #10]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4603      	mov	r3, r0
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f001 fe76 	bl	8005934 <I2C_RequestMemoryWrite>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d052      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e081      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f002 f968 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d107      	bne.n	8003c7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06b      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d11b      	bne.n	8003cf4 <HAL_I2C_Mem_Write+0x180>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	781a      	ldrb	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1aa      	bne.n	8003c52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f002 f954 	bl	8005fae <I2C_WaitOnBTFFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d107      	bne.n	8003d24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e016      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e000      	b.n	8003d56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
  }
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	00100002 	.word	0x00100002
 8003d64:	ffff0000 	.word	0xffff0000

08003d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d82:	f7fe fb01 	bl	8002388 <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	f040 8208 	bne.w	80041a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2319      	movs	r3, #25
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	497b      	ldr	r1, [pc, #492]	; (8003f8c <HAL_I2C_Mem_Read+0x224>)
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f001 ffed 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
 8003dae:	e1fb      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_I2C_Mem_Read+0x56>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e1f4      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d007      	beq.n	8003de4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2222      	movs	r2, #34	; 0x22
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_I2C_Mem_Read+0x228>)
 8003e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e26:	88f8      	ldrh	r0, [r7, #6]
 8003e28:	893a      	ldrh	r2, [r7, #8]
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4603      	mov	r3, r0
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f001 fe12 	bl	8005a60 <I2C_RequestMemoryRead>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1b0      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d113      	bne.n	8003e76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	623b      	str	r3, [r7, #32]
 8003e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e184      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e164      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d11b      	bne.n	8003ef6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	e144      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f0c:	e138      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	f200 80f1 	bhi.w	80040fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d123      	bne.n	8003f68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f002 f8b5 	bl	8006094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e139      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f66:	e10b      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d14e      	bne.n	800400e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f76:	2200      	movs	r2, #0
 8003f78:	4906      	ldr	r1, [pc, #24]	; (8003f94 <HAL_I2C_Mem_Read+0x22c>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f001 ff00 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e10e      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
 8003f8a:	bf00      	nop
 8003f8c:	00100002 	.word	0x00100002
 8003f90:	ffff0000 	.word	0xffff0000
 8003f94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800400c:	e0b8      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	2200      	movs	r2, #0
 8004016:	4966      	ldr	r1, [pc, #408]	; (80041b0 <HAL_I2C_Mem_Read+0x448>)
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f001 feb1 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0bf      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004070:	2200      	movs	r2, #0
 8004072:	494f      	ldr	r1, [pc, #316]	; (80041b0 <HAL_I2C_Mem_Read+0x448>)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f001 fe83 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e091      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691a      	ldr	r2, [r3, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040f8:	e042      	b.n	8004180 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f001 ffc8 	bl	8006094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e04c      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d118      	bne.n	8004180 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f aec2 	bne.w	8003f0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010004 	.word	0x00010004

080041b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d003      	beq.n	80041ec <HAL_I2C_EV_IRQHandler+0x38>
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b40      	cmp	r3, #64	; 0x40
 80041e8:	f040 80bd 	bne.w	8004366 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10d      	bne.n	8004222 <HAL_I2C_EV_IRQHandler+0x6e>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800420c:	d003      	beq.n	8004216 <HAL_I2C_EV_IRQHandler+0x62>
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004214:	d101      	bne.n	800421a <HAL_I2C_EV_IRQHandler+0x66>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x68>
 800421a:	2300      	movs	r3, #0
 800421c:	2b01      	cmp	r3, #1
 800421e:	f000 812e 	beq.w	800447e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00c      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x92>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f001 ffb0 	bl	800619e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fd62 	bl	8004d08 <I2C_Master_SB>
 8004244:	e08e      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0xb2>
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	0a5b      	lsrs	r3, r3, #9
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fdd8 	bl	8004e14 <I2C_Master_ADD10>
 8004264:	e07e      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xd2>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	0a5b      	lsrs	r3, r3, #9
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fdf2 	bl	8004e68 <I2C_Master_ADDR>
 8004284:	e06e      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d037      	beq.n	8004302 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	f000 80ef 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	09db      	lsrs	r3, r3, #7
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00f      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d009      	beq.n	80042d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f9ef 	bl	80046ac <I2C_MasterTransmit_TXE>
 80042ce:	e049      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80d2 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	0a5b      	lsrs	r3, r3, #9
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80cb 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d103      	bne.n	80042fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa76 	bl	80047e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f8:	e0c3      	b.n	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fada 	bl	80048b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004300:	e0bf      	b.n	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004310:	f000 80b7 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00f      	beq.n	8004340 <HAL_I2C_EV_IRQHandler+0x18c>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d009      	beq.n	8004340 <HAL_I2C_EV_IRQHandler+0x18c>
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fb4a 	bl	80049d2 <I2C_MasterReceive_RXNE>
 800433e:	e011      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 809a 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a5b      	lsrs	r3, r3, #9
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8093 	beq.w	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fbe9 	bl	8004b34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004362:	e08e      	b.n	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004364:	e08d      	b.n	8004482 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e007      	b.n	8004388 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d012      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x206>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	0a5b      	lsrs	r3, r3, #9
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00c      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 ffa7 	bl	8005306 <I2C_Slave_ADDR>
 80043b8:	e066      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HAL_I2C_EV_IRQHandler+0x226>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 ffdc 	bl	8005390 <I2C_Slave_STOPF>
 80043d8:	e056      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043da:	7bbb      	ldrb	r3, [r7, #14]
 80043dc:	2b21      	cmp	r3, #33	; 0x21
 80043de:	d002      	beq.n	80043e6 <HAL_I2C_EV_IRQHandler+0x232>
 80043e0:	7bbb      	ldrb	r3, [r7, #14]
 80043e2:	2b29      	cmp	r3, #41	; 0x29
 80043e4:	d125      	bne.n	8004432 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	09db      	lsrs	r3, r3, #7
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <HAL_I2C_EV_IRQHandler+0x25e>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	0a9b      	lsrs	r3, r3, #10
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_I2C_EV_IRQHandler+0x25e>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 febd 	bl	800518a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004410:	e039      	b.n	8004486 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d033      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2d2>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	0a5b      	lsrs	r3, r3, #9
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d02d      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 feea 	bl	8005204 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004430:	e029      	b.n	8004486 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	099b      	lsrs	r3, r3, #6
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00f      	beq.n	800445e <HAL_I2C_EV_IRQHandler+0x2aa>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	0a9b      	lsrs	r3, r3, #10
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_I2C_EV_IRQHandler+0x2aa>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fef5 	bl	8005246 <I2C_SlaveReceive_RXNE>
 800445c:	e014      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	0a5b      	lsrs	r3, r3, #9
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 ff23 	bl	80052c2 <I2C_SlaveReceive_BTF>
 800447c:	e004      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004486:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b08a      	sub	sp, #40	; 0x28
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00e      	beq.n	80044dc <HAL_I2C_ER_IRQHandler+0x4e>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	0a5b      	lsrs	r3, r3, #9
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00e      	beq.n	8004506 <HAL_I2C_ER_IRQHandler+0x78>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004504:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	0a9b      	lsrs	r3, r3, #10
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03f      	beq.n	8004592 <HAL_I2C_ER_IRQHandler+0x104>
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d039      	beq.n	8004592 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800451e:	7efb      	ldrb	r3, [r7, #27]
 8004520:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004530:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004538:	7ebb      	ldrb	r3, [r7, #26]
 800453a:	2b20      	cmp	r3, #32
 800453c:	d112      	bne.n	8004564 <HAL_I2C_ER_IRQHandler+0xd6>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10f      	bne.n	8004564 <HAL_I2C_ER_IRQHandler+0xd6>
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b21      	cmp	r3, #33	; 0x21
 8004548:	d008      	beq.n	800455c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b29      	cmp	r3, #41	; 0x29
 800454e:	d005      	beq.n	800455c <HAL_I2C_ER_IRQHandler+0xce>
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b28      	cmp	r3, #40	; 0x28
 8004554:	d106      	bne.n	8004564 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b21      	cmp	r3, #33	; 0x21
 800455a:	d103      	bne.n	8004564 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f001 f847 	bl	80055f0 <I2C_Slave_AF>
 8004562:	e016      	b.n	8004592 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800456c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	f043 0304 	orr.w	r3, r3, #4
 8004574:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004576:	7efb      	ldrb	r3, [r7, #27]
 8004578:	2b10      	cmp	r3, #16
 800457a:	d002      	beq.n	8004582 <HAL_I2C_ER_IRQHandler+0xf4>
 800457c:	7efb      	ldrb	r3, [r7, #27]
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d107      	bne.n	8004592 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	0adb      	lsrs	r3, r3, #11
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <HAL_I2C_ER_IRQHandler+0x12e>
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	0a1b      	lsrs	r3, r3, #8
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f043 0308 	orr.w	r3, r3, #8
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80045ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 f87e 	bl	80056d0 <I2C_ITError>
  }
}
 80045d4:	bf00      	nop
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
 8004638:	4613      	mov	r3, r2
 800463a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d150      	bne.n	8004774 <I2C_MasterTransmit_TXE+0xc8>
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d14d      	bne.n	8004774 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d01d      	beq.n	800471a <I2C_MasterTransmit_TXE+0x6e>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d01a      	beq.n	800471a <I2C_MasterTransmit_TXE+0x6e>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ea:	d016      	beq.n	800471a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2211      	movs	r2, #17
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff ff62 	bl	80045dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004718:	e060      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004728:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004738:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d107      	bne.n	8004764 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ff7d 	bl	800465c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004762:	e03b      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff35 	bl	80045dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004772:	e033      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b21      	cmp	r3, #33	; 0x21
 8004778:	d005      	beq.n	8004786 <I2C_MasterTransmit_TXE+0xda>
 800477a:	7bbb      	ldrb	r3, [r7, #14]
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d12d      	bne.n	80047dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004780:	7bfb      	ldrb	r3, [r7, #15]
 8004782:	2b22      	cmp	r3, #34	; 0x22
 8004784:	d12a      	bne.n	80047dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047a0:	e01c      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d103      	bne.n	80047b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f880 	bl	80048b4 <I2C_MemoryTransmit_TXE_BTF>
}
 80047b4:	e012      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047da:	e7ff      	b.n	80047dc <I2C_MasterTransmit_TXE+0x130>
 80047dc:	bf00      	nop
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b21      	cmp	r3, #33	; 0x21
 80047fc:	d156      	bne.n	80048ac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d012      	beq.n	800482e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	781a      	ldrb	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800482c:	e03e      	b.n	80048ac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d01d      	beq.n	8004870 <I2C_MasterTransmit_BTF+0x8c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d01a      	beq.n	8004870 <I2C_MasterTransmit_BTF+0x8c>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004840:	d016      	beq.n	8004870 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004850:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2211      	movs	r2, #17
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff feb7 	bl	80045dc <HAL_I2C_MasterTxCpltCallback>
}
 800486e:	e01d      	b.n	80048ac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800487e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fe98 	bl	80045dc <HAL_I2C_MasterTxCpltCallback>
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11d      	bne.n	8004908 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10b      	bne.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048ea:	e06e      	b.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	121b      	asrs	r3, r3, #8
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004906:	e060      	b.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10b      	bne.n	8004928 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	b2da      	uxtb	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004926:	e050      	b.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492c:	2b02      	cmp	r3, #2
 800492e:	d14c      	bne.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b22      	cmp	r3, #34	; 0x22
 8004934:	d108      	bne.n	8004948 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	e040      	b.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d015      	beq.n	800497e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b21      	cmp	r3, #33	; 0x21
 8004956:	d112      	bne.n	800497e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800497c:	e025      	b.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d120      	bne.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b21      	cmp	r3, #33	; 0x21
 800498c:	d11d      	bne.n	80049ca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800499c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fe49 	bl	800465c <HAL_I2C_MemTxCpltCallback>
}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b22      	cmp	r3, #34	; 0x22
 80049e4:	f040 80a2 	bne.w	8004b2c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d921      	bls.n	8004a3a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	f040 8082 	bne.w	8004b2c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004a38:	e078      	b.n	8004b2c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d074      	beq.n	8004b2c <I2C_MasterReceive_RXNE+0x15a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d002      	beq.n	8004a4e <I2C_MasterReceive_RXNE+0x7c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d16e      	bne.n	8004b2c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 faee 	bl	8006030 <I2C_WaitOnSTOPRequestThroughIT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d142      	bne.n	8004ae0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d10a      	bne.n	8004aca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fdd4 	bl	8004670 <HAL_I2C_MemRxCpltCallback>
}
 8004ac8:	e030      	b.n	8004b2c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2212      	movs	r2, #18
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff fd89 	bl	80045f0 <HAL_I2C_MasterRxCpltCallback>
}
 8004ade:	e025      	b.n	8004b2c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fdac 	bl	8004684 <HAL_I2C_ErrorCallback>
}
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d11b      	bne.n	8004b84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004b82:	e0bd      	b.n	8004d00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d129      	bne.n	8004be2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d00a      	beq.n	8004bba <I2C_MasterReceive_BTF+0x86>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d007      	beq.n	8004bba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004be0:	e08e      	b.n	8004d00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d176      	bne.n	8004cda <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d002      	beq.n	8004bf8 <I2C_MasterReceive_BTF+0xc4>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d108      	bne.n	8004c0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e019      	b.n	8004c3e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d002      	beq.n	8004c16 <I2C_MasterReceive_BTF+0xe2>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d108      	bne.n	8004c28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e00a      	b.n	8004c3e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b10      	cmp	r3, #16
 8004c2c:	d007      	beq.n	8004c3e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b40      	cmp	r3, #64	; 0x40
 8004cac:	d10a      	bne.n	8004cc4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fcd7 	bl	8004670 <HAL_I2C_MemRxCpltCallback>
}
 8004cc2:	e01d      	b.n	8004d00 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2212      	movs	r2, #18
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fc8c 	bl	80045f0 <HAL_I2C_MasterRxCpltCallback>
}
 8004cd8:	e012      	b.n	8004d00 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b40      	cmp	r3, #64	; 0x40
 8004d1a:	d117      	bne.n	8004d4c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d109      	bne.n	8004d38 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d34:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d36:	e067      	b.n	8004e08 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	611a      	str	r2, [r3, #16]
}
 8004d4a:	e05d      	b.n	8004e08 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d54:	d133      	bne.n	8004dbe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b21      	cmp	r3, #33	; 0x21
 8004d60:	d109      	bne.n	8004d76 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	e008      	b.n	8004d88 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <I2C_Master_SB+0x92>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d032      	beq.n	8004e08 <I2C_Master_SB+0x100>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02d      	beq.n	8004e08 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	605a      	str	r2, [r3, #4]
}
 8004dbc:	e024      	b.n	8004e08 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10e      	bne.n	8004de4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	11db      	asrs	r3, r3, #7
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 0306 	and.w	r3, r3, #6
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f063 030f 	orn	r3, r3, #15
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	611a      	str	r2, [r3, #16]
}
 8004de2:	e011      	b.n	8004e08 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d10d      	bne.n	8004e08 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	11db      	asrs	r3, r3, #7
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f063 030e 	orn	r3, r3, #14
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <I2C_Master_ADD10+0x24>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d011      	beq.n	8004e5c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <I2C_Master_ADD10+0x38>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b091      	sub	sp, #68	; 0x44
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b22      	cmp	r3, #34	; 0x22
 8004e90:	f040 8169 	bne.w	8005166 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <I2C_Master_ADDR+0x54>
 8004e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d10b      	bne.n	8004ebc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	e160      	b.n	800517e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d11d      	bne.n	8004f00 <I2C_Master_ADDR+0x98>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ecc:	d118      	bne.n	8004f00 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
 8004efe:	e13e      	b.n	800517e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e115      	b.n	800515e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f040 808a 	bne.w	8005052 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f44:	d137      	bne.n	8004fb6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f54:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f64:	d113      	bne.n	8004f8e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	e0e7      	b.n	800515e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e0d3      	b.n	800515e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d02e      	beq.n	800501a <I2C_Master_ADDR+0x1b2>
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d02b      	beq.n	800501a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	2b12      	cmp	r3, #18
 8004fc6:	d102      	bne.n	8004fce <I2C_Master_ADDR+0x166>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d125      	bne.n	800501a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d00e      	beq.n	8004ff2 <I2C_Master_ADDR+0x18a>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d00b      	beq.n	8004ff2 <I2C_Master_ADDR+0x18a>
 8004fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d008      	beq.n	8004ff2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e007      	b.n	8005002 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	e0a1      	b.n	800515e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e085      	b.n	800515e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d14d      	bne.n	80050f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	2b04      	cmp	r3, #4
 8005060:	d016      	beq.n	8005090 <I2C_Master_ADDR+0x228>
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	2b02      	cmp	r3, #2
 8005066:	d013      	beq.n	8005090 <I2C_Master_ADDR+0x228>
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	2b10      	cmp	r3, #16
 800506c:	d010      	beq.n	8005090 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e007      	b.n	80050a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800509e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ae:	d117      	bne.n	80050e0 <I2C_Master_ADDR+0x278>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050b6:	d00b      	beq.n	80050d0 <I2C_Master_ADDR+0x268>
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d008      	beq.n	80050d0 <I2C_Master_ADDR+0x268>
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d005      	beq.n	80050d0 <I2C_Master_ADDR+0x268>
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b10      	cmp	r3, #16
 80050c8:	d002      	beq.n	80050d0 <I2C_Master_ADDR+0x268>
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d107      	bne.n	80050e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	e032      	b.n	800515e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005106:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005116:	d117      	bne.n	8005148 <I2C_Master_ADDR+0x2e0>
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800511e:	d00b      	beq.n	8005138 <I2C_Master_ADDR+0x2d0>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b01      	cmp	r3, #1
 8005124:	d008      	beq.n	8005138 <I2C_Master_ADDR+0x2d0>
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b08      	cmp	r3, #8
 800512a:	d005      	beq.n	8005138 <I2C_Master_ADDR+0x2d0>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b10      	cmp	r3, #16
 8005130:	d002      	beq.n	8005138 <I2C_Master_ADDR+0x2d0>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b20      	cmp	r3, #32
 8005136:	d107      	bne.n	8005148 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005146:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005164:	e00b      	b.n	800517e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	e7ff      	b.n	800517e <I2C_Master_ADDR+0x316>
 800517e:	bf00      	nop
 8005180:	3744      	adds	r7, #68	; 0x44
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d02b      	beq.n	80051fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d114      	bne.n	80051fc <I2C_SlaveTransmit_TXE+0x72>
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b29      	cmp	r3, #41	; 0x29
 80051d6:	d111      	bne.n	80051fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2221      	movs	r2, #33	; 0x21
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2228      	movs	r2, #40	; 0x28
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fa04 	bl	8004604 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d011      	beq.n	800523a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02c      	beq.n	80052ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d114      	bne.n	80052ba <I2C_SlaveReceive_RXNE+0x74>
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b2a      	cmp	r3, #42	; 0x2a
 8005294:	d111      	bne.n	80052ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2222      	movs	r2, #34	; 0x22
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2228      	movs	r2, #40	; 0x28
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff f9af 	bl	8004618 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005310:	2300      	movs	r3, #0
 8005312:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005320:	2b28      	cmp	r3, #40	; 0x28
 8005322:	d127      	bne.n	8005374 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005332:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	81bb      	strh	r3, [r7, #12]
 8005356:	e002      	b.n	800535e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005366:	89ba      	ldrh	r2, [r7, #12]
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff f95d 	bl	800462c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005372:	e008      	b.n	8005386 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0202 	mvn.w	r2, #2
 800537c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80053b0:	2300      	movs	r3, #0
 80053b2:	60bb      	str	r3, [r7, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	60bb      	str	r3, [r7, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ec:	d172      	bne.n	80054d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b22      	cmp	r3, #34	; 0x22
 80053f2:	d002      	beq.n	80053fa <I2C_Slave_STOPF+0x6a>
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b2a      	cmp	r3, #42	; 0x2a
 80053f8:	d135      	bne.n	8005466 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b29a      	uxth	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd ffc6 	bl	80033c4 <HAL_DMA_GetState>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d049      	beq.n	80054d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	4a69      	ldr	r2, [pc, #420]	; (80055e8 <I2C_Slave_STOPF+0x258>)
 8005444:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	4618      	mov	r0, r3
 800544c:	f7fd fe0e 	bl	800306c <HAL_DMA_Abort_IT>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03d      	beq.n	80054d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005464:	e035      	b.n	80054d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d005      	beq.n	800548a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0204 	orr.w	r2, r3, #4
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005498:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd ff90 	bl	80033c4 <HAL_DMA_GetState>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d014      	beq.n	80054d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <I2C_Slave_STOPF+0x258>)
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd fdd8 	bl	800306c <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
 80054d0:	e000      	b.n	80054d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03e      	beq.n	800555c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d112      	bne.n	8005512 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	3b01      	subs	r3, #1
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d112      	bne.n	8005546 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f043 0204 	orr.w	r2, r3, #4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8b3 	bl	80056d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800556a:	e039      	b.n	80055e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b2a      	cmp	r3, #42	; 0x2a
 8005570:	d109      	bne.n	8005586 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2228      	movs	r2, #40	; 0x28
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff f849 	bl	8004618 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b28      	cmp	r3, #40	; 0x28
 8005590:	d111      	bne.n	80055b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a15      	ldr	r2, [pc, #84]	; (80055ec <I2C_Slave_STOPF+0x25c>)
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff f84a 	bl	8004648 <HAL_I2C_ListenCpltCallback>
}
 80055b4:	e014      	b.n	80055e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	2b22      	cmp	r3, #34	; 0x22
 80055bc:	d002      	beq.n	80055c4 <I2C_Slave_STOPF+0x234>
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b22      	cmp	r3, #34	; 0x22
 80055c2:	d10d      	bne.n	80055e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff f81c 	bl	8004618 <HAL_I2C_SlaveRxCpltCallback>
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	08005c31 	.word	0x08005c31
 80055ec:	ffff0000 	.word	0xffff0000

080055f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d002      	beq.n	8005612 <I2C_Slave_AF+0x22>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b20      	cmp	r3, #32
 8005610:	d129      	bne.n	8005666 <I2C_Slave_AF+0x76>
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	2b28      	cmp	r3, #40	; 0x28
 8005616:	d126      	bne.n	8005666 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2c      	ldr	r2, [pc, #176]	; (80056cc <I2C_Slave_AF+0xdc>)
 800561c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800562c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005636:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fe fff2 	bl	8004648 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005664:	e02e      	b.n	80056c4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b21      	cmp	r3, #33	; 0x21
 800566a:	d126      	bne.n	80056ba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <I2C_Slave_AF+0xdc>)
 8005670:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2221      	movs	r2, #33	; 0x21
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005696:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe ffa6 	bl	8004604 <HAL_I2C_SlaveTxCpltCallback>
}
 80056b8:	e004      	b.n	80056c4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056c2:	615a      	str	r2, [r3, #20]
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	ffff0000 	.word	0xffff0000

080056d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d002      	beq.n	80056f4 <I2C_ITError+0x24>
 80056ee:	7bbb      	ldrb	r3, [r7, #14]
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d10a      	bne.n	800570a <I2C_ITError+0x3a>
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b22      	cmp	r3, #34	; 0x22
 80056f8:	d107      	bne.n	800570a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005710:	2b28      	cmp	r3, #40	; 0x28
 8005712:	d107      	bne.n	8005724 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2228      	movs	r2, #40	; 0x28
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005722:	e015      	b.n	8005750 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800572e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005732:	d00a      	beq.n	800574a <I2C_ITError+0x7a>
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b60      	cmp	r3, #96	; 0x60
 8005738:	d007      	beq.n	800574a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575e:	d162      	bne.n	8005826 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d020      	beq.n	80057c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005782:	4a6a      	ldr	r2, [pc, #424]	; (800592c <I2C_ITError+0x25c>)
 8005784:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	4618      	mov	r0, r3
 800578c:	f7fd fc6e 	bl	800306c <HAL_DMA_Abort_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8089 	beq.w	80058aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ba:	4610      	mov	r0, r2
 80057bc:	4798      	blx	r3
 80057be:	e074      	b.n	80058aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	4a59      	ldr	r2, [pc, #356]	; (800592c <I2C_ITError+0x25c>)
 80057c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fd fc4d 	bl	800306c <HAL_DMA_Abort_IT>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d068      	beq.n	80058aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d10b      	bne.n	80057fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005820:	4610      	mov	r0, r2
 8005822:	4798      	blx	r3
 8005824:	e041      	b.n	80058aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b60      	cmp	r3, #96	; 0x60
 8005830:	d125      	bne.n	800587e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d10b      	bne.n	8005866 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fe ff0e 	bl	8004698 <HAL_I2C_AbortCpltCallback>
 800587c:	e015      	b.n	80058aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d10b      	bne.n	80058a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fe feed 	bl	8004684 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10e      	bne.n	80058d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d109      	bne.n	80058d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d113      	bne.n	8005924 <I2C_ITError+0x254>
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b28      	cmp	r3, #40	; 0x28
 8005900:	d110      	bne.n	8005924 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <I2C_ITError+0x260>)
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fe fe92 	bl	8004648 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	08005c31 	.word	0x08005c31
 8005930:	ffff0000 	.word	0xffff0000

08005934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	4603      	mov	r3, r0
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	460b      	mov	r3, r1
 8005948:	813b      	strh	r3, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2200      	movs	r2, #0
 8005966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fa08 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00d      	beq.n	8005992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005984:	d103      	bne.n	800598e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e05f      	b.n	8005a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	492d      	ldr	r1, [pc, #180]	; (8005a5c <I2C_RequestMemoryWrite+0x128>)
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fa40 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e04c      	b.n	8005a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 faaa 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d107      	bne.n	80059f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e02b      	b.n	8005a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d105      	bne.n	8005a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a00:	893b      	ldrh	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e021      	b.n	8005a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a0c:	893b      	ldrh	r3, [r7, #8]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	6a39      	ldr	r1, [r7, #32]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fa84 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00d      	beq.n	8005a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d107      	bne.n	8005a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e005      	b.n	8005a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a46:	893b      	ldrh	r3, [r7, #8]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	00010002 	.word	0x00010002

08005a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	4608      	mov	r0, r1
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	817b      	strh	r3, [r7, #10]
 8005a72:	460b      	mov	r3, r1
 8005a74:	813b      	strh	r3, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f96a 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac0:	d103      	bne.n	8005aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0aa      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ace:	897b      	ldrh	r3, [r7, #10]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	6a3a      	ldr	r2, [r7, #32]
 8005ae2:	4952      	ldr	r1, [pc, #328]	; (8005c2c <I2C_RequestMemoryRead+0x1cc>)
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f9a2 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e097      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0c:	6a39      	ldr	r1, [r7, #32]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa0c 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00d      	beq.n	8005b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d107      	bne.n	8005b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e076      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3c:	893b      	ldrh	r3, [r7, #8]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	611a      	str	r2, [r3, #16]
 8005b46:	e021      	b.n	8005b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b48:	893b      	ldrh	r3, [r7, #8]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	6a39      	ldr	r1, [r7, #32]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f9e6 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d107      	bne.n	8005b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e050      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b82:	893b      	ldrh	r3, [r7, #8]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8e:	6a39      	ldr	r1, [r7, #32]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f9cb 	bl	8005f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00d      	beq.n	8005bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d107      	bne.n	8005bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e035      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f8d3 	bl	8005d80 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bee:	d103      	bne.n	8005bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e013      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bfc:	897b      	ldrh	r3, [r7, #10]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	4906      	ldr	r1, [pc, #24]	; (8005c2c <I2C_RequestMemoryRead+0x1cc>)
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f90b 	bl	8005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	00010002 	.word	0x00010002

08005c30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	; (8005d78 <I2C_DMAAbort+0x148>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	4a4a      	ldr	r2, [pc, #296]	; (8005d7c <I2C_DMAAbort+0x14c>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	0a1a      	lsrs	r2, r3, #8
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00da      	lsls	r2, r3, #3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005c76:	e00a      	b.n	8005c8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c8c:	d0ea      	beq.n	8005c64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	2200      	movs	r2, #0
 8005cac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d10e      	bne.n	8005d1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7fe fcbe 	bl	8004698 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d1c:	e027      	b.n	8005d6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d24:	2b28      	cmp	r3, #40	; 0x28
 8005d26:	d117      	bne.n	8005d58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2228      	movs	r2, #40	; 0x28
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d56:	e007      	b.n	8005d68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d68:	6978      	ldr	r0, [r7, #20]
 8005d6a:	f7fe fc8b 	bl	8004684 <HAL_I2C_ErrorCallback>
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000090 	.word	0x20000090
 8005d7c:	14f8b589 	.word	0x14f8b589

08005d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d90:	e025      	b.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d98:	d021      	beq.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9a:	f7fc faf5 	bl	8002388 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d116      	bne.n	8005dde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e023      	b.n	8005e26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10d      	bne.n	8005e04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	43da      	mvns	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	e00c      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d0b6      	beq.n	8005d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e3c:	e051      	b.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d123      	bne.n	8005e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e046      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e9c:	d021      	beq.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fc fa73 	bl	8002388 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e020      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d10c      	bne.n	8005f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	43da      	mvns	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e00b      	b.n	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d18d      	bne.n	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f38:	e02d      	b.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f900 	bl	8006140 <I2C_IsAcknowledgeFailed>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e02d      	b.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f50:	d021      	beq.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f52:	f7fc fa19 	bl	8002388 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d302      	bcc.n	8005f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f043 0220 	orr.w	r2, r3, #32
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e007      	b.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa0:	2b80      	cmp	r3, #128	; 0x80
 8005fa2:	d1ca      	bne.n	8005f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fba:	e02d      	b.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f8bf 	bl	8006140 <I2C_IsAcknowledgeFailed>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e02d      	b.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd2:	d021      	beq.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd4:	f7fc f9d8 	bl	8002388 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d116      	bne.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	f043 0220 	orr.w	r2, r3, #32
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e007      	b.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b04      	cmp	r3, #4
 8006024:	d1ca      	bne.n	8005fbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800603c:	4b13      	ldr	r3, [pc, #76]	; (800608c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	08db      	lsrs	r3, r3, #3
 8006042:	4a13      	ldr	r2, [pc, #76]	; (8006090 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	0a1a      	lsrs	r2, r3, #8
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3b01      	subs	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0220 	orr.w	r2, r3, #32
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e008      	b.n	8006080 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d0e9      	beq.n	8006052 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000090 	.word	0x20000090
 8006090:	14f8b589 	.word	0x14f8b589

08006094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a0:	e042      	b.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b10      	cmp	r3, #16
 80060ae:	d119      	bne.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0210 	mvn.w	r2, #16
 80060b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e029      	b.n	8006138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e4:	f7fc f950 	bl	8002388 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d116      	bne.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e007      	b.n	8006138 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d1b5      	bne.n	80060a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006156:	d11b      	bne.n	8006190 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006160:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f043 0204 	orr.w	r2, r3, #4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061ae:	d103      	bne.n	80061b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061b6:	e007      	b.n	80061c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061c0:	d102      	bne.n	80061c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2208      	movs	r2, #8
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d6:	b08f      	sub	sp, #60	; 0x3c
 80061d8:	af0a      	add	r7, sp, #40	; 0x28
 80061da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e10f      	b.n	8006406 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f005 fa21 	bl	800b648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2203      	movs	r2, #3
 800620a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f002 f9d8 	bl	80085da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	687e      	ldr	r6, [r7, #4]
 8006232:	466d      	mov	r5, sp
 8006234:	f106 0410 	add.w	r4, r6, #16
 8006238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800623a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800623c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800623e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006240:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006244:	e885 0003 	stmia.w	r5, {r0, r1}
 8006248:	1d33      	adds	r3, r6, #4
 800624a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800624c:	6838      	ldr	r0, [r7, #0]
 800624e:	f002 f8af 	bl	80083b0 <USB_CoreInit>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0d0      	b.n	8006406 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2100      	movs	r1, #0
 800626a:	4618      	mov	r0, r3
 800626c:	f002 f9c6 	bl	80085fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e04a      	b.n	800630c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	00db      	lsls	r3, r3, #3
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	333d      	adds	r3, #61	; 0x3d
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	333c      	adds	r3, #60	; 0x3c
 800629a:	7bfa      	ldrb	r2, [r7, #15]
 800629c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800629e:	7bfa      	ldrb	r2, [r7, #15]
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	b298      	uxth	r0, r3
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	4613      	mov	r3, r2
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	3342      	adds	r3, #66	; 0x42
 80062b2:	4602      	mov	r2, r0
 80062b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062b6:	7bfa      	ldrb	r2, [r7, #15]
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	333f      	adds	r3, #63	; 0x3f
 80062c6:	2200      	movs	r2, #0
 80062c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062ca:	7bfa      	ldrb	r2, [r7, #15]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3344      	adds	r3, #68	; 0x44
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062de:	7bfa      	ldrb	r2, [r7, #15]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3348      	adds	r3, #72	; 0x48
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062f2:	7bfa      	ldrb	r2, [r7, #15]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	440b      	add	r3, r1
 8006300:	3350      	adds	r3, #80	; 0x50
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006306:	7bfb      	ldrb	r3, [r7, #15]
 8006308:	3301      	adds	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	7bfa      	ldrb	r2, [r7, #15]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	429a      	cmp	r2, r3
 8006314:	d3af      	bcc.n	8006276 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
 800631a:	e044      	b.n	80063a6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	440b      	add	r3, r1
 8006356:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	440b      	add	r3, r1
 800636c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006374:	7bfa      	ldrb	r2, [r7, #15]
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	4613      	mov	r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	1a9b      	subs	r3, r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800638a:	7bfa      	ldrb	r2, [r7, #15]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	4613      	mov	r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	440b      	add	r3, r1
 8006398:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	3301      	adds	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d3b5      	bcc.n	800631c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	687e      	ldr	r6, [r7, #4]
 80063b8:	466d      	mov	r5, sp
 80063ba:	f106 0410 	add.w	r4, r6, #16
 80063be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80063ce:	1d33      	adds	r3, r6, #4
 80063d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063d2:	6838      	ldr	r0, [r7, #0]
 80063d4:	f002 f93c 	bl	8008650 <USB_DevInit>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e00d      	b.n	8006406 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f003 f984 	bl	800970c <USB_DevDisconnect>

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800640e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_PCD_Start+0x1c>
 8006426:	2302      	movs	r3, #2
 8006428:	e020      	b.n	800646c <HAL_PCD_Start+0x5e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	2b01      	cmp	r3, #1
 8006438:	d109      	bne.n	800644e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800643e:	2b01      	cmp	r3, #1
 8006440:	d005      	beq.n	800644e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f002 f8b0 	bl	80085b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f003 f934 	bl	80096ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b08d      	sub	sp, #52	; 0x34
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f003 f9f2 	bl	8009874 <USB_GetMode>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 839d 	bne.w	8006bd2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f003 f956 	bl	800974e <USB_ReadInterrupts>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8393 	beq.w	8006bd0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f003 f94d 	bl	800974e <USB_ReadInterrupts>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d107      	bne.n	80064ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f002 0202 	and.w	r2, r2, #2
 80064cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f003 f93b 	bl	800974e <USB_ReadInterrupts>
 80064d8:	4603      	mov	r3, r0
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d161      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0210 	bic.w	r2, r2, #16
 80064f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	1a9b      	subs	r3, r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	3304      	adds	r3, #4
 8006510:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	0c5b      	lsrs	r3, r3, #17
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	2b02      	cmp	r3, #2
 800651c:	d124      	bne.n	8006568 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d035      	beq.n	8006596 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	6a38      	ldr	r0, [r7, #32]
 800653e:	f002 ffa1 	bl	8009484 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800654e:	441a      	add	r2, r3
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006560:	441a      	add	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	619a      	str	r2, [r3, #24]
 8006566:	e016      	b.n	8006596 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	0c5b      	lsrs	r3, r3, #17
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2b06      	cmp	r3, #6
 8006572:	d110      	bne.n	8006596 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800657a:	2208      	movs	r2, #8
 800657c:	4619      	mov	r1, r3
 800657e:	6a38      	ldr	r0, [r7, #32]
 8006580:	f002 ff80 	bl	8009484 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	699a      	ldr	r2, [r3, #24]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	091b      	lsrs	r3, r3, #4
 800658c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006590:	441a      	add	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0210 	orr.w	r2, r2, #16
 80065a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 f8cf 	bl	800974e <USB_ReadInterrupts>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065ba:	d16e      	bne.n	800669a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f003 f8d5 	bl	8009774 <USB_ReadDevAllOutEpInterrupt>
 80065ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80065cc:	e062      	b.n	8006694 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d057      	beq.n	8006688 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	4611      	mov	r1, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f003 f8fa 	bl	80097dc <USB_ReadDevOutEPInterrupt>
 80065e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	461a      	mov	r2, r3
 8006602:	2301      	movs	r3, #1
 8006604:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fdb1 	bl	8007170 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00c      	beq.n	8006632 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2308      	movs	r3, #8
 8006628:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800662a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 feab 	bl	8007388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	461a      	mov	r2, r3
 800664a:	2310      	movs	r3, #16
 800664c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	2320      	movs	r3, #32
 8006668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006686:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	3301      	adds	r3, #1
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d199      	bne.n	80065ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f003 f855 	bl	800974e <USB_ReadInterrupts>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066ae:	f040 80c0 	bne.w	8006832 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f003 f876 	bl	80097a8 <USB_ReadDevAllInEpInterrupt>
 80066bc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80066c2:	e0b2      	b.n	800682a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80a7 	beq.w	800681e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f003 f89c 	bl	8009818 <USB_ReadDevInEPInterrupt>
 80066e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d057      	beq.n	800679c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	2201      	movs	r2, #1
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	43db      	mvns	r3, r3
 8006706:	69f9      	ldr	r1, [r7, #28]
 8006708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800670c:	4013      	ands	r3, r2
 800670e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	461a      	mov	r2, r3
 800671e:	2301      	movs	r3, #1
 8006720:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d132      	bne.n	8006790 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672e:	4613      	mov	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3348      	adds	r3, #72	; 0x48
 800673a:	6819      	ldr	r1, [r3, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4403      	add	r3, r0
 800674a:	3344      	adds	r3, #68	; 0x44
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4419      	add	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	4613      	mov	r3, r2
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	1a9b      	subs	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4403      	add	r3, r0
 800675e:	3348      	adds	r3, #72	; 0x48
 8006760:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d113      	bne.n	8006790 <HAL_PCD_IRQHandler+0x31c>
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676c:	4613      	mov	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	1a9b      	subs	r3, r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	3350      	adds	r3, #80	; 0x50
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d108      	bne.n	8006790 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006788:	461a      	mov	r2, r3
 800678a:	2101      	movs	r1, #1
 800678c:	f003 f8a4 	bl	80098d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	b2db      	uxtb	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f004 ffd7 	bl	800b74a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80067a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b2:	461a      	mov	r2, r3
 80067b4:	2308      	movs	r3, #8
 80067b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	461a      	mov	r2, r3
 80067d0:	2310      	movs	r3, #16
 80067d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	461a      	mov	r2, r3
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d008      	beq.n	800680c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80067fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006806:	461a      	mov	r2, r3
 8006808:	2302      	movs	r3, #2
 800680a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fc1b 	bl	8007054 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	3301      	adds	r3, #1
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b00      	cmp	r3, #0
 800682e:	f47f af49 	bne.w	80066c4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f002 ff89 	bl	800974e <USB_ReadInterrupts>
 800683c:	4603      	mov	r3, r0
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d122      	bne.n	800688e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006862:	2b01      	cmp	r3, #1
 8006864:	d108      	bne.n	8006878 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800686e:	2100      	movs	r1, #0
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fe27 	bl	80074c4 <HAL_PCDEx_LPM_Callback>
 8006876:	e002      	b.n	800687e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f004 ffd3 	bl	800b824 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800688c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f002 ff5b 	bl	800974e <USB_ReadInterrupts>
 8006898:	4603      	mov	r3, r0
 800689a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800689e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a2:	d112      	bne.n	80068ca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d102      	bne.n	80068ba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f004 ff8f 	bl	800b7d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	695a      	ldr	r2, [r3, #20]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80068c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f002 ff3d 	bl	800974e <USB_ReadInterrupts>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	f040 80c7 	bne.w	8006a70 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2110      	movs	r1, #16
 80068fc:	4618      	mov	r0, r3
 80068fe:	f002 f80b 	bl	8008918 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006902:	2300      	movs	r3, #0
 8006904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006906:	e056      	b.n	80069b6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	461a      	mov	r2, r3
 8006916:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800691a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006936:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800693a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006956:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800695a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006968:	461a      	mov	r2, r3
 800696a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800696e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800698e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	3301      	adds	r3, #1
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3a3      	bcc.n	8006908 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80069d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ec:	f043 030b 	orr.w	r3, r3, #11
 80069f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a02:	f043 030b 	orr.w	r3, r3, #11
 8006a06:	6453      	str	r3, [r2, #68]	; 0x44
 8006a08:	e015      	b.n	8006a36 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	69fa      	ldr	r2, [r7, #28]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006a20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a30:	f043 030b 	orr.w	r3, r3, #11
 8006a34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f002 ff3c 	bl	80098d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f002 fe6a 	bl	800974e <USB_ReadInterrupts>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a84:	d124      	bne.n	8006ad0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f002 ff00 	bl	8009890 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 ffa0 	bl	80089da <USB_GetDevSpeed>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681c      	ldr	r4, [r3, #0]
 8006aa6:	f001 f921 	bl	8007cec <HAL_RCC_GetHCLKFreq>
 8006aaa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f001 fcdd 	bl	8008474 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f004 fe6d 	bl	800b79a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 fe3a 	bl	800974e <USB_ReadInterrupts>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d10a      	bne.n	8006afa <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f004 fe4a 	bl	800b77e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f002 0208 	and.w	r2, r2, #8
 8006af8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 fe25 	bl	800974e <USB_ReadInterrupts>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b0e:	d10f      	bne.n	8006b30 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f004 fea2 	bl	800b864 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fe0a 	bl	800974e <USB_ReadInterrupts>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b44:	d10f      	bne.n	8006b66 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f004 fe75 	bl	800b840 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695a      	ldr	r2, [r3, #20]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 fdef 	bl	800974e <USB_ReadInterrupts>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7a:	d10a      	bne.n	8006b92 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f004 fe83 	bl	800b888 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f002 fdd9 	bl	800974e <USB_ReadInterrupts>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d115      	bne.n	8006bd2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f004 fe73 	bl	800b8a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	e000      	b.n	8006bd2 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006bd0:	bf00      	nop
    }
  }
}
 8006bd2:	3734      	adds	r7, #52	; 0x34
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd90      	pop	{r4, r7, pc}

08006bd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_PCD_SetAddress+0x1a>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e013      	b.n	8006c1a <HAL_PCD_SetAddress+0x42>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f002 fd37 	bl	800967e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	461a      	mov	r2, r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	70fb      	strb	r3, [r7, #3]
 8006c34:	460b      	mov	r3, r1
 8006c36:	803b      	strh	r3, [r7, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da0f      	bge.n	8006c68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	4613      	mov	r3, r2
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	3338      	adds	r3, #56	; 0x38
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	705a      	strb	r2, [r3, #1]
 8006c66:	e00f      	b.n	8006c88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	4613      	mov	r3, r2
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3304      	adds	r3, #4
 8006c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006c94:	883a      	ldrh	r2, [r7, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	78ba      	ldrb	r2, [r7, #2]
 8006c9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	785b      	ldrb	r3, [r3, #1]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d004      	beq.n	8006cb2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006cb2:	78bb      	ldrb	r3, [r7, #2]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d102      	bne.n	8006cbe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_PCD_EP_Open+0xaa>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e00e      	b.n	8006cea <HAL_PCD_EP_Open+0xc8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68f9      	ldr	r1, [r7, #12]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 fea2 	bl	8008a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006cfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da0f      	bge.n	8006d26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	3338      	adds	r3, #56	; 0x38
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4413      	add	r3, r2
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	705a      	strb	r2, [r3, #1]
 8006d24:	e00f      	b.n	8006d46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_PCD_EP_Close+0x6e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e00e      	b.n	8006d7e <HAL_PCD_EP_Close+0x8c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fee0 	bl	8008b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b086      	sub	sp, #24
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	460b      	mov	r3, r1
 8006d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	f003 020f 	and.w	r2, r3, #15
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	00db      	lsls	r3, r3, #3
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	3304      	adds	r3, #4
 8006dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d102      	bne.n	8006de2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	f002 f9bb 	bl	8009174 <USB_EP0StartXfer>
 8006dfe:	e008      	b.n	8006e12 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6979      	ldr	r1, [r7, #20]
 8006e0e:	f001 ff6d 	bl	8008cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006e3e:	681b      	ldr	r3, [r3, #0]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	f003 020f 	and.w	r2, r3, #15
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	3338      	adds	r3, #56	; 0x38
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3304      	adds	r3, #4
 8006e72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d102      	bne.n	8006ea6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6979      	ldr	r1, [r7, #20]
 8006ebe:	f002 f959 	bl	8009174 <USB_EP0StartXfer>
 8006ec2:	e008      	b.n	8006ed6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	f001 ff0b 	bl	8008cec <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d901      	bls.n	8006efe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e050      	b.n	8006fa0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da0f      	bge.n	8006f26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 020f 	and.w	r2, r3, #15
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	3338      	adds	r3, #56	; 0x38
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	705a      	strb	r2, [r3, #1]
 8006f24:	e00d      	b.n	8006f42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4413      	add	r3, r2
 8006f38:	3304      	adds	r3, #4
 8006f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d101      	bne.n	8006f62 <HAL_PCD_EP_SetStall+0x82>
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e01e      	b.n	8006fa0 <HAL_PCD_EP_SetStall+0xc0>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f002 fab0 	bl	80094d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	b2d9      	uxtb	r1, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f90:	461a      	mov	r2, r3
 8006f92:	f002 fca1 	bl	80098d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d901      	bls.n	8006fc6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e042      	b.n	800704c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	da0f      	bge.n	8006fee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fce:	78fb      	ldrb	r3, [r7, #3]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	1a9b      	subs	r3, r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	3338      	adds	r3, #56	; 0x38
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	705a      	strb	r2, [r3, #1]
 8006fec:	e00f      	b.n	800700e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	f003 020f 	and.w	r2, r3, #15
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	3304      	adds	r3, #4
 8007006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007014:	78fb      	ldrb	r3, [r7, #3]
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_PCD_EP_ClrStall+0x86>
 800702a:	2302      	movs	r3, #2
 800702c:	e00e      	b.n	800704c <HAL_PCD_EP_ClrStall+0xa4>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fab8 	bl	80095b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	3338      	adds	r3, #56	; 0x38
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	3304      	adds	r3, #4
 800707a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d901      	bls.n	800708c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e06c      	b.n	8007166 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	695a      	ldr	r2, [r3, #20]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d902      	bls.n	80070a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	3303      	adds	r3, #3
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80070b0:	e02b      	b.n	800710a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d902      	bls.n	80070ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	3303      	adds	r3, #3
 80070d2:	089b      	lsrs	r3, r3, #2
 80070d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68d9      	ldr	r1, [r3, #12]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4603      	mov	r3, r0
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f002 f994 	bl	800941a <USB_WritePacket>

    ep->xfer_buff  += len;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	441a      	add	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	441a      	add	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	b29b      	uxth	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	429a      	cmp	r2, r3
 800711e:	d809      	bhi.n	8007134 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007128:	429a      	cmp	r2, r3
 800712a:	d203      	bcs.n	8007134 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1be      	bne.n	80070b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	695a      	ldr	r2, [r3, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	429a      	cmp	r2, r3
 800713e:	d811      	bhi.n	8007164 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	2201      	movs	r2, #1
 8007148:	fa02 f303 	lsl.w	r3, r2, r3
 800714c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	43db      	mvns	r3, r3
 800715a:	6939      	ldr	r1, [r7, #16]
 800715c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007160:	4013      	ands	r3, r2
 8007162:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	333c      	adds	r3, #60	; 0x3c
 8007188:	3304      	adds	r3, #4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	f040 80a0 	bne.w	80072e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d015      	beq.n	80071de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a72      	ldr	r2, [pc, #456]	; (8007380 <PCD_EP_OutXfrComplete_int+0x210>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	f240 80dd 	bls.w	8007376 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80d7 	beq.w	8007376 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	015a      	lsls	r2, r3, #5
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d4:	461a      	mov	r2, r3
 80071d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071da:	6093      	str	r3, [r2, #8]
 80071dc:	e0cb      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d009      	beq.n	80071fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f4:	461a      	mov	r2, r3
 80071f6:	2320      	movs	r3, #32
 80071f8:	6093      	str	r3, [r2, #8]
 80071fa:	e0bc      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 80b7 	bne.w	8007376 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a5d      	ldr	r2, [pc, #372]	; (8007380 <PCD_EP_OutXfrComplete_int+0x210>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d90f      	bls.n	8007230 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	461a      	mov	r2, r3
 8007228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722c:	6093      	str	r3, [r2, #8]
 800722e:	e0a2      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007242:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	0159      	lsls	r1, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	440b      	add	r3, r1
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007256:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	1a9b      	subs	r3, r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4403      	add	r3, r0
 8007266:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800726a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4403      	add	r3, r0
 800728e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4419      	add	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	4613      	mov	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4403      	add	r3, r0
 80072a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80072a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d114      	bne.n	80072da <PCD_EP_OutXfrComplete_int+0x16a>
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	1a9b      	subs	r3, r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072d2:	461a      	mov	r2, r3
 80072d4:	2101      	movs	r1, #1
 80072d6:	f002 faff 	bl	80098d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f004 fa17 	bl	800b714 <HAL_PCD_DataOutStageCallback>
 80072e6:	e046      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a26      	ldr	r2, [pc, #152]	; (8007384 <PCD_EP_OutXfrComplete_int+0x214>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d124      	bne.n	800733a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007306:	461a      	mov	r2, r3
 8007308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730c:	6093      	str	r3, [r2, #8]
 800730e:	e032      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007326:	461a      	mov	r2, r3
 8007328:	2320      	movs	r3, #32
 800732a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f004 f9ee 	bl	800b714 <HAL_PCD_DataOutStageCallback>
 8007338:	e01d      	b.n	8007376 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d114      	bne.n	800736a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d108      	bne.n	800736a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007362:	461a      	mov	r2, r3
 8007364:	2100      	movs	r1, #0
 8007366:	f002 fab7 	bl	80098d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	b2db      	uxtb	r3, r3
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f004 f9cf 	bl	800b714 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	4f54300a 	.word	0x4f54300a
 8007384:	4f54310a 	.word	0x4f54310a

08007388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	333c      	adds	r3, #60	; 0x3c
 80073a0:	3304      	adds	r3, #4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <PCD_EP_OutSetupPacket_int+0x88>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d90e      	bls.n	80073dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	461a      	mov	r2, r3
 80073d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f004 f987 	bl	800b6f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a0a      	ldr	r2, [pc, #40]	; (8007410 <PCD_EP_OutSetupPacket_int+0x88>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d90c      	bls.n	8007404 <PCD_EP_OutSetupPacket_int+0x7c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d108      	bne.n	8007404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073fc:	461a      	mov	r2, r3
 80073fe:	2101      	movs	r1, #1
 8007400:	f002 fa6a 	bl	80098d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	4f54300a 	.word	0x4f54300a

08007414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
 8007420:	4613      	mov	r3, r2
 8007422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007432:	883b      	ldrh	r3, [r7, #0]
 8007434:	0419      	lsls	r1, r3, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	430a      	orrs	r2, r1
 800743e:	629a      	str	r2, [r3, #40]	; 0x28
 8007440:	e028      	b.n	8007494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	e00d      	b.n	8007472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	3340      	adds	r3, #64	; 0x40
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	4413      	add	r3, r2
 800746a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	3301      	adds	r3, #1
 8007470:	73fb      	strb	r3, [r7, #15]
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	3b01      	subs	r3, #1
 8007478:	429a      	cmp	r2, r3
 800747a:	d3ec      	bcc.n	8007456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800747c:	883b      	ldrh	r3, [r7, #0]
 800747e:	0418      	lsls	r0, r3, #16
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	3b01      	subs	r3, #1
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	4302      	orrs	r2, r0
 800748c:	3340      	adds	r3, #64	; 0x40
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	887a      	ldrh	r2, [r7, #2]
 80074b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e25b      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d075      	beq.n	80075e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80074fa:	4ba3      	ldr	r3, [pc, #652]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	2b04      	cmp	r3, #4
 8007504:	d00c      	beq.n	8007520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007506:	4ba0      	ldr	r3, [pc, #640]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800750e:	2b08      	cmp	r3, #8
 8007510:	d112      	bne.n	8007538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007512:	4b9d      	ldr	r3, [pc, #628]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800751a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800751e:	d10b      	bne.n	8007538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007520:	4b99      	ldr	r3, [pc, #612]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05b      	beq.n	80075e4 <HAL_RCC_OscConfig+0x108>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d157      	bne.n	80075e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e236      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007540:	d106      	bne.n	8007550 <HAL_RCC_OscConfig+0x74>
 8007542:	4b91      	ldr	r3, [pc, #580]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a90      	ldr	r2, [pc, #576]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	e01d      	b.n	800758c <HAL_RCC_OscConfig+0xb0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007558:	d10c      	bne.n	8007574 <HAL_RCC_OscConfig+0x98>
 800755a:	4b8b      	ldr	r3, [pc, #556]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a8a      	ldr	r2, [pc, #552]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	4b88      	ldr	r3, [pc, #544]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a87      	ldr	r2, [pc, #540]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800756c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e00b      	b.n	800758c <HAL_RCC_OscConfig+0xb0>
 8007574:	4b84      	ldr	r3, [pc, #528]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a83      	ldr	r2, [pc, #524]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800757a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800757e:	6013      	str	r3, [r2, #0]
 8007580:	4b81      	ldr	r3, [pc, #516]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a80      	ldr	r2, [pc, #512]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800758a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007594:	f7fa fef8 	bl	8002388 <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759a:	e008      	b.n	80075ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800759c:	f7fa fef4 	bl	8002388 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b64      	cmp	r3, #100	; 0x64
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e1fb      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ae:	4b76      	ldr	r3, [pc, #472]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0f0      	beq.n	800759c <HAL_RCC_OscConfig+0xc0>
 80075ba:	e014      	b.n	80075e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075bc:	f7fa fee4 	bl	8002388 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075c4:	f7fa fee0 	bl	8002388 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b64      	cmp	r3, #100	; 0x64
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e1e7      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d6:	4b6c      	ldr	r3, [pc, #432]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f0      	bne.n	80075c4 <HAL_RCC_OscConfig+0xe8>
 80075e2:	e000      	b.n	80075e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d063      	beq.n	80076ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80075f2:	4b65      	ldr	r3, [pc, #404]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075fe:	4b62      	ldr	r3, [pc, #392]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007606:	2b08      	cmp	r3, #8
 8007608:	d11c      	bne.n	8007644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800760a:	4b5f      	ldr	r3, [pc, #380]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d116      	bne.n	8007644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007616:	4b5c      	ldr	r3, [pc, #368]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d005      	beq.n	800762e <HAL_RCC_OscConfig+0x152>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d001      	beq.n	800762e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e1bb      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762e:	4b56      	ldr	r3, [pc, #344]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	4952      	ldr	r1, [pc, #328]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800763e:	4313      	orrs	r3, r2
 8007640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007642:	e03a      	b.n	80076ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d020      	beq.n	800768e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800764c:	4b4f      	ldr	r3, [pc, #316]	; (800778c <HAL_RCC_OscConfig+0x2b0>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007652:	f7fa fe99 	bl	8002388 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800765a:	f7fa fe95 	bl	8002388 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e19c      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766c:	4b46      	ldr	r3, [pc, #280]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007678:	4b43      	ldr	r3, [pc, #268]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	4940      	ldr	r1, [pc, #256]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	4313      	orrs	r3, r2
 800768a:	600b      	str	r3, [r1, #0]
 800768c:	e015      	b.n	80076ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768e:	4b3f      	ldr	r3, [pc, #252]	; (800778c <HAL_RCC_OscConfig+0x2b0>)
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007694:	f7fa fe78 	bl	8002388 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800769c:	f7fa fe74 	bl	8002388 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e17b      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ae:	4b36      	ldr	r3, [pc, #216]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f0      	bne.n	800769c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d030      	beq.n	8007728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d016      	beq.n	80076fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ce:	4b30      	ldr	r3, [pc, #192]	; (8007790 <HAL_RCC_OscConfig+0x2b4>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d4:	f7fa fe58 	bl	8002388 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076dc:	f7fa fe54 	bl	8002388 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e15b      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ee:	4b26      	ldr	r3, [pc, #152]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCC_OscConfig+0x200>
 80076fa:	e015      	b.n	8007728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076fc:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCC_OscConfig+0x2b4>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007702:	f7fa fe41 	bl	8002388 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800770a:	f7fa fe3d 	bl	8002388 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e144      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800771c:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800771e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80a0 	beq.w	8007876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800773a:	4b13      	ldr	r3, [pc, #76]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10f      	bne.n	8007766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007754:	6413      	str	r3, [r2, #64]	; 0x40
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <HAL_RCC_OscConfig+0x2ac>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800775e:	60bb      	str	r3, [r7, #8]
 8007760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_RCC_OscConfig+0x2b8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776e:	2b00      	cmp	r3, #0
 8007770:	d121      	bne.n	80077b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007772:	4b08      	ldr	r3, [pc, #32]	; (8007794 <HAL_RCC_OscConfig+0x2b8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a07      	ldr	r2, [pc, #28]	; (8007794 <HAL_RCC_OscConfig+0x2b8>)
 8007778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800777c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800777e:	f7fa fe03 	bl	8002388 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007784:	e011      	b.n	80077aa <HAL_RCC_OscConfig+0x2ce>
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800
 800778c:	42470000 	.word	0x42470000
 8007790:	42470e80 	.word	0x42470e80
 8007794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007798:	f7fa fdf6 	bl	8002388 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e0fd      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077aa:	4b81      	ldr	r3, [pc, #516]	; (80079b0 <HAL_RCC_OscConfig+0x4d4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f0      	beq.n	8007798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d106      	bne.n	80077cc <HAL_RCC_OscConfig+0x2f0>
 80077be:	4b7d      	ldr	r3, [pc, #500]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c2:	4a7c      	ldr	r2, [pc, #496]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077c4:	f043 0301 	orr.w	r3, r3, #1
 80077c8:	6713      	str	r3, [r2, #112]	; 0x70
 80077ca:	e01c      	b.n	8007806 <HAL_RCC_OscConfig+0x32a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b05      	cmp	r3, #5
 80077d2:	d10c      	bne.n	80077ee <HAL_RCC_OscConfig+0x312>
 80077d4:	4b77      	ldr	r3, [pc, #476]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d8:	4a76      	ldr	r2, [pc, #472]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077da:	f043 0304 	orr.w	r3, r3, #4
 80077de:	6713      	str	r3, [r2, #112]	; 0x70
 80077e0:	4b74      	ldr	r3, [pc, #464]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e4:	4a73      	ldr	r2, [pc, #460]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	6713      	str	r3, [r2, #112]	; 0x70
 80077ec:	e00b      	b.n	8007806 <HAL_RCC_OscConfig+0x32a>
 80077ee:	4b71      	ldr	r3, [pc, #452]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	4a70      	ldr	r2, [pc, #448]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70
 80077fa:	4b6e      	ldr	r3, [pc, #440]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	4a6d      	ldr	r2, [pc, #436]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 8007800:	f023 0304 	bic.w	r3, r3, #4
 8007804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d015      	beq.n	800783a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780e:	f7fa fdbb 	bl	8002388 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007814:	e00a      	b.n	800782c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007816:	f7fa fdb7 	bl	8002388 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f241 3288 	movw	r2, #5000	; 0x1388
 8007824:	4293      	cmp	r3, r2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e0bc      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782c:	4b61      	ldr	r3, [pc, #388]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 800782e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0ee      	beq.n	8007816 <HAL_RCC_OscConfig+0x33a>
 8007838:	e014      	b.n	8007864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800783a:	f7fa fda5 	bl	8002388 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007840:	e00a      	b.n	8007858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fa fda1 	bl	8002388 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e0a6      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007858:	4b56      	ldr	r3, [pc, #344]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1ee      	bne.n	8007842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d105      	bne.n	8007876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800786a:	4b52      	ldr	r3, [pc, #328]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	4a51      	ldr	r2, [pc, #324]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 8007870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 8092 	beq.w	80079a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007880:	4b4c      	ldr	r3, [pc, #304]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 030c 	and.w	r3, r3, #12
 8007888:	2b08      	cmp	r3, #8
 800788a:	d05c      	beq.n	8007946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d141      	bne.n	8007918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007894:	4b48      	ldr	r3, [pc, #288]	; (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800789a:	f7fa fd75 	bl	8002388 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078a2:	f7fa fd71 	bl	8002388 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e078      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078b4:	4b3f      	ldr	r3, [pc, #252]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f0      	bne.n	80078a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	019b      	lsls	r3, r3, #6
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	3b01      	subs	r3, #1
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	061b      	lsls	r3, r3, #24
 80078e4:	4933      	ldr	r1, [pc, #204]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ea:	4b33      	ldr	r3, [pc, #204]	; (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f0:	f7fa fd4a 	bl	8002388 <HAL_GetTick>
 80078f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078f8:	f7fa fd46 	bl	8002388 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e04d      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800790a:	4b2a      	ldr	r3, [pc, #168]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0x41c>
 8007916:	e045      	b.n	80079a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007918:	4b27      	ldr	r3, [pc, #156]	; (80079b8 <HAL_RCC_OscConfig+0x4dc>)
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800791e:	f7fa fd33 	bl	8002388 <HAL_GetTick>
 8007922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007924:	e008      	b.n	8007938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007926:	f7fa fd2f 	bl	8002388 <HAL_GetTick>
 800792a:	4602      	mov	r2, r0
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e036      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007938:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1f0      	bne.n	8007926 <HAL_RCC_OscConfig+0x44a>
 8007944:	e02e      	b.n	80079a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e029      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007952:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <HAL_RCC_OscConfig+0x4d8>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	429a      	cmp	r2, r3
 8007964:	d11c      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007970:	429a      	cmp	r2, r3
 8007972:	d115      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800797a:	4013      	ands	r3, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007980:	4293      	cmp	r3, r2
 8007982:	d10d      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d106      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d001      	beq.n	80079a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40007000 	.word	0x40007000
 80079b4:	40023800 	.word	0x40023800
 80079b8:	42470060 	.word	0x42470060

080079bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0cc      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079d0:	4b68      	ldr	r3, [pc, #416]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 030f 	and.w	r3, r3, #15
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d90c      	bls.n	80079f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079de:	4b65      	ldr	r3, [pc, #404]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e6:	4b63      	ldr	r3, [pc, #396]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 030f 	and.w	r3, r3, #15
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d001      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e0b8      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d020      	beq.n	8007a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a10:	4b59      	ldr	r3, [pc, #356]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4a58      	ldr	r2, [pc, #352]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a28:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	4a52      	ldr	r2, [pc, #328]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a34:	4b50      	ldr	r3, [pc, #320]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	494d      	ldr	r1, [pc, #308]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d044      	beq.n	8007adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d107      	bne.n	8007a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a5a:	4b47      	ldr	r3, [pc, #284]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d119      	bne.n	8007a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e07f      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d003      	beq.n	8007a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d107      	bne.n	8007a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7a:	4b3f      	ldr	r3, [pc, #252]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e06f      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a8a:	4b3b      	ldr	r3, [pc, #236]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e067      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a9a:	4b37      	ldr	r3, [pc, #220]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f023 0203 	bic.w	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	4934      	ldr	r1, [pc, #208]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007aac:	f7fa fc6c 	bl	8002388 <HAL_GetTick>
 8007ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ab2:	e00a      	b.n	8007aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ab4:	f7fa fc68 	bl	8002388 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e04f      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aca:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 020c 	and.w	r2, r3, #12
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d1eb      	bne.n	8007ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007adc:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d20c      	bcs.n	8007b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aea:	4b22      	ldr	r3, [pc, #136]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af2:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <HAL_RCC_ClockConfig+0x1b8>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d001      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e032      	b.n	8007b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d008      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b10:	4b19      	ldr	r3, [pc, #100]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4916      	ldr	r1, [pc, #88]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	490e      	ldr	r1, [pc, #56]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b42:	f000 f821 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007b46:	4601      	mov	r1, r0
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	091b      	lsrs	r3, r3, #4
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <HAL_RCC_ClockConfig+0x1c0>)
 8007b54:	5cd3      	ldrb	r3, [r2, r3]
 8007b56:	fa21 f303 	lsr.w	r3, r1, r3
 8007b5a:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b5e:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <HAL_RCC_ClockConfig+0x1c8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fa fbcc 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	40023c00 	.word	0x40023c00
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	0800cca8 	.word	0x0800cca8
 8007b80:	20000090 	.word	0x20000090
 8007b84:	20000094 	.word	0x20000094

08007b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	2300      	movs	r3, #0
 8007b98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b9e:	4b50      	ldr	r3, [pc, #320]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 030c 	and.w	r3, r3, #12
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d007      	beq.n	8007bba <HAL_RCC_GetSysClockFreq+0x32>
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d008      	beq.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 808d 	bne.w	8007cce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bb4:	4b4b      	ldr	r3, [pc, #300]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007bb6:	60bb      	str	r3, [r7, #8]
       break;
 8007bb8:	e08c      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bba:	4b4b      	ldr	r3, [pc, #300]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bbc:	60bb      	str	r3, [r7, #8]
      break;
 8007bbe:	e089      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bc0:	4b47      	ldr	r3, [pc, #284]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bca:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d023      	beq.n	8007c1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bd6:	4b42      	ldr	r3, [pc, #264]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	099b      	lsrs	r3, r3, #6
 8007bdc:	f04f 0400 	mov.w	r4, #0
 8007be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	ea03 0501 	and.w	r5, r3, r1
 8007bec:	ea04 0602 	and.w	r6, r4, r2
 8007bf0:	4a3d      	ldr	r2, [pc, #244]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007bf2:	fb02 f106 	mul.w	r1, r2, r6
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	fb02 f205 	mul.w	r2, r2, r5
 8007bfc:	440a      	add	r2, r1
 8007bfe:	493a      	ldr	r1, [pc, #232]	; (8007ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c00:	fba5 0101 	umull	r0, r1, r5, r1
 8007c04:	1853      	adds	r3, r2, r1
 8007c06:	4619      	mov	r1, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f04f 0400 	mov.w	r4, #0
 8007c0e:	461a      	mov	r2, r3
 8007c10:	4623      	mov	r3, r4
 8007c12:	f7f8 ffc1 	bl	8000b98 <__aeabi_uldivmod>
 8007c16:	4603      	mov	r3, r0
 8007c18:	460c      	mov	r4, r1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e049      	b.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c1e:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	099b      	lsrs	r3, r3, #6
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	ea03 0501 	and.w	r5, r3, r1
 8007c34:	ea04 0602 	and.w	r6, r4, r2
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4632      	mov	r2, r6
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	0154      	lsls	r4, r2, #5
 8007c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007c4a:	014b      	lsls	r3, r1, #5
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4622      	mov	r2, r4
 8007c50:	1b49      	subs	r1, r1, r5
 8007c52:	eb62 0206 	sbc.w	r2, r2, r6
 8007c56:	f04f 0300 	mov.w	r3, #0
 8007c5a:	f04f 0400 	mov.w	r4, #0
 8007c5e:	0194      	lsls	r4, r2, #6
 8007c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007c64:	018b      	lsls	r3, r1, #6
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	eb64 0402 	sbc.w	r4, r4, r2
 8007c6c:	f04f 0100 	mov.w	r1, #0
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	00e2      	lsls	r2, r4, #3
 8007c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007c7a:	00d9      	lsls	r1, r3, #3
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4614      	mov	r4, r2
 8007c80:	195b      	adds	r3, r3, r5
 8007c82:	eb44 0406 	adc.w	r4, r4, r6
 8007c86:	f04f 0100 	mov.w	r1, #0
 8007c8a:	f04f 0200 	mov.w	r2, #0
 8007c8e:	02a2      	lsls	r2, r4, #10
 8007c90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007c94:	0299      	lsls	r1, r3, #10
 8007c96:	460b      	mov	r3, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f04f 0400 	mov.w	r4, #0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	f7f8 ff76 	bl	8000b98 <__aeabi_uldivmod>
 8007cac:	4603      	mov	r3, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	60bb      	str	r3, [r7, #8]
      break;
 8007ccc:	e002      	b.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007cd0:	60bb      	str	r3, [r7, #8]
      break;
 8007cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	00f42400 	.word	0x00f42400
 8007ce8:	017d7840 	.word	0x017d7840

08007cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cf0:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000090 	.word	0x20000090

08007d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d08:	f7ff fff0 	bl	8007cec <HAL_RCC_GetHCLKFreq>
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4b05      	ldr	r3, [pc, #20]	; (8007d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	0a9b      	lsrs	r3, r3, #10
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	4a03      	ldr	r2, [pc, #12]	; (8007d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d1a:	5cd3      	ldrb	r3, [r2, r3]
 8007d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40023800 	.word	0x40023800
 8007d28:	0800ccb8 	.word	0x0800ccb8

08007d2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e083      	b.n	8007e48 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fa fa1f 	bl	8002198 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6812      	ldr	r2, [r2, #0]
 8007d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f000 f9ed 	bl	8008160 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	021b      	lsls	r3, r3, #8
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007dcc:	f023 030c 	bic.w	r3, r3, #12
 8007dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	4313      	orrs	r3, r2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	011a      	lsls	r2, r3, #4
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	031b      	lsls	r3, r3, #12
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <HAL_TIM_Encoder_Start_IT+0x16>
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d010      	beq.n	8007e86 <HAL_TIM_Encoder_Start_IT+0x36>
 8007e64:	e01f      	b.n	8007ea6 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f9f6 	bl	8008260 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0202 	orr.w	r2, r2, #2
 8007e82:	60da      	str	r2, [r3, #12]
      break;
 8007e84:	e02e      	b.n	8007ee4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f9e6 	bl	8008260 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0204 	orr.w	r2, r2, #4
 8007ea2:	60da      	str	r2, [r3, #12]
      break;
 8007ea4:	e01e      	b.n	8007ee4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f9d6 	bl	8008260 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f9cf 	bl	8008260 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0202 	orr.w	r2, r2, #2
 8007ed0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0204 	orr.w	r2, r2, #4
 8007ee0:	60da      	str	r2, [r3, #12]
      break;
 8007ee2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d122      	bne.n	8007f5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d11b      	bne.n	8007f5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f06f 0202 	mvn.w	r2, #2
 8007f2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f9 fbdf 	bl	8001704 <HAL_TIM_IC_CaptureCallback>
 8007f46:	e005      	b.n	8007f54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8ea 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f8f1 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d122      	bne.n	8007fae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d11b      	bne.n	8007fae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f06f 0204 	mvn.w	r2, #4
 8007f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7f9 fbb5 	bl	8001704 <HAL_TIM_IC_CaptureCallback>
 8007f9a:	e005      	b.n	8007fa8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f8c0 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8c7 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d122      	bne.n	8008002 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f003 0308 	and.w	r3, r3, #8
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d11b      	bne.n	8008002 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f06f 0208 	mvn.w	r2, #8
 8007fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2204      	movs	r2, #4
 8007fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7f9 fb8b 	bl	8001704 <HAL_TIM_IC_CaptureCallback>
 8007fee:	e005      	b.n	8007ffc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f896 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f89d 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d122      	bne.n	8008056 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d11b      	bne.n	8008056 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f06f 0210 	mvn.w	r2, #16
 8008026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2208      	movs	r2, #8
 800802c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7f9 fb61 	bl	8001704 <HAL_TIM_IC_CaptureCallback>
 8008042:	e005      	b.n	8008050 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f86c 	bl	8008122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f873 	bl	8008136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d10e      	bne.n	8008082 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b01      	cmp	r3, #1
 8008070:	d107      	bne.n	8008082 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f06f 0201 	mvn.w	r2, #1
 800807a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f846 	bl	800810e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d10e      	bne.n	80080ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d107      	bne.n	80080ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f977 	bl	800839c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d10e      	bne.n	80080da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d107      	bne.n	80080da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f838 	bl	800814a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d10e      	bne.n	8008106 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d107      	bne.n	8008106 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f06f 0220 	mvn.w	r2, #32
 80080fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f941 	bl	8008388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a34      	ldr	r2, [pc, #208]	; (8008244 <TIM_Base_SetConfig+0xe4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00f      	beq.n	8008198 <TIM_Base_SetConfig+0x38>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817e:	d00b      	beq.n	8008198 <TIM_Base_SetConfig+0x38>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a31      	ldr	r2, [pc, #196]	; (8008248 <TIM_Base_SetConfig+0xe8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d007      	beq.n	8008198 <TIM_Base_SetConfig+0x38>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a30      	ldr	r2, [pc, #192]	; (800824c <TIM_Base_SetConfig+0xec>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d003      	beq.n	8008198 <TIM_Base_SetConfig+0x38>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a2f      	ldr	r2, [pc, #188]	; (8008250 <TIM_Base_SetConfig+0xf0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d108      	bne.n	80081aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a25      	ldr	r2, [pc, #148]	; (8008244 <TIM_Base_SetConfig+0xe4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d01b      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b8:	d017      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a22      	ldr	r2, [pc, #136]	; (8008248 <TIM_Base_SetConfig+0xe8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a21      	ldr	r2, [pc, #132]	; (800824c <TIM_Base_SetConfig+0xec>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00f      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a20      	ldr	r2, [pc, #128]	; (8008250 <TIM_Base_SetConfig+0xf0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00b      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <TIM_Base_SetConfig+0xf4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d007      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <TIM_Base_SetConfig+0xf8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_Base_SetConfig+0x8a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a1d      	ldr	r2, [pc, #116]	; (800825c <TIM_Base_SetConfig+0xfc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d108      	bne.n	80081fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a08      	ldr	r2, [pc, #32]	; (8008244 <TIM_Base_SetConfig+0xe4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d103      	bne.n	8008230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	615a      	str	r2, [r3, #20]
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40010000 	.word	0x40010000
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40000c00 	.word	0x40000c00
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2201      	movs	r2, #1
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6a1a      	ldr	r2, [r3, #32]
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	43db      	mvns	r3, r3
 8008282:	401a      	ands	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 031f 	and.w	r3, r3, #31
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	fa01 f303 	lsl.w	r3, r1, r3
 8008298:	431a      	orrs	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	621a      	str	r2, [r3, #32]
}
 800829e:	bf00      	nop
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d101      	bne.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082c0:	2302      	movs	r3, #2
 80082c2:	e050      	b.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d018      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d013      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a18      	ldr	r2, [pc, #96]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00e      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a16      	ldr	r2, [pc, #88]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a15      	ldr	r2, [pc, #84]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a13      	ldr	r2, [pc, #76]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10c      	bne.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4313      	orrs	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40014000 	.word	0x40014000

08008388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083b0:	b084      	sub	sp, #16
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	f107 001c 	add.w	r0, r7, #28
 80083be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d122      	bne.n	800840e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80083dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d105      	bne.n	8008402 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fac6 	bl	8009994 <USB_CoreReset>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
 800840c:	e01a      	b.n	8008444 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 faba 	bl	8009994 <USB_CoreReset>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	639a      	str	r2, [r3, #56]	; 0x38
 8008436:	e005      	b.n	8008444 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b01      	cmp	r3, #1
 8008448:	d10b      	bne.n	8008462 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f043 0206 	orr.w	r2, r3, #6
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f043 0220 	orr.w	r2, r3, #32
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800846e:	b004      	add	sp, #16
 8008470:	4770      	bx	lr
	...

08008474 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d165      	bne.n	8008554 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4a41      	ldr	r2, [pc, #260]	; (8008590 <USB_SetTurnaroundTime+0x11c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d906      	bls.n	800849e <USB_SetTurnaroundTime+0x2a>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4a40      	ldr	r2, [pc, #256]	; (8008594 <USB_SetTurnaroundTime+0x120>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d802      	bhi.n	800849e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008498:	230f      	movs	r3, #15
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e062      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4a3c      	ldr	r2, [pc, #240]	; (8008594 <USB_SetTurnaroundTime+0x120>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d906      	bls.n	80084b4 <USB_SetTurnaroundTime+0x40>
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4a3b      	ldr	r2, [pc, #236]	; (8008598 <USB_SetTurnaroundTime+0x124>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d802      	bhi.n	80084b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084ae:	230e      	movs	r3, #14
 80084b0:	617b      	str	r3, [r7, #20]
 80084b2:	e057      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4a38      	ldr	r2, [pc, #224]	; (8008598 <USB_SetTurnaroundTime+0x124>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d906      	bls.n	80084ca <USB_SetTurnaroundTime+0x56>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4a37      	ldr	r2, [pc, #220]	; (800859c <USB_SetTurnaroundTime+0x128>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d802      	bhi.n	80084ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084c4:	230d      	movs	r3, #13
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e04c      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4a33      	ldr	r2, [pc, #204]	; (800859c <USB_SetTurnaroundTime+0x128>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d906      	bls.n	80084e0 <USB_SetTurnaroundTime+0x6c>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <USB_SetTurnaroundTime+0x12c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d802      	bhi.n	80084e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80084da:	230c      	movs	r3, #12
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	e041      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a2f      	ldr	r2, [pc, #188]	; (80085a0 <USB_SetTurnaroundTime+0x12c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d906      	bls.n	80084f6 <USB_SetTurnaroundTime+0x82>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4a2e      	ldr	r2, [pc, #184]	; (80085a4 <USB_SetTurnaroundTime+0x130>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d802      	bhi.n	80084f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084f0:	230b      	movs	r3, #11
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e036      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <USB_SetTurnaroundTime+0x130>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d906      	bls.n	800850c <USB_SetTurnaroundTime+0x98>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <USB_SetTurnaroundTime+0x134>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d802      	bhi.n	800850c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008506:	230a      	movs	r3, #10
 8008508:	617b      	str	r3, [r7, #20]
 800850a:	e02b      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <USB_SetTurnaroundTime+0x134>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d906      	bls.n	8008522 <USB_SetTurnaroundTime+0xae>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a25      	ldr	r2, [pc, #148]	; (80085ac <USB_SetTurnaroundTime+0x138>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d802      	bhi.n	8008522 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800851c:	2309      	movs	r3, #9
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e020      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a21      	ldr	r2, [pc, #132]	; (80085ac <USB_SetTurnaroundTime+0x138>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d906      	bls.n	8008538 <USB_SetTurnaroundTime+0xc4>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4a20      	ldr	r2, [pc, #128]	; (80085b0 <USB_SetTurnaroundTime+0x13c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d802      	bhi.n	8008538 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008532:	2308      	movs	r3, #8
 8008534:	617b      	str	r3, [r7, #20]
 8008536:	e015      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4a1d      	ldr	r2, [pc, #116]	; (80085b0 <USB_SetTurnaroundTime+0x13c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d906      	bls.n	800854e <USB_SetTurnaroundTime+0xda>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <USB_SetTurnaroundTime+0x140>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d802      	bhi.n	800854e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008548:	2307      	movs	r3, #7
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e00a      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800854e:	2306      	movs	r3, #6
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	e007      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800855a:	2309      	movs	r3, #9
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e001      	b.n	8008564 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008560:	2309      	movs	r3, #9
 8008562:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	029b      	lsls	r3, r3, #10
 8008578:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800857c:	431a      	orrs	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	00d8acbf 	.word	0x00d8acbf
 8008594:	00e4e1bf 	.word	0x00e4e1bf
 8008598:	00f423ff 	.word	0x00f423ff
 800859c:	0106737f 	.word	0x0106737f
 80085a0:	011a499f 	.word	0x011a499f
 80085a4:	01312cff 	.word	0x01312cff
 80085a8:	014ca43f 	.word	0x014ca43f
 80085ac:	016e35ff 	.word	0x016e35ff
 80085b0:	01a6ab1f 	.word	0x01a6ab1f
 80085b4:	01e847ff 	.word	0x01e847ff

080085b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f043 0201 	orr.w	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f023 0201 	bic.w	r2, r3, #1
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d106      	bne.n	8008628 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]
 8008626:	e00b      	b.n	8008640 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d106      	bne.n	800863c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	e001      	b.n	8008640 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e003      	b.n	8008648 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008640:	2032      	movs	r0, #50	; 0x32
 8008642:	f7f9 fead 	bl	80023a0 <HAL_Delay>

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008650:	b084      	sub	sp, #16
 8008652:	b580      	push	{r7, lr}
 8008654:	b086      	sub	sp, #24
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800865e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	e009      	b.n	8008684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3340      	adds	r3, #64	; 0x40
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3301      	adds	r3, #1
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b0e      	cmp	r3, #14
 8008688:	d9f2      	bls.n	8008670 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11c      	bne.n	80086ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800869e:	f043 0302 	orr.w	r3, r3, #2
 80086a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38
 80086c8:	e00b      	b.n	80086e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e8:	461a      	mov	r2, r3
 80086ea:	2300      	movs	r3, #0
 80086ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	4619      	mov	r1, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fc:	461a      	mov	r2, r3
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	2b01      	cmp	r3, #1
 8008706:	d10c      	bne.n	8008722 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f949 	bl	80089a8 <USB_SetDevSpeed>
 8008716:	e008      	b.n	800872a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008718:	2101      	movs	r1, #1
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f944 	bl	80089a8 <USB_SetDevSpeed>
 8008720:	e003      	b.n	800872a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008722:	2103      	movs	r1, #3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f93f 	bl	80089a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800872a:	2110      	movs	r1, #16
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8f3 	bl	8008918 <USB_FlushTxFifo>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f911 	bl	8008964 <USB_FlushRxFifo>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008752:	461a      	mov	r2, r3
 8008754:	2300      	movs	r3, #0
 8008756:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	461a      	mov	r2, r3
 8008760:	2300      	movs	r3, #0
 8008762:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	461a      	mov	r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008770:	2300      	movs	r3, #0
 8008772:	613b      	str	r3, [r7, #16]
 8008774:	e043      	b.n	80087fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878c:	d118      	bne.n	80087c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	461a      	mov	r2, r3
 80087a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e013      	b.n	80087d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087b6:	461a      	mov	r2, r3
 80087b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e008      	b.n	80087d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087cc:	461a      	mov	r2, r3
 80087ce:	2300      	movs	r3, #0
 80087d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087de:	461a      	mov	r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087f0:	461a      	mov	r2, r3
 80087f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	3301      	adds	r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	429a      	cmp	r2, r3
 8008804:	d3b7      	bcc.n	8008776 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008806:	2300      	movs	r3, #0
 8008808:	613b      	str	r3, [r7, #16]
 800880a:	e043      	b.n	8008894 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800881e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008822:	d118      	bne.n	8008856 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008836:	461a      	mov	r2, r3
 8008838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e013      	b.n	8008868 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884c:	461a      	mov	r2, r3
 800884e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008852:	6013      	str	r3, [r2, #0]
 8008854:	e008      	b.n	8008868 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008862:	461a      	mov	r2, r3
 8008864:	2300      	movs	r3, #0
 8008866:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008874:	461a      	mov	r2, r3
 8008876:	2300      	movs	r3, #0
 8008878:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008886:	461a      	mov	r2, r3
 8008888:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800888c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	3301      	adds	r3, #1
 8008892:	613b      	str	r3, [r7, #16]
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3b7      	bcc.n	800880c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80088bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f043 0210 	orr.w	r2, r3, #16
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	699a      	ldr	r2, [r3, #24]
 80088d4:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <USB_DevInit+0x2c4>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f043 0208 	orr.w	r2, r3, #8
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d107      	bne.n	8008904 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088fc:	f043 0304 	orr.w	r3, r3, #4
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008910:	b004      	add	sp, #16
 8008912:	4770      	bx	lr
 8008914:	803c3800 	.word	0x803c3800

08008918 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	019b      	lsls	r3, r3, #6
 800892a:	f043 0220 	orr.w	r2, r3, #32
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <USB_FlushTxFifo+0x48>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d901      	bls.n	8008944 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e006      	b.n	8008952 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	2b20      	cmp	r3, #32
 800894e:	d0f0      	beq.n	8008932 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	00030d40 	.word	0x00030d40

08008964 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2210      	movs	r2, #16
 8008974:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a09      	ldr	r2, [pc, #36]	; (80089a4 <USB_FlushRxFifo+0x40>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d901      	bls.n	8008988 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e006      	b.n	8008996 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b10      	cmp	r3, #16
 8008992:	d0f0      	beq.n	8008976 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	00030d40 	.word	0x00030d40

080089a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c8:	4313      	orrs	r3, r2
 80089ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80089da:	b480      	push	{r7}
 80089dc:	b087      	sub	sp, #28
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0306 	and.w	r3, r3, #6
 80089f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80089fa:	2300      	movs	r3, #0
 80089fc:	75fb      	strb	r3, [r7, #23]
 80089fe:	e00a      	b.n	8008a16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d002      	beq.n	8008a0c <USB_GetDevSpeed+0x32>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b06      	cmp	r3, #6
 8008a0a:	d102      	bne.n	8008a12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	75fb      	strb	r3, [r7, #23]
 8008a10:	e001      	b.n	8008a16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a12:	230f      	movs	r3, #15
 8008a14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d13a      	bne.n	8008ab6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f303 	lsl.w	r3, r1, r3
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	68f9      	ldr	r1, [r7, #12]
 8008a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d155      	bne.n	8008b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	78db      	ldrb	r3, [r3, #3]
 8008a92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	059b      	lsls	r3, r3, #22
 8008a9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	0151      	lsls	r1, r2, #5
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	440a      	add	r2, r1
 8008aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	e036      	b.n	8008b24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abc:	69da      	ldr	r2, [r3, #28]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8008acc:	041b      	lsls	r3, r3, #16
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d11a      	bne.n	8008b24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	78db      	ldrb	r3, [r3, #3]
 8008b08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	0151      	lsls	r1, r2, #5
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	440a      	add	r2, r1
 8008b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
	...

08008b34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d161      	bne.n	8008c14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b66:	d11f      	bne.n	8008ba8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	2101      	movs	r1, #1
 8008bba:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc8:	4013      	ands	r3, r2
 8008bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd2:	69da      	ldr	r2, [r3, #28]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	f003 030f 	and.w	r3, r3, #15
 8008bdc:	2101      	movs	r1, #1
 8008bde:	fa01 f303 	lsl.w	r3, r1, r3
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	43db      	mvns	r3, r3
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bec:	4013      	ands	r3, r2
 8008bee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	0159      	lsls	r1, r3, #5
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	440b      	add	r3, r1
 8008c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4b35      	ldr	r3, [pc, #212]	; (8008ce4 <USB_DeactivateEndpoint+0x1b0>)
 8008c0e:	4013      	ands	r3, r2
 8008c10:	600b      	str	r3, [r1, #0]
 8008c12:	e060      	b.n	8008cd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c2a:	d11f      	bne.n	8008c6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	0151      	lsls	r1, r2, #5
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	440a      	add	r2, r1
 8008c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	0151      	lsls	r1, r2, #5
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	440a      	add	r2, r1
 8008c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 030f 	and.w	r3, r3, #15
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c82:	041b      	lsls	r3, r3, #16
 8008c84:	43db      	mvns	r3, r3
 8008c86:	68f9      	ldr	r1, [r7, #12]
 8008c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	2101      	movs	r1, #1
 8008ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca6:	041b      	lsls	r3, r3, #16
 8008ca8:	43db      	mvns	r3, r3
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	015a      	lsls	r2, r3, #5
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	0159      	lsls	r1, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	440b      	add	r3, r1
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <USB_DeactivateEndpoint+0x1b4>)
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	ec337800 	.word	0xec337800
 8008ce8:	eff37800 	.word	0xeff37800

08008cec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	785b      	ldrb	r3, [r3, #1]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	f040 815c 	bne.w	8008fc6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d132      	bne.n	8008d7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	015a      	lsls	r2, r3, #5
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	0151      	lsls	r1, r2, #5
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	69fa      	ldr	r2, [r7, #28]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d74:	0cdb      	lsrs	r3, r3, #19
 8008d76:	04db      	lsls	r3, r3, #19
 8008d78:	6113      	str	r3, [r2, #16]
 8008d7a:	e074      	b.n	8008e66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d96:	0cdb      	lsrs	r3, r3, #19
 8008d98:	04db      	lsls	r3, r3, #19
 8008d9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008dba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008dbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	691a      	ldr	r2, [r3, #16]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	6959      	ldr	r1, [r3, #20]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	440b      	add	r3, r1
 8008dd8:	1e59      	subs	r1, r3, #1
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8008de2:	04d9      	lsls	r1, r3, #19
 8008de4:	4b9d      	ldr	r3, [pc, #628]	; (800905c <USB_EPStartXfer+0x370>)
 8008de6:	400b      	ands	r3, r1
 8008de8:	69b9      	ldr	r1, [r7, #24]
 8008dea:	0148      	lsls	r0, r1, #5
 8008dec:	69f9      	ldr	r1, [r7, #28]
 8008dee:	4401      	add	r1, r0
 8008df0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008df4:	4313      	orrs	r3, r2
 8008df6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	0148      	lsls	r0, r1, #5
 8008e12:	69f9      	ldr	r1, [r7, #28]
 8008e14:	4401      	add	r1, r0
 8008e16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	78db      	ldrb	r3, [r3, #3]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d11f      	bne.n	8008e66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	0151      	lsls	r1, r2, #5
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d14b      	bne.n	8008f04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d009      	beq.n	8008e88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	78db      	ldrb	r3, [r3, #3]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d128      	bne.n	8008ee2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d110      	bne.n	8008ec2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	69fa      	ldr	r2, [r7, #28]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	e00f      	b.n	8008ee2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	0151      	lsls	r1, r2, #5
 8008ed4:	69fa      	ldr	r2, [r7, #28]
 8008ed6:	440a      	add	r2, r1
 8008ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ee0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	0151      	lsls	r1, r2, #5
 8008ef4:	69fa      	ldr	r2, [r7, #28]
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	e12f      	b.n	8009164 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	78db      	ldrb	r3, [r3, #3]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d015      	beq.n	8008f58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f000 8117 	beq.w	8009164 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	2101      	movs	r1, #1
 8008f48:	fa01 f303 	lsl.w	r3, r1, r3
 8008f4c:	69f9      	ldr	r1, [r7, #28]
 8008f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f52:	4313      	orrs	r3, r2
 8008f54:	634b      	str	r3, [r1, #52]	; 0x34
 8008f56:	e105      	b.n	8009164 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d110      	bne.n	8008f8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	e00f      	b.n	8008faa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	69ba      	ldr	r2, [r7, #24]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fa8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	68d9      	ldr	r1, [r3, #12]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	b298      	uxth	r0, r3
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fa2b 	bl	800941a <USB_WritePacket>
 8008fc4:	e0ce      	b.n	8009164 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	0151      	lsls	r1, r2, #5
 8008fd8:	69fa      	ldr	r2, [r7, #28]
 8008fda:	440a      	add	r2, r1
 8008fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fe0:	0cdb      	lsrs	r3, r3, #19
 8008fe2:	04db      	lsls	r3, r3, #19
 8008fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d126      	bne.n	8009060 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	0148      	lsls	r0, r1, #5
 800902c:	69f9      	ldr	r1, [r7, #28]
 800902e:	4401      	add	r1, r0
 8009030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009034:	4313      	orrs	r3, r2
 8009036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009056:	6113      	str	r3, [r2, #16]
 8009058:	e036      	b.n	80090c8 <USB_EPStartXfer+0x3dc>
 800905a:	bf00      	nop
 800905c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	4413      	add	r3, r2
 800906a:	1e5a      	subs	r2, r3, #1
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	fbb2 f3f3 	udiv	r3, r2, r3
 8009074:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	8afb      	ldrh	r3, [r7, #22]
 8009086:	04d9      	lsls	r1, r3, #19
 8009088:	4b39      	ldr	r3, [pc, #228]	; (8009170 <USB_EPStartXfer+0x484>)
 800908a:	400b      	ands	r3, r1
 800908c:	69b9      	ldr	r1, [r7, #24]
 800908e:	0148      	lsls	r0, r1, #5
 8009090:	69f9      	ldr	r1, [r7, #28]
 8009092:	4401      	add	r1, r0
 8009094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009098:	4313      	orrs	r3, r2
 800909a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a8:	691a      	ldr	r2, [r3, #16]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	8af9      	ldrh	r1, [r7, #22]
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b8:	69b9      	ldr	r1, [r7, #24]
 80090ba:	0148      	lsls	r0, r1, #5
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	4401      	add	r1, r0
 80090c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090c4:	4313      	orrs	r3, r2
 80090c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10d      	bne.n	80090ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d009      	beq.n	80090ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	68d9      	ldr	r1, [r3, #12]
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	460a      	mov	r2, r1
 80090e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	78db      	ldrb	r3, [r3, #3]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d128      	bne.n	8009144 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d110      	bne.n	8009124 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800911c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	e00f      	b.n	8009144 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	440a      	add	r2, r1
 800913a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800913e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009142:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009162:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	1ff80000 	.word	0x1ff80000

08009174 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	785b      	ldrb	r3, [r3, #1]
 8009190:	2b01      	cmp	r3, #1
 8009192:	f040 80cd 	bne.w	8009330 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d132      	bne.n	8009204 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80091bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80091c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	0151      	lsls	r1, r2, #5
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	440a      	add	r2, r1
 80091f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091fc:	0cdb      	lsrs	r3, r3, #19
 80091fe:	04db      	lsls	r3, r3, #19
 8009200:	6113      	str	r3, [r2, #16]
 8009202:	e04e      	b.n	80092a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	4413      	add	r3, r2
 800920c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	0151      	lsls	r1, r2, #5
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	440a      	add	r2, r1
 800921a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800921e:	0cdb      	lsrs	r3, r3, #19
 8009220:	04db      	lsls	r3, r3, #19
 8009222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009242:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009246:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	695a      	ldr	r2, [r3, #20]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	429a      	cmp	r2, r3
 8009252:	d903      	bls.n	800925c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	0151      	lsls	r1, r2, #5
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	440a      	add	r2, r1
 8009272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800927a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009288:	691a      	ldr	r2, [r3, #16]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009292:	6939      	ldr	r1, [r7, #16]
 8009294:	0148      	lsls	r0, r1, #5
 8009296:	6979      	ldr	r1, [r7, #20]
 8009298:	4401      	add	r1, r0
 800929a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800929e:	4313      	orrs	r3, r2
 80092a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d11e      	bne.n	80092e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d009      	beq.n	80092c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	461a      	mov	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092e2:	6013      	str	r3, [r2, #0]
 80092e4:	e092      	b.n	800940c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	693a      	ldr	r2, [r7, #16]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009304:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d07e      	beq.n	800940c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	2101      	movs	r1, #1
 8009320:	fa01 f303 	lsl.w	r3, r1, r3
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800932a:	4313      	orrs	r3, r2
 800932c:	634b      	str	r3, [r1, #52]	; 0x34
 800932e:	e06d      	b.n	800940c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	0cdb      	lsrs	r3, r3, #19
 800934c:	04db      	lsls	r3, r3, #19
 800934e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800936e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009372:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800939e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ba:	6939      	ldr	r1, [r7, #16]
 80093bc:	0148      	lsls	r0, r1, #5
 80093be:	6979      	ldr	r1, [r7, #20]
 80093c0:	4401      	add	r1, r0
 80093c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093c6:	4313      	orrs	r3, r2
 80093c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10d      	bne.n	80093ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	68d9      	ldr	r1, [r3, #12]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e8:	460a      	mov	r2, r1
 80093ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800940a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800941a:	b480      	push	{r7}
 800941c:	b089      	sub	sp, #36	; 0x24
 800941e:	af00      	add	r7, sp, #0
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	60b9      	str	r1, [r7, #8]
 8009424:	4611      	mov	r1, r2
 8009426:	461a      	mov	r2, r3
 8009428:	460b      	mov	r3, r1
 800942a:	71fb      	strb	r3, [r7, #7]
 800942c:	4613      	mov	r3, r2
 800942e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009438:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800943c:	2b00      	cmp	r3, #0
 800943e:	d11a      	bne.n	8009476 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009440:	88bb      	ldrh	r3, [r7, #4]
 8009442:	3303      	adds	r3, #3
 8009444:	089b      	lsrs	r3, r3, #2
 8009446:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009448:	2300      	movs	r3, #0
 800944a:	61bb      	str	r3, [r7, #24]
 800944c:	e00f      	b.n	800946e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	031a      	lsls	r2, r3, #12
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	4413      	add	r3, r2
 8009456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945a:	461a      	mov	r2, r3
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	3304      	adds	r3, #4
 8009466:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	3301      	adds	r3, #1
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	429a      	cmp	r2, r3
 8009474:	d3eb      	bcc.n	800944e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3724      	adds	r7, #36	; 0x24
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009484:	b480      	push	{r7}
 8009486:	b089      	sub	sp, #36	; 0x24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	3303      	adds	r3, #3
 800949e:	089b      	lsrs	r3, r3, #2
 80094a0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	61bb      	str	r3, [r7, #24]
 80094a6:	e00b      	b.n	80094c0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	3304      	adds	r3, #4
 80094b8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	3301      	adds	r3, #1
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d3ef      	bcc.n	80094a8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80094c8:	69fb      	ldr	r3, [r7, #28]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3724      	adds	r7, #36	; 0x24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d12c      	bne.n	800954c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	db12      	blt.n	800952a <USB_EPSetStall+0x54>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00f      	beq.n	800952a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009528:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	0151      	lsls	r1, r2, #5
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	440a      	add	r2, r1
 8009540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e02b      	b.n	80095a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	db12      	blt.n	8009584 <USB_EPSetStall+0xae>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00f      	beq.n	8009584 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800957e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009582:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	0151      	lsls	r1, r2, #5
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	440a      	add	r2, r1
 800959a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800959e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b085      	sub	sp, #20
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	785b      	ldrb	r3, [r3, #1]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d128      	bne.n	8009620 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	78db      	ldrb	r3, [r3, #3]
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d003      	beq.n	80095fe <USB_EPClearStall+0x4c>
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	78db      	ldrb	r3, [r3, #3]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d138      	bne.n	8009670 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	0151      	lsls	r1, r2, #5
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	440a      	add	r2, r1
 8009614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	e027      	b.n	8009670 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	440a      	add	r2, r1
 8009636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800963a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800963e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	78db      	ldrb	r3, [r3, #3]
 8009644:	2b03      	cmp	r3, #3
 8009646:	d003      	beq.n	8009650 <USB_EPClearStall+0x9e>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	78db      	ldrb	r3, [r3, #3]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d10f      	bne.n	8009670 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800966e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800969c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80096a0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80096b2:	68f9      	ldr	r1, [r7, #12]
 80096b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096b8:	4313      	orrs	r3, r2
 80096ba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096e4:	f023 0303 	bic.w	r3, r3, #3
 80096e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096f8:	f023 0302 	bic.w	r3, r3, #2
 80096fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800973a:	f043 0302 	orr.w	r3, r3, #2
 800973e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4013      	ands	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009766:	68fb      	ldr	r3, [r7, #12]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	4013      	ands	r3, r2
 8009796:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	0c1b      	lsrs	r3, r3, #16
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	4013      	ands	r3, r2
 80097ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	b29b      	uxth	r3, r3
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	4013      	ands	r3, r2
 8009808:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800980a:	68bb      	ldr	r3, [r7, #8]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	01db      	lsls	r3, r3, #7
 800984a:	b2db      	uxtb	r3, r3
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4313      	orrs	r3, r2
 8009850:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4013      	ands	r3, r2
 8009864:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009866:	68bb      	ldr	r3, [r7, #8]
}
 8009868:	4618      	mov	r0, r3
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	695b      	ldr	r3, [r3, #20]
 8009880:	f003 0301 	and.w	r3, r3, #1
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
	...

080098d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	460b      	mov	r3, r1
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	333c      	adds	r3, #60	; 0x3c
 80098ee:	3304      	adds	r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	4a26      	ldr	r2, [pc, #152]	; (8009990 <USB_EP0_OutStart+0xb8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d90a      	bls.n	8009912 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800990c:	d101      	bne.n	8009912 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	e037      	b.n	8009982 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009918:	461a      	mov	r2, r3
 800991a:	2300      	movs	r3, #0
 800991c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009940:	f043 0318 	orr.w	r3, r3, #24
 8009944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009954:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009958:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d10f      	bne.n	8009980 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009966:	461a      	mov	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800997e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	4f54300a 	.word	0x4f54300a

08009994 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4a13      	ldr	r2, [pc, #76]	; (80099f8 <USB_CoreReset+0x64>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d901      	bls.n	80099b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ae:	2303      	movs	r3, #3
 80099b0:	e01b      	b.n	80099ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	daf2      	bge.n	80099a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f043 0201 	orr.w	r2, r3, #1
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3301      	adds	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <USB_CoreReset+0x64>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d901      	bls.n	80099dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e006      	b.n	80099ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d0f0      	beq.n	80099ca <USB_CoreReset+0x36>

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	00030d40 	.word	0x00030d40

080099fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a0c:	f002 f938 	bl	800bc80 <malloc>
 8009a10:	4603      	mov	r3, r0
 8009a12:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009a22:	2302      	movs	r3, #2
 8009a24:	e066      	b.n	8009af4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7c1b      	ldrb	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d119      	bne.n	8009a6a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	2181      	movs	r1, #129	; 0x81
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 ffa5 	bl	800b98e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a4e:	2202      	movs	r2, #2
 8009a50:	2101      	movs	r1, #1
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 ff9b 	bl	800b98e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2210      	movs	r2, #16
 8009a64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009a68:	e016      	b.n	8009a98 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	2181      	movs	r1, #129	; 0x81
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 ff8c 	bl	800b98e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a7c:	2340      	movs	r3, #64	; 0x40
 8009a7e:	2202      	movs	r2, #2
 8009a80:	2101      	movs	r1, #1
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 ff83 	bl	800b98e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2210      	movs	r2, #16
 8009a94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a98:	2308      	movs	r3, #8
 8009a9a:	2203      	movs	r2, #3
 8009a9c:	2182      	movs	r1, #130	; 0x82
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 ff75 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7c1b      	ldrb	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ad8:	2101      	movs	r1, #1
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f002 f846 	bl	800bb6c <USBD_LL_PrepareReceive>
 8009ae0:	e007      	b.n	8009af2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	2101      	movs	r1, #1
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f002 f83d 	bl	800bb6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b0c:	2181      	movs	r1, #129	; 0x81
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 ff63 	bl	800b9da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 ff5c 	bl	800b9da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b2a:	2182      	movs	r1, #130	; 0x82
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f001 ff54 	bl	800b9da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00e      	beq.n	8009b6a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f002 f897 	bl	800bc90 <free>
    pdev->pClassData = NULL;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d03a      	beq.n	8009c14 <USBD_CDC_Setup+0xa0>
 8009b9e:	2b20      	cmp	r3, #32
 8009ba0:	f040 8097 	bne.w	8009cd2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	88db      	ldrh	r3, [r3, #6]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d029      	beq.n	8009c00 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	b25b      	sxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da11      	bge.n	8009bda <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8009bc2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	88d2      	ldrh	r2, [r2, #6]
 8009bc8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009bca:	6939      	ldr	r1, [r7, #16]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	88db      	ldrh	r3, [r3, #6]
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fa9d 	bl	800b112 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8009bd8:	e082      	b.n	8009ce0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	785a      	ldrb	r2, [r3, #1]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	88db      	ldrh	r3, [r3, #6]
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009bf0:	6939      	ldr	r1, [r7, #16]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	88db      	ldrh	r3, [r3, #6]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f001 fab6 	bl	800b16a <USBD_CtlPrepareRx>
    break;
 8009bfe:	e06f      	b.n	8009ce0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	7850      	ldrb	r0, [r2, #1]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	4798      	blx	r3
    break;
 8009c12:	e065      	b.n	8009ce0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	2b0b      	cmp	r3, #11
 8009c1a:	d84f      	bhi.n	8009cbc <USBD_CDC_Setup+0x148>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <USBD_CDC_Setup+0xb0>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c55 	.word	0x08009c55
 8009c28:	08009ccb 	.word	0x08009ccb
 8009c2c:	08009cbd 	.word	0x08009cbd
 8009c30:	08009cbd 	.word	0x08009cbd
 8009c34:	08009cbd 	.word	0x08009cbd
 8009c38:	08009cbd 	.word	0x08009cbd
 8009c3c:	08009cbd 	.word	0x08009cbd
 8009c40:	08009cbd 	.word	0x08009cbd
 8009c44:	08009cbd 	.word	0x08009cbd
 8009c48:	08009cbd 	.word	0x08009cbd
 8009c4c:	08009c7d 	.word	0x08009c7d
 8009c50:	08009ca5 	.word	0x08009ca5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d107      	bne.n	8009c6e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	2202      	movs	r2, #2
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f001 fa53 	bl	800b112 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c6c:	e030      	b.n	8009cd0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f9dd 	bl	800b030 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c76:	2303      	movs	r3, #3
 8009c78:	75fb      	strb	r3, [r7, #23]
      break;
 8009c7a:	e029      	b.n	8009cd0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	d107      	bne.n	8009c96 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c86:	f107 030f 	add.w	r3, r7, #15
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 fa3f 	bl	800b112 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009c94:	e01c      	b.n	8009cd0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f9c9 	bl	800b030 <USBD_CtlError>
        ret = USBD_FAIL;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca2:	e015      	b.n	8009cd0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d00f      	beq.n	8009cce <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 f9bd 	bl	800b030 <USBD_CtlError>
        ret = USBD_FAIL;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009cba:	e008      	b.n	8009cce <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 f9b6 	bl	800b030 <USBD_CtlError>
      ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc8:	e002      	b.n	8009cd0 <USBD_CDC_Setup+0x15c>
      break;
 8009cca:	bf00      	nop
 8009ccc:	e008      	b.n	8009ce0 <USBD_CDC_Setup+0x16c>
      break;
 8009cce:	bf00      	nop
    }
    break;
 8009cd0:	e006      	b.n	8009ce0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f9ab 	bl	800b030 <USBD_CtlError>
    ret = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	75fb      	strb	r3, [r7, #23]
    break;
 8009cde:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop

08009cec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e049      	b.n	8009da2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3318      	adds	r3, #24
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d029      	beq.n	8009d80 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	6879      	ldr	r1, [r7, #4]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	440b      	add	r3, r1
 8009d3a:	3318      	adds	r3, #24
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	78f9      	ldrb	r1, [r7, #3]
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	460b      	mov	r3, r1
 8009d44:	00db      	lsls	r3, r3, #3
 8009d46:	1a5b      	subs	r3, r3, r1
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4403      	add	r3, r0
 8009d4c:	3344      	adds	r3, #68	; 0x44
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d54:	fb03 f301 	mul.w	r3, r3, r1
 8009d58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d110      	bne.n	8009d80 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3318      	adds	r3, #24
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009d72:	78f9      	ldrb	r1, [r7, #3]
 8009d74:	2300      	movs	r3, #0
 8009d76:	2200      	movs	r2, #0
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f001 fed6 	bl	800bb2a <USBD_LL_Transmit>
 8009d7e:	e00f      	b.n	8009da0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e015      	b.n	8009df8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009dcc:	78fb      	ldrb	r3, [r7, #3]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 feec 	bl	800bbae <USBD_LL_GetRxDataSize>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009df2:	4611      	mov	r1, r2
 8009df4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e0e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d015      	beq.n	8009e46 <USBD_CDC_EP0_RxReady+0x46>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e20:	2bff      	cmp	r3, #255	; 0xff
 8009e22:	d010      	beq.n	8009e46 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009e32:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e3a:	b292      	uxth	r2, r2
 8009e3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	22ff      	movs	r2, #255	; 0xff
 8009e42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2243      	movs	r2, #67	; 0x43
 8009e5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009e5e:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20000124 	.word	0x20000124

08009e70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2243      	movs	r2, #67	; 0x43
 8009e7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009e7e:	4b03      	ldr	r3, [pc, #12]	; (8009e8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	200000e0 	.word	0x200000e0

08009e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2243      	movs	r2, #67	; 0x43
 8009e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009e9e:	4b03      	ldr	r3, [pc, #12]	; (8009eac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	20000168 	.word	0x20000168

08009eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	220a      	movs	r2, #10
 8009ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009ebe:	4b03      	ldr	r3, [pc, #12]	; (8009ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	2000009c 	.word	0x2000009c

08009ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e004      	b.n	8009eee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009efa:	b480      	push	{r7}
 8009efc:	b087      	sub	sp, #28
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f3c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009f64:	2301      	movs	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e01a      	b.n	8009fac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d114      	bne.n	8009faa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009f9e:	2181      	movs	r1, #129	; 0x81
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f001 fdc2 	bl	800bb2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e016      	b.n	800a000 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7c1b      	ldrb	r3, [r3, #16]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f001 fdc0 	bl	800bb6c <USBD_LL_PrepareReceive>
 8009fec:	e007      	b.n	8009ffe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ff4:	2340      	movs	r3, #64	; 0x40
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 fdb7 	bl	800bb6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e025      	b.n	800a06c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	79fa      	ldrb	r2, [r7, #7]
 800a05e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f001 fc2d 	bl	800b8c0 <USBD_LL_Init>
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a088:	2303      	movs	r3, #3
 800a08a:	e010      	b.n	800a0ae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09c:	f107 020e 	add.w	r2, r7, #14
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4798      	blx	r3
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 fc4a 	bl	800b958 <USBD_LL_Start>
 800a0c4:	4603      	mov	r3, r0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d009      	beq.n	800a112 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	78fa      	ldrb	r2, [r7, #3]
 800a108:	4611      	mov	r1, r2
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
 800a10e:	4603      	mov	r3, r0
 800a110:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d007      	beq.n	800a142 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	4611      	mov	r1, r2
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
  }

  return USBD_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 ff2c 	bl	800afbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a180:	f003 031f 	and.w	r3, r3, #31
 800a184:	2b01      	cmp	r3, #1
 800a186:	d00e      	beq.n	800a1a6 <USBD_LL_SetupStage+0x5a>
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d302      	bcc.n	800a192 <USBD_LL_SetupStage+0x46>
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d014      	beq.n	800a1ba <USBD_LL_SetupStage+0x6e>
 800a190:	e01d      	b.n	800a1ce <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa18 	bl	800a5d0 <USBD_StdDevReq>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a4:	e020      	b.n	800a1e8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fa7c 	bl	800a6ac <USBD_StdItfReq>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b8:	e016      	b.n	800a1e8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fab8 	bl	800a738 <USBD_StdEPReq>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a1cc:	e00c      	b.n	800a1e8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 fc1b 	bl	800ba18 <USBD_LL_StallEP>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e6:	bf00      	nop
  }

  return ret;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b086      	sub	sp, #24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a200:	7afb      	ldrb	r3, [r7, #11]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d137      	bne.n	800a276 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a20c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a214:	2b03      	cmp	r3, #3
 800a216:	d14a      	bne.n	800a2ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	429a      	cmp	r2, r3
 800a222:	d913      	bls.n	800a24c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	1ad2      	subs	r2, r2, r3
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	4293      	cmp	r3, r2
 800a23c:	bf28      	it	cs
 800a23e:	4613      	movcs	r3, r2
 800a240:	461a      	mov	r2, r3
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 ffad 	bl	800b1a4 <USBD_CtlContinueRx>
 800a24a:	e030      	b.n	800a2ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d105      	bne.n	800a26e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 ffa9 	bl	800b1c6 <USBD_CtlSendStatus>
 800a274:	e01b      	b.n	800a2ae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d013      	beq.n	800a2aa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d10e      	bne.n	800a2aa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	7afa      	ldrb	r2, [r7, #11]
 800a296:	4611      	mov	r1, r2
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	4798      	blx	r3
 800a29c:	4603      	mov	r3, r0
 800a29e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
 800a2a8:	e002      	b.n	800a2b0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e000      	b.n	800a2b0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d16a      	bne.n	800a3a2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d155      	bne.n	800a388 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d914      	bls.n	800a312 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	1ad2      	subs	r2, r2, r3
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 ff22 	bl	800b148 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a304:	2300      	movs	r3, #0
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f001 fc2e 	bl	800bb6c <USBD_LL_PrepareReceive>
 800a310:	e03a      	b.n	800a388 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d11c      	bne.n	800a358 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a326:	429a      	cmp	r2, r3
 800a328:	d316      	bcc.n	800a358 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a334:	429a      	cmp	r2, r3
 800a336:	d20f      	bcs.n	800a358 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a338:	2200      	movs	r2, #0
 800a33a:	2100      	movs	r1, #0
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 ff03 	bl	800b148 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a34a:	2300      	movs	r3, #0
 800a34c:	2200      	movs	r2, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f001 fc0b 	bl	800bb6c <USBD_LL_PrepareReceive>
 800a356:	e017      	b.n	800a388 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00a      	beq.n	800a37a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d105      	bne.n	800a37a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a37a:	2180      	movs	r1, #128	; 0x80
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f001 fb4b 	bl	800ba18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 ff32 	bl	800b1ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d123      	bne.n	800a3da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fe9b 	bl	800a0ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3a0:	e01b      	b.n	800a3da <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d013      	beq.n	800a3d6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d10e      	bne.n	800a3d6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	7afa      	ldrb	r2, [r7, #11]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	4798      	blx	r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	e002      	b.n	800a3dc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e000      	b.n	800a3dc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a410:	2b00      	cmp	r3, #0
 800a412:	d009      	beq.n	800a428 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6852      	ldr	r2, [r2, #4]
 800a420:	b2d2      	uxtb	r2, r2
 800a422:	4611      	mov	r1, r2
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a428:	2340      	movs	r3, #64	; 0x40
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 faad 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2240      	movs	r2, #64	; 0x40
 800a440:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a444:	2340      	movs	r3, #64	; 0x40
 800a446:	2200      	movs	r2, #0
 800a448:	2180      	movs	r1, #128	; 0x80
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 fa9f 	bl	800b98e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	460b      	mov	r3, r1
 800a470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2204      	movs	r2, #4
 800a49e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d105      	bne.n	800a4ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d10b      	bne.n	800a506 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	460b      	mov	r3, r1
 800a534:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b082      	sub	sp, #8
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a570:	2b00      	cmp	r3, #0
 800a572:	d009      	beq.n	800a588 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6852      	ldr	r2, [r2, #4]
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	4611      	mov	r1, r2
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	4798      	blx	r3
  }

  return USBD_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5b0:	8a3b      	ldrh	r3, [r7, #16]
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	b21a      	sxth	r2, r3
 800a5b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	b21b      	sxth	r3, r3
 800a5be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d004      	beq.n	800a5f4 <USBD_StdDevReq+0x24>
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d002      	beq.n	800a5f4 <USBD_StdDevReq+0x24>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00a      	beq.n	800a608 <USBD_StdDevReq+0x38>
 800a5f2:	e050      	b.n	800a696 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
    break;
 800a606:	e04b      	b.n	800a6a0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	785b      	ldrb	r3, [r3, #1]
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	d83c      	bhi.n	800a68a <USBD_StdDevReq+0xba>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <USBD_StdDevReq+0x48>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a66d 	.word	0x0800a66d
 800a61c:	0800a681 	.word	0x0800a681
 800a620:	0800a68b 	.word	0x0800a68b
 800a624:	0800a677 	.word	0x0800a677
 800a628:	0800a68b 	.word	0x0800a68b
 800a62c:	0800a64b 	.word	0x0800a64b
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a68b 	.word	0x0800a68b
 800a638:	0800a663 	.word	0x0800a663
 800a63c:	0800a655 	.word	0x0800a655
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f9ce 	bl	800a9e4 <USBD_GetDescriptor>
      break;
 800a648:	e024      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fb33 	bl	800acb8 <USBD_SetAddress>
      break;
 800a652:	e01f      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb70 	bl	800ad3c <USBD_SetConfig>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e018      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fc0d 	bl	800ae84 <USBD_GetConfig>
      break;
 800a66a:	e013      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fc3c 	bl	800aeec <USBD_GetStatus>
      break;
 800a674:	e00e      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fc6a 	bl	800af52 <USBD_SetFeature>
      break;
 800a67e:	e009      	b.n	800a694 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fc79 	bl	800af7a <USBD_ClrFeature>
      break;
 800a688:	e004      	b.n	800a694 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a68a:	6839      	ldr	r1, [r7, #0]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fccf 	bl	800b030 <USBD_CtlError>
      break;
 800a692:	bf00      	nop
    }
    break;
 800a694:	e004      	b.n	800a6a0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fcc9 	bl	800b030 <USBD_CtlError>
    break;
 800a69e:	bf00      	nop
  }

  return ret;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop

0800a6ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6c2:	2b20      	cmp	r3, #32
 800a6c4:	d003      	beq.n	800a6ce <USBD_StdItfReq+0x22>
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d001      	beq.n	800a6ce <USBD_StdItfReq+0x22>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d12a      	bne.n	800a724 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d81d      	bhi.n	800a716 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d813      	bhi.n	800a70c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	6839      	ldr	r1, [r7, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	88db      	ldrh	r3, [r3, #6]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d110      	bne.n	800a720 <USBD_StdItfReq+0x74>
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10d      	bne.n	800a720 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fd5e 	bl	800b1c6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a70a:	e009      	b.n	800a720 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fc8e 	bl	800b030 <USBD_CtlError>
      break;
 800a714:	e004      	b.n	800a720 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fc89 	bl	800b030 <USBD_CtlError>
      break;
 800a71e:	e000      	b.n	800a722 <USBD_StdItfReq+0x76>
      break;
 800a720:	bf00      	nop
    }
    break;
 800a722:	e004      	b.n	800a72e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fc82 	bl	800b030 <USBD_CtlError>
    break;
 800a72c:	bf00      	nop
  }

  return ret;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	889b      	ldrh	r3, [r3, #4]
 800a74a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a754:	2b20      	cmp	r3, #32
 800a756:	d004      	beq.n	800a762 <USBD_StdEPReq+0x2a>
 800a758:	2b40      	cmp	r3, #64	; 0x40
 800a75a:	d002      	beq.n	800a762 <USBD_StdEPReq+0x2a>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00a      	beq.n	800a776 <USBD_StdEPReq+0x3e>
 800a760:	e135      	b.n	800a9ce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
    break;
 800a774:	e130      	b.n	800a9d8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	785b      	ldrb	r3, [r3, #1]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d03e      	beq.n	800a7fc <USBD_StdEPReq+0xc4>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d002      	beq.n	800a788 <USBD_StdEPReq+0x50>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d077      	beq.n	800a876 <USBD_StdEPReq+0x13e>
 800a786:	e11c      	b.n	800a9c2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d002      	beq.n	800a798 <USBD_StdEPReq+0x60>
 800a792:	2b03      	cmp	r3, #3
 800a794:	d015      	beq.n	800a7c2 <USBD_StdEPReq+0x8a>
 800a796:	e02b      	b.n	800a7f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00c      	beq.n	800a7b8 <USBD_StdEPReq+0x80>
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b80      	cmp	r3, #128	; 0x80
 800a7a2:	d009      	beq.n	800a7b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 f935 	bl	800ba18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ae:	2180      	movs	r1, #128	; 0x80
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f931 	bl	800ba18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a7b6:	e020      	b.n	800a7fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fc38 	bl	800b030 <USBD_CtlError>
        break;
 800a7c0:	e01b      	b.n	800a7fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	885b      	ldrh	r3, [r3, #2]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10e      	bne.n	800a7e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00b      	beq.n	800a7e8 <USBD_StdEPReq+0xb0>
 800a7d0:	7bbb      	ldrb	r3, [r7, #14]
 800a7d2:	2b80      	cmp	r3, #128	; 0x80
 800a7d4:	d008      	beq.n	800a7e8 <USBD_StdEPReq+0xb0>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	88db      	ldrh	r3, [r3, #6]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d104      	bne.n	800a7e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 f918 	bl	800ba18 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fcec 	bl	800b1c6 <USBD_CtlSendStatus>

        break;
 800a7ee:	e004      	b.n	800a7fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fc1c 	bl	800b030 <USBD_CtlError>
        break;
 800a7f8:	bf00      	nop
      }
      break;
 800a7fa:	e0e7      	b.n	800a9cc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a802:	2b02      	cmp	r3, #2
 800a804:	d002      	beq.n	800a80c <USBD_StdEPReq+0xd4>
 800a806:	2b03      	cmp	r3, #3
 800a808:	d015      	beq.n	800a836 <USBD_StdEPReq+0xfe>
 800a80a:	e02d      	b.n	800a868 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00c      	beq.n	800a82c <USBD_StdEPReq+0xf4>
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b80      	cmp	r3, #128	; 0x80
 800a816:	d009      	beq.n	800a82c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 f8fb 	bl	800ba18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a822:	2180      	movs	r1, #128	; 0x80
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f8f7 	bl	800ba18 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a82a:	e023      	b.n	800a874 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fbfe 	bl	800b030 <USBD_CtlError>
        break;
 800a834:	e01e      	b.n	800a874 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d119      	bne.n	800a872 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a83e:	7bbb      	ldrb	r3, [r7, #14]
 800a840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a844:	2b00      	cmp	r3, #0
 800a846:	d004      	beq.n	800a852 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a848:	7bbb      	ldrb	r3, [r7, #14]
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 f902 	bl	800ba56 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fcb7 	bl	800b1c6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
        }
        break;
 800a866:	e004      	b.n	800a872 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fbe0 	bl	800b030 <USBD_CtlError>
        break;
 800a870:	e000      	b.n	800a874 <USBD_StdEPReq+0x13c>
        break;
 800a872:	bf00      	nop
      }
      break;
 800a874:	e0aa      	b.n	800a9cc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d002      	beq.n	800a886 <USBD_StdEPReq+0x14e>
 800a880:	2b03      	cmp	r3, #3
 800a882:	d032      	beq.n	800a8ea <USBD_StdEPReq+0x1b2>
 800a884:	e097      	b.n	800a9b6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d007      	beq.n	800a89c <USBD_StdEPReq+0x164>
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b80      	cmp	r3, #128	; 0x80
 800a890:	d004      	beq.n	800a89c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fbcb 	bl	800b030 <USBD_CtlError>
          break;
 800a89a:	e091      	b.n	800a9c0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a89c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	da0b      	bge.n	800a8bc <USBD_StdEPReq+0x184>
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	3310      	adds	r3, #16
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	3304      	adds	r3, #4
 800a8ba:	e00b      	b.n	800a8d4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fc15 	bl	800b112 <USBD_CtlSendData>
        break;
 800a8e8:	e06a      	b.n	800a9c0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a8ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da11      	bge.n	800a916 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	f003 020f 	and.w	r2, r3, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	440b      	add	r3, r1
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d117      	bne.n	800a93c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fb8e 	bl	800b030 <USBD_CtlError>
            break;
 800a914:	e054      	b.n	800a9c0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	f003 020f 	and.w	r2, r3, #15
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	4613      	mov	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	440b      	add	r3, r1
 800a928:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fb7b 	bl	800b030 <USBD_CtlError>
            break;
 800a93a:	e041      	b.n	800a9c0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a93c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a940:	2b00      	cmp	r3, #0
 800a942:	da0b      	bge.n	800a95c <USBD_StdEPReq+0x224>
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	3310      	adds	r3, #16
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4413      	add	r3, r2
 800a958:	3304      	adds	r3, #4
 800a95a:	e00b      	b.n	800a974 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a962:	4613      	mov	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4413      	add	r3, r2
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	3304      	adds	r3, #4
 800a974:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <USBD_StdEPReq+0x24a>
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d103      	bne.n	800a98a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2200      	movs	r2, #0
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e00e      	b.n	800a9a8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a98a:	7bbb      	ldrb	r3, [r7, #14]
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 f880 	bl	800ba94 <USBD_LL_IsStallEP>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2201      	movs	r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	e002      	b.n	800a9a8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fbaf 	bl	800b112 <USBD_CtlSendData>
          break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fb39 	bl	800b030 <USBD_CtlError>
        break;
 800a9be:	bf00      	nop
      }
      break;
 800a9c0:	e004      	b.n	800a9cc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fb33 	bl	800b030 <USBD_CtlError>
      break;
 800a9ca:	bf00      	nop
    }
    break;
 800a9cc:	e004      	b.n	800a9d8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fb2d 	bl	800b030 <USBD_CtlError>
    break;
 800a9d6:	bf00      	nop
  }

  return ret;
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
	...

0800a9e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	885b      	ldrh	r3, [r3, #2]
 800a9fe:	0a1b      	lsrs	r3, r3, #8
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	2b06      	cmp	r3, #6
 800aa06:	f200 8128 	bhi.w	800ac5a <USBD_GetDescriptor+0x276>
 800aa0a:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <USBD_GetDescriptor+0x2c>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa2d 	.word	0x0800aa2d
 800aa14:	0800aa45 	.word	0x0800aa45
 800aa18:	0800aa85 	.word	0x0800aa85
 800aa1c:	0800ac5b 	.word	0x0800ac5b
 800aa20:	0800ac5b 	.word	0x0800ac5b
 800aa24:	0800abfb 	.word	0x0800abfb
 800aa28:	0800ac27 	.word	0x0800ac27
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	7c12      	ldrb	r2, [r2, #16]
 800aa38:	f107 0108 	add.w	r1, r7, #8
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	4798      	blx	r3
 800aa40:	60f8      	str	r0, [r7, #12]
    break;
 800aa42:	e112      	b.n	800ac6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7c1b      	ldrb	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10d      	bne.n	800aa68 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	4610      	mov	r0, r2
 800aa5a:	4798      	blx	r3
 800aa5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3301      	adds	r3, #1
 800aa62:	2202      	movs	r2, #2
 800aa64:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aa66:	e100      	b.n	800ac6a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa70:	f107 0208 	add.w	r2, r7, #8
 800aa74:	4610      	mov	r0, r2
 800aa76:	4798      	blx	r3
 800aa78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	2202      	movs	r2, #2
 800aa80:	701a      	strb	r2, [r3, #0]
    break;
 800aa82:	e0f2      	b.n	800ac6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	885b      	ldrh	r3, [r3, #2]
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b05      	cmp	r3, #5
 800aa8c:	f200 80ac 	bhi.w	800abe8 <USBD_GetDescriptor+0x204>
 800aa90:	a201      	add	r2, pc, #4	; (adr r2, 800aa98 <USBD_GetDescriptor+0xb4>)
 800aa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa96:	bf00      	nop
 800aa98:	0800aab1 	.word	0x0800aab1
 800aa9c:	0800aae5 	.word	0x0800aae5
 800aaa0:	0800ab19 	.word	0x0800ab19
 800aaa4:	0800ab4d 	.word	0x0800ab4d
 800aaa8:	0800ab81 	.word	0x0800ab81
 800aaac:	0800abb5 	.word	0x0800abb5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	7c12      	ldrb	r2, [r2, #16]
 800aac8:	f107 0108 	add.w	r1, r7, #8
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
 800aad0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aad2:	e091      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 faaa 	bl	800b030 <USBD_CtlError>
        err++;
 800aadc:	7afb      	ldrb	r3, [r7, #11]
 800aade:	3301      	adds	r3, #1
 800aae0:	72fb      	strb	r3, [r7, #11]
      break;
 800aae2:	e089      	b.n	800abf8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	7c12      	ldrb	r2, [r2, #16]
 800aafc:	f107 0108 	add.w	r1, r7, #8
 800ab00:	4610      	mov	r0, r2
 800ab02:	4798      	blx	r3
 800ab04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab06:	e077      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fa90 	bl	800b030 <USBD_CtlError>
        err++;
 800ab10:	7afb      	ldrb	r3, [r7, #11]
 800ab12:	3301      	adds	r3, #1
 800ab14:	72fb      	strb	r3, [r7, #11]
      break;
 800ab16:	e06f      	b.n	800abf8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	7c12      	ldrb	r2, [r2, #16]
 800ab30:	f107 0108 	add.w	r1, r7, #8
 800ab34:	4610      	mov	r0, r2
 800ab36:	4798      	blx	r3
 800ab38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab3a:	e05d      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fa76 	bl	800b030 <USBD_CtlError>
        err++;
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	3301      	adds	r3, #1
 800ab48:	72fb      	strb	r3, [r7, #11]
      break;
 800ab4a:	e055      	b.n	800abf8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00b      	beq.n	800ab70 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	7c12      	ldrb	r2, [r2, #16]
 800ab64:	f107 0108 	add.w	r1, r7, #8
 800ab68:	4610      	mov	r0, r2
 800ab6a:	4798      	blx	r3
 800ab6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab6e:	e043      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fa5c 	bl	800b030 <USBD_CtlError>
        err++;
 800ab78:	7afb      	ldrb	r3, [r7, #11]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7e:	e03b      	b.n	800abf8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	7c12      	ldrb	r2, [r2, #16]
 800ab98:	f107 0108 	add.w	r1, r7, #8
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aba2:	e029      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fa42 	bl	800b030 <USBD_CtlError>
        err++;
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	3301      	adds	r3, #1
 800abb0:	72fb      	strb	r3, [r7, #11]
      break;
 800abb2:	e021      	b.n	800abf8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00b      	beq.n	800abd8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	7c12      	ldrb	r2, [r2, #16]
 800abcc:	f107 0108 	add.w	r1, r7, #8
 800abd0:	4610      	mov	r0, r2
 800abd2:	4798      	blx	r3
 800abd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abd6:	e00f      	b.n	800abf8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa28 	bl	800b030 <USBD_CtlError>
        err++;
 800abe0:	7afb      	ldrb	r3, [r7, #11]
 800abe2:	3301      	adds	r3, #1
 800abe4:	72fb      	strb	r3, [r7, #11]
      break;
 800abe6:	e007      	b.n	800abf8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fa20 	bl	800b030 <USBD_CtlError>
      err++;
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	3301      	adds	r3, #1
 800abf4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800abf6:	bf00      	nop
    }
    break;
 800abf8:	e037      	b.n	800ac6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7c1b      	ldrb	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0a:	f107 0208 	add.w	r2, r7, #8
 800ac0e:	4610      	mov	r0, r2
 800ac10:	4798      	blx	r3
 800ac12:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac14:	e029      	b.n	800ac6a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fa09 	bl	800b030 <USBD_CtlError>
      err++;
 800ac1e:	7afb      	ldrb	r3, [r7, #11]
 800ac20:	3301      	adds	r3, #1
 800ac22:	72fb      	strb	r3, [r7, #11]
    break;
 800ac24:	e021      	b.n	800ac6a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7c1b      	ldrb	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10d      	bne.n	800ac4a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac36:	f107 0208 	add.w	r2, r7, #8
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4798      	blx	r3
 800ac3e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	2207      	movs	r2, #7
 800ac46:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ac48:	e00f      	b.n	800ac6a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f9ef 	bl	800b030 <USBD_CtlError>
      err++;
 800ac52:	7afb      	ldrb	r3, [r7, #11]
 800ac54:	3301      	adds	r3, #1
 800ac56:	72fb      	strb	r3, [r7, #11]
    break;
 800ac58:	e007      	b.n	800ac6a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f9e7 	bl	800b030 <USBD_CtlError>
    err++;
 800ac62:	7afb      	ldrb	r3, [r7, #11]
 800ac64:	3301      	adds	r3, #1
 800ac66:	72fb      	strb	r3, [r7, #11]
    break;
 800ac68:	bf00      	nop
  }

  if (err != 0U)
 800ac6a:	7afb      	ldrb	r3, [r7, #11]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d11e      	bne.n	800acae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	88db      	ldrh	r3, [r3, #6]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d016      	beq.n	800aca6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ac78:	893b      	ldrh	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00e      	beq.n	800ac9c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	88da      	ldrh	r2, [r3, #6]
 800ac82:	893b      	ldrh	r3, [r7, #8]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bf28      	it	cs
 800ac88:	4613      	movcs	r3, r2
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac8e:	893b      	ldrh	r3, [r7, #8]
 800ac90:	461a      	mov	r2, r3
 800ac92:	68f9      	ldr	r1, [r7, #12]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fa3c 	bl	800b112 <USBD_CtlSendData>
 800ac9a:	e009      	b.n	800acb0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ac9c:	6839      	ldr	r1, [r7, #0]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9c6 	bl	800b030 <USBD_CtlError>
 800aca4:	e004      	b.n	800acb0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa8d 	bl	800b1c6 <USBD_CtlSendStatus>
 800acac:	e000      	b.n	800acb0 <USBD_GetDescriptor+0x2cc>
    return;
 800acae:	bf00      	nop
    }
  }
}
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop

0800acb8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	889b      	ldrh	r3, [r3, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d130      	bne.n	800ad2c <USBD_SetAddress+0x74>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	88db      	ldrh	r3, [r3, #6]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d12c      	bne.n	800ad2c <USBD_SetAddress+0x74>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	885b      	ldrh	r3, [r3, #2]
 800acd6:	2b7f      	cmp	r3, #127	; 0x7f
 800acd8:	d828      	bhi.n	800ad2c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	885b      	ldrh	r3, [r3, #2]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acec:	2b03      	cmp	r3, #3
 800acee:	d104      	bne.n	800acfa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f99c 	bl	800b030 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf8:	e01c      	b.n	800ad34 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7bfa      	ldrb	r2, [r7, #15]
 800acfe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fef0 	bl	800baec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fa5a 	bl	800b1c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad20:	e008      	b.n	800ad34 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad2a:	e003      	b.n	800ad34 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f97e 	bl	800b030 <USBD_CtlError>
  }
}
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	4b4b      	ldr	r3, [pc, #300]	; (800ae80 <USBD_SetConfig+0x144>)
 800ad52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad54:	4b4a      	ldr	r3, [pc, #296]	; (800ae80 <USBD_SetConfig+0x144>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d905      	bls.n	800ad68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f966 	bl	800b030 <USBD_CtlError>
    return USBD_FAIL;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e087      	b.n	800ae78 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d002      	beq.n	800ad78 <USBD_SetConfig+0x3c>
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d025      	beq.n	800adc2 <USBD_SetConfig+0x86>
 800ad76:	e071      	b.n	800ae5c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ad78:	4b41      	ldr	r3, [pc, #260]	; (800ae80 <USBD_SetConfig+0x144>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01c      	beq.n	800adba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ad80:	4b3f      	ldr	r3, [pc, #252]	; (800ae80 <USBD_SetConfig+0x144>)
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad8a:	4b3d      	ldr	r3, [pc, #244]	; (800ae80 <USBD_SetConfig+0x144>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff f9a7 	bl	800a0e4 <USBD_SetClassConfig>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d004      	beq.n	800adaa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f944 	bl	800b030 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ada8:	e065      	b.n	800ae76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa0b 	bl	800b1c6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2203      	movs	r2, #3
 800adb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800adb8:	e05d      	b.n	800ae76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa03 	bl	800b1c6 <USBD_CtlSendStatus>
    break;
 800adc0:	e059      	b.n	800ae76 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800adc2:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <USBD_SetConfig+0x144>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d112      	bne.n	800adf0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2202      	movs	r2, #2
 800adce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800add2:	4b2b      	ldr	r3, [pc, #172]	; (800ae80 <USBD_SetConfig+0x144>)
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800addc:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <USBD_SetConfig+0x144>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f7ff f99a 	bl	800a11c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f9ec 	bl	800b1c6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800adee:	e042      	b.n	800ae76 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800adf0:	4b23      	ldr	r3, [pc, #140]	; (800ae80 <USBD_SetConfig+0x144>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d02a      	beq.n	800ae54 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff f988 	bl	800a11c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <USBD_SetConfig+0x144>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae16:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <USBD_SetConfig+0x144>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff f961 	bl	800a0e4 <USBD_SetClassConfig>
 800ae22:	4603      	mov	r3, r0
 800ae24:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00f      	beq.n	800ae4c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f8fe 	bl	800b030 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff f96d 	bl	800a11c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2202      	movs	r2, #2
 800ae46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ae4a:	e014      	b.n	800ae76 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9ba 	bl	800b1c6 <USBD_CtlSendStatus>
    break;
 800ae52:	e010      	b.n	800ae76 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f9b6 	bl	800b1c6 <USBD_CtlSendStatus>
    break;
 800ae5a:	e00c      	b.n	800ae76 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f8e6 	bl	800b030 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae64:	4b06      	ldr	r3, [pc, #24]	; (800ae80 <USBD_SetConfig+0x144>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff f956 	bl	800a11c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	bf00      	nop
  }

  return ret;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	200002bc 	.word	0x200002bc

0800ae84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	88db      	ldrh	r3, [r3, #6]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d004      	beq.n	800aea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f8c9 	bl	800b030 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ae9e:	e021      	b.n	800aee4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	db17      	blt.n	800aeda <USBD_GetConfig+0x56>
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	dd02      	ble.n	800aeb4 <USBD_GetConfig+0x30>
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d00b      	beq.n	800aeca <USBD_GetConfig+0x46>
 800aeb2:	e012      	b.n	800aeda <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	3308      	adds	r3, #8
 800aebe:	2201      	movs	r2, #1
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f925 	bl	800b112 <USBD_CtlSendData>
      break;
 800aec8:	e00c      	b.n	800aee4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3304      	adds	r3, #4
 800aece:	2201      	movs	r2, #1
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f91d 	bl	800b112 <USBD_CtlSendData>
      break;
 800aed8:	e004      	b.n	800aee4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f8a7 	bl	800b030 <USBD_CtlError>
      break;
 800aee2:	bf00      	nop
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefc:	3b01      	subs	r3, #1
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d81e      	bhi.n	800af40 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	88db      	ldrh	r3, [r3, #6]
 800af06:	2b02      	cmp	r3, #2
 800af08:	d004      	beq.n	800af14 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f88f 	bl	800b030 <USBD_CtlError>
      break;
 800af12:	e01a      	b.n	800af4a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d005      	beq.n	800af30 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f043 0202 	orr.w	r2, r3, #2
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	330c      	adds	r3, #12
 800af34:	2202      	movs	r2, #2
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f8ea 	bl	800b112 <USBD_CtlSendData>
    break;
 800af3e:	e004      	b.n	800af4a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f874 	bl	800b030 <USBD_CtlError>
    break;
 800af48:	bf00      	nop
  }
}
 800af4a:	bf00      	nop
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	885b      	ldrh	r3, [r3, #2]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d106      	bne.n	800af72 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2201      	movs	r2, #1
 800af68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f92a 	bl	800b1c6 <USBD_CtlSendStatus>
  }
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8a:	3b01      	subs	r3, #1
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d80b      	bhi.n	800afa8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	885b      	ldrh	r3, [r3, #2]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d10c      	bne.n	800afb2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f910 	bl	800b1c6 <USBD_CtlSendStatus>
      }
      break;
 800afa6:	e004      	b.n	800afb2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f840 	bl	800b030 <USBD_CtlError>
      break;
 800afb0:	e000      	b.n	800afb4 <USBD_ClrFeature+0x3a>
      break;
 800afb2:	bf00      	nop
  }
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	781a      	ldrb	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3301      	adds	r3, #1
 800afd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	781a      	ldrb	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7ff fad3 	bl	800a592 <SWAPBYTE>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3301      	adds	r3, #1
 800affe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fac6 	bl	800a592 <SWAPBYTE>
 800b006:	4603      	mov	r3, r0
 800b008:	461a      	mov	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3301      	adds	r3, #1
 800b018:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7ff fab9 	bl	800a592 <SWAPBYTE>
 800b020:	4603      	mov	r3, r0
 800b022:	461a      	mov	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	80da      	strh	r2, [r3, #6]
}
 800b028:	bf00      	nop
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b03a:	2180      	movs	r1, #128	; 0x80
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fceb 	bl	800ba18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fce7 	bl	800ba18 <USBD_LL_StallEP>
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b05e:	2300      	movs	r3, #0
 800b060:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d036      	beq.n	800b0d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b06c:	6938      	ldr	r0, [r7, #16]
 800b06e:	f000 f836 	bl	800b0de <USBD_GetLen>
 800b072:	4603      	mov	r3, r0
 800b074:	3301      	adds	r3, #1
 800b076:	b29b      	uxth	r3, r3
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b080:	7dfb      	ldrb	r3, [r7, #23]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	4413      	add	r3, r2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	7812      	ldrb	r2, [r2, #0]
 800b08a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	3301      	adds	r3, #1
 800b090:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	4413      	add	r3, r2
 800b098:	2203      	movs	r2, #3
 800b09a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0a2:	e013      	b.n	800b0cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	7812      	ldrb	r2, [r2, #0]
 800b0ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	613b      	str	r3, [r7, #16]
    idx++;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e7      	bne.n	800b0a4 <USBD_GetString+0x52>
 800b0d4:	e000      	b.n	800b0d8 <USBD_GetString+0x86>
    return;
 800b0d6:	bf00      	nop
  }
}
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b0ee:	e005      	b.n	800b0fc <USBD_GetLen+0x1e>
  {
    len++;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1f5      	bne.n	800b0f0 <USBD_GetLen+0x12>
  }

  return len;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2202      	movs	r2, #2
 800b122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	2100      	movs	r1, #0
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fcf6 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b13e:	2300      	movs	r3, #0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	2100      	movs	r1, #0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f000 fce5 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	60f8      	str	r0, [r7, #12]
 800b172:	60b9      	str	r1, [r7, #8]
 800b174:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2203      	movs	r2, #3
 800b17a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	2100      	movs	r1, #0
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 fce9 	bl	800bb6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fcd8 	bl	800bb6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b082      	sub	sp, #8
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fca4 	bl	800bb2a <USBD_LL_Transmit>

  return USBD_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2205      	movs	r2, #5
 800b1f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	2100      	movs	r1, #0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fcb2 	bl	800bb6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b218:	2200      	movs	r2, #0
 800b21a:	4912      	ldr	r1, [pc, #72]	; (800b264 <MX_USB_DEVICE_Init+0x50>)
 800b21c:	4812      	ldr	r0, [pc, #72]	; (800b268 <MX_USB_DEVICE_Init+0x54>)
 800b21e:	f7fe fef3 	bl	800a008 <USBD_Init>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b228:	f7f6 faa6 	bl	8001778 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b22c:	490f      	ldr	r1, [pc, #60]	; (800b26c <MX_USB_DEVICE_Init+0x58>)
 800b22e:	480e      	ldr	r0, [pc, #56]	; (800b268 <MX_USB_DEVICE_Init+0x54>)
 800b230:	f7fe ff20 	bl	800a074 <USBD_RegisterClass>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b23a:	f7f6 fa9d 	bl	8001778 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b23e:	490c      	ldr	r1, [pc, #48]	; (800b270 <MX_USB_DEVICE_Init+0x5c>)
 800b240:	4809      	ldr	r0, [pc, #36]	; (800b268 <MX_USB_DEVICE_Init+0x54>)
 800b242:	f7fe fe45 	bl	8009ed0 <USBD_CDC_RegisterInterface>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b24c:	f7f6 fa94 	bl	8001778 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b250:	4805      	ldr	r0, [pc, #20]	; (800b268 <MX_USB_DEVICE_Init+0x54>)
 800b252:	f7fe ff30 	bl	800a0b6 <USBD_Start>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b25c:	f7f6 fa8c 	bl	8001778 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b260:	bf00      	nop
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200001c0 	.word	0x200001c0
 800b268:	200004d8 	.word	0x200004d8
 800b26c:	200000a8 	.word	0x200000a8
 800b270:	200001ac 	.word	0x200001ac

0800b274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b278:	2200      	movs	r2, #0
 800b27a:	4905      	ldr	r1, [pc, #20]	; (800b290 <CDC_Init_FS+0x1c>)
 800b27c:	4805      	ldr	r0, [pc, #20]	; (800b294 <CDC_Init_FS+0x20>)
 800b27e:	f7fe fe3c 	bl	8009efa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b282:	4905      	ldr	r1, [pc, #20]	; (800b298 <CDC_Init_FS+0x24>)
 800b284:	4803      	ldr	r0, [pc, #12]	; (800b294 <CDC_Init_FS+0x20>)
 800b286:	f7fe fe51 	bl	8009f2c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b28a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000fa8 	.word	0x20000fa8
 800b294:	200004d8 	.word	0x200004d8
 800b298:	200007a8 	.word	0x200007a8

0800b29c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b083      	sub	sp, #12
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	6039      	str	r1, [r7, #0]
 800b2b6:	71fb      	strb	r3, [r7, #7]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	2b23      	cmp	r3, #35	; 0x23
 800b2c0:	d84a      	bhi.n	800b358 <CDC_Control_FS+0xac>
 800b2c2:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <CDC_Control_FS+0x1c>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b359 	.word	0x0800b359
 800b2cc:	0800b359 	.word	0x0800b359
 800b2d0:	0800b359 	.word	0x0800b359
 800b2d4:	0800b359 	.word	0x0800b359
 800b2d8:	0800b359 	.word	0x0800b359
 800b2dc:	0800b359 	.word	0x0800b359
 800b2e0:	0800b359 	.word	0x0800b359
 800b2e4:	0800b359 	.word	0x0800b359
 800b2e8:	0800b359 	.word	0x0800b359
 800b2ec:	0800b359 	.word	0x0800b359
 800b2f0:	0800b359 	.word	0x0800b359
 800b2f4:	0800b359 	.word	0x0800b359
 800b2f8:	0800b359 	.word	0x0800b359
 800b2fc:	0800b359 	.word	0x0800b359
 800b300:	0800b359 	.word	0x0800b359
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b359 	.word	0x0800b359
 800b30c:	0800b359 	.word	0x0800b359
 800b310:	0800b359 	.word	0x0800b359
 800b314:	0800b359 	.word	0x0800b359
 800b318:	0800b359 	.word	0x0800b359
 800b31c:	0800b359 	.word	0x0800b359
 800b320:	0800b359 	.word	0x0800b359
 800b324:	0800b359 	.word	0x0800b359
 800b328:	0800b359 	.word	0x0800b359
 800b32c:	0800b359 	.word	0x0800b359
 800b330:	0800b359 	.word	0x0800b359
 800b334:	0800b359 	.word	0x0800b359
 800b338:	0800b359 	.word	0x0800b359
 800b33c:	0800b359 	.word	0x0800b359
 800b340:	0800b359 	.word	0x0800b359
 800b344:	0800b359 	.word	0x0800b359
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b359 	.word	0x0800b359
 800b350:	0800b359 	.word	0x0800b359
 800b354:	0800b359 	.word	0x0800b359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b358:	bf00      	nop
  }

  return (USBD_OK);
 800b35a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	480f      	ldr	r0, [pc, #60]	; (800b3b4 <CDC_Receive_FS+0x4c>)
 800b376:	f7fe fdd9 	bl	8009f2c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b37a:	480e      	ldr	r0, [pc, #56]	; (800b3b4 <CDC_Receive_FS+0x4c>)
 800b37c:	f7fe fe1a 	bl	8009fb4 <USBD_CDC_ReceivePacket>
  memset(DataToRead, '\0', 64);
 800b380:	2240      	movs	r2, #64	; 0x40
 800b382:	2100      	movs	r1, #0
 800b384:	480c      	ldr	r0, [pc, #48]	; (800b3b8 <CDC_Receive_FS+0x50>)
 800b386:	f000 fc96 	bl	800bcb6 <memset>
  uint8_t len = (uint8_t) *Len;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	73fb      	strb	r3, [r7, #15]
  memcpy(DataToRead, Buf, len);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	461a      	mov	r2, r3
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4808      	ldr	r0, [pc, #32]	; (800b3b8 <CDC_Receive_FS+0x50>)
 800b398:	f000 fc82 	bl	800bca0 <memcpy>
  memset(Buf, '\0', len);
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fc87 	bl	800bcb6 <memset>

  return (USBD_OK);
 800b3a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	200004d8 	.word	0x200004d8
 800b3b8:	20000450 	.word	0x20000450

0800b3bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b3cc:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e00b      	b.n	800b3fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	4806      	ldr	r0, [pc, #24]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3ea:	f7fe fd86 	bl	8009efa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b3ee:	4805      	ldr	r0, [pc, #20]	; (800b404 <CDC_Transmit_FS+0x48>)
 800b3f0:	f7fe fdb0 	bl	8009f54 <USBD_CDC_TransmitPacket>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200004d8 	.word	0x200004d8

0800b408 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b41a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
	...

0800b42c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	6039      	str	r1, [r7, #0]
 800b436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	2212      	movs	r2, #18
 800b43c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	200001dc 	.word	0x200001dc

0800b450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2204      	movs	r2, #4
 800b460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	200001f0 	.word	0x200001f0

0800b474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	6039      	str	r1, [r7, #0]
 800b47e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b480:	79fb      	ldrb	r3, [r7, #7]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	4907      	ldr	r1, [pc, #28]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b48a:	4808      	ldr	r0, [pc, #32]	; (800b4ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b48c:	f7ff fde1 	bl	800b052 <USBD_GetString>
 800b490:	e004      	b.n	800b49c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	4904      	ldr	r1, [pc, #16]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b496:	4805      	ldr	r0, [pc, #20]	; (800b4ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b498:	f7ff fddb 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200017a8 	.word	0x200017a8
 800b4ac:	0800cc64 	.word	0x0800cc64

0800b4b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6039      	str	r1, [r7, #0]
 800b4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4bc:	683a      	ldr	r2, [r7, #0]
 800b4be:	4904      	ldr	r1, [pc, #16]	; (800b4d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b4c0:	4804      	ldr	r0, [pc, #16]	; (800b4d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b4c2:	f7ff fdc6 	bl	800b052 <USBD_GetString>
  return USBD_StrDesc;
 800b4c6:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	200017a8 	.word	0x200017a8
 800b4d4:	0800cc78 	.word	0x0800cc78

0800b4d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	221a      	movs	r2, #26
 800b4e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4ea:	f000 f843 	bl	800b574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ee:	4b02      	ldr	r3, [pc, #8]	; (800b4f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	200001f4 	.word	0x200001f4

0800b4fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	6039      	str	r1, [r7, #0]
 800b506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d105      	bne.n	800b51a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	4907      	ldr	r1, [pc, #28]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b512:	4808      	ldr	r0, [pc, #32]	; (800b534 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b514:	f7ff fd9d 	bl	800b052 <USBD_GetString>
 800b518:	e004      	b.n	800b524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	4904      	ldr	r1, [pc, #16]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b51e:	4805      	ldr	r0, [pc, #20]	; (800b534 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b520:	f7ff fd97 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b524:	4b02      	ldr	r3, [pc, #8]	; (800b530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	200017a8 	.word	0x200017a8
 800b534:	0800cc8c 	.word	0x0800cc8c

0800b538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	6039      	str	r1, [r7, #0]
 800b542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4907      	ldr	r1, [pc, #28]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b54e:	4808      	ldr	r0, [pc, #32]	; (800b570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b550:	f7ff fd7f 	bl	800b052 <USBD_GetString>
 800b554:	e004      	b.n	800b560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	4904      	ldr	r1, [pc, #16]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b55a:	4805      	ldr	r0, [pc, #20]	; (800b570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b55c:	f7ff fd79 	bl	800b052 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b560:	4b02      	ldr	r3, [pc, #8]	; (800b56c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200017a8 	.word	0x200017a8
 800b570:	0800cc98 	.word	0x0800cc98

0800b574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <Get_SerialNum+0x44>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b580:	4b0e      	ldr	r3, [pc, #56]	; (800b5bc <Get_SerialNum+0x48>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b586:	4b0e      	ldr	r3, [pc, #56]	; (800b5c0 <Get_SerialNum+0x4c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4413      	add	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b59a:	2208      	movs	r2, #8
 800b59c:	4909      	ldr	r1, [pc, #36]	; (800b5c4 <Get_SerialNum+0x50>)
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 f814 	bl	800b5cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5a4:	2204      	movs	r2, #4
 800b5a6:	4908      	ldr	r1, [pc, #32]	; (800b5c8 <Get_SerialNum+0x54>)
 800b5a8:	68b8      	ldr	r0, [r7, #8]
 800b5aa:	f000 f80f 	bl	800b5cc <IntToUnicode>
  }
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	1fff7a10 	.word	0x1fff7a10
 800b5bc:	1fff7a14 	.word	0x1fff7a14
 800b5c0:	1fff7a18 	.word	0x1fff7a18
 800b5c4:	200001f6 	.word	0x200001f6
 800b5c8:	20000206 	.word	0x20000206

0800b5cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5de:	2300      	movs	r3, #0
 800b5e0:	75fb      	strb	r3, [r7, #23]
 800b5e2:	e027      	b.n	800b634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	0f1b      	lsrs	r3, r3, #28
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d80b      	bhi.n	800b604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	0f1b      	lsrs	r3, r3, #28
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	440b      	add	r3, r1
 800b5fc:	3230      	adds	r2, #48	; 0x30
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	e00a      	b.n	800b61a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	3237      	adds	r2, #55	; 0x37
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	011b      	lsls	r3, r3, #4
 800b61e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	3301      	adds	r3, #1
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	4413      	add	r3, r2
 800b62a:	2200      	movs	r2, #0
 800b62c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	3301      	adds	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
 800b634:	7dfa      	ldrb	r2, [r7, #23]
 800b636:	79fb      	ldrb	r3, [r7, #7]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d3d3      	bcc.n	800b5e4 <IntToUnicode+0x18>
  }
}
 800b63c:	bf00      	nop
 800b63e:	371c      	adds	r7, #28
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b650:	f107 0314 	add.w	r3, r7, #20
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b668:	d13a      	bne.n	800b6e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b66a:	2300      	movs	r3, #0
 800b66c:	613b      	str	r3, [r7, #16]
 800b66e:	4b1e      	ldr	r3, [pc, #120]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	4a1d      	ldr	r2, [pc, #116]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b674:	f043 0301 	orr.w	r3, r3, #1
 800b678:	6313      	str	r3, [r2, #48]	; 0x30
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b68a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b68c:	2302      	movs	r3, #2
 800b68e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b694:	2303      	movs	r3, #3
 800b696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b698:	230a      	movs	r3, #10
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b69c:	f107 0314 	add.w	r3, r7, #20
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	4812      	ldr	r0, [pc, #72]	; (800b6ec <HAL_PCD_MspInit+0xa4>)
 800b6a4:	f7f7 ff7a 	bl	800359c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ac:	4a0e      	ldr	r2, [pc, #56]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b2:	6353      	str	r3, [r2, #52]	; 0x34
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	4b0b      	ldr	r3, [pc, #44]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6bc:	4a0a      	ldr	r2, [pc, #40]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6c2:	6453      	str	r3, [r2, #68]	; 0x44
 800b6c4:	4b08      	ldr	r3, [pc, #32]	; (800b6e8 <HAL_PCD_MspInit+0xa0>)
 800b6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6cc:	60fb      	str	r3, [r7, #12]
 800b6ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	2043      	movs	r0, #67	; 0x43
 800b6d6:	f7f7 fb46 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6da:	2043      	movs	r0, #67	; 0x43
 800b6dc:	f7f7 fb5f 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6e0:	bf00      	nop
 800b6e2:	3728      	adds	r7, #40	; 0x28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	40023800 	.word	0x40023800
 800b6ec:	40020000 	.word	0x40020000

0800b6f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe fd20 	bl	800a14c <USBD_LL_SetupStage>
}
 800b70c:	bf00      	nop
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	4613      	mov	r3, r2
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	1a9b      	subs	r3, r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	78fb      	ldrb	r3, [r7, #3]
 800b73c:	4619      	mov	r1, r3
 800b73e:	f7fe fd58 	bl	800a1f2 <USBD_LL_DataOutStage>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b082      	sub	sp, #8
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b75c:	78fa      	ldrb	r2, [r7, #3]
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	4613      	mov	r3, r2
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	3348      	adds	r3, #72	; 0x48
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	78fb      	ldrb	r3, [r7, #3]
 800b770:	4619      	mov	r1, r3
 800b772:	f7fe fda1 	bl	800a2b8 <USBD_LL_DataInStage>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b082      	sub	sp, #8
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fea5 	bl	800a4dc <USBD_LL_SOF>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d001      	beq.n	800b7b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b7ae:	f7f5 ffe3 	bl	8001778 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7b8:	7bfa      	ldrb	r2, [r7, #15]
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fe fe52 	bl	800a466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe fe0b 	bl	800a3e4 <USBD_LL_Reset>
}
 800b7ce:	bf00      	nop
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fe4d 	bl	800a486 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d005      	beq.n	800b818 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b80c:	4b04      	ldr	r3, [pc, #16]	; (800b820 <HAL_PCD_SuspendCallback+0x48>)
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	4a03      	ldr	r2, [pc, #12]	; (800b820 <HAL_PCD_SuspendCallback+0x48>)
 800b812:	f043 0306 	orr.w	r3, r3, #6
 800b816:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	e000ed00 	.word	0xe000ed00

0800b824 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fe3c 	bl	800a4b0 <USBD_LL_Resume>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	460b      	mov	r3, r1
 800b84a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b852:	78fa      	ldrb	r2, [r7, #3]
 800b854:	4611      	mov	r1, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fe67 	bl	800a52a <USBD_LL_IsoOUTIncomplete>
}
 800b85c:	bf00      	nop
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fe48 	bl	800a510 <USBD_LL_IsoINIncomplete>
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fe54 	bl	800a544 <USBD_LL_DevConnected>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fe51 	bl	800a55a <USBD_LL_DevDisconnected>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d13c      	bne.n	800b94a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8d0:	4a20      	ldr	r2, [pc, #128]	; (800b954 <USBD_LL_Init+0x94>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a1e      	ldr	r2, [pc, #120]	; (800b954 <USBD_LL_Init+0x94>)
 800b8dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8e0:	4b1c      	ldr	r3, [pc, #112]	; (800b954 <USBD_LL_Init+0x94>)
 800b8e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8e8:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <USBD_LL_Init+0x94>)
 800b8ea:	2204      	movs	r2, #4
 800b8ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8ee:	4b19      	ldr	r3, [pc, #100]	; (800b954 <USBD_LL_Init+0x94>)
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8f4:	4b17      	ldr	r3, [pc, #92]	; (800b954 <USBD_LL_Init+0x94>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8fa:	4b16      	ldr	r3, [pc, #88]	; (800b954 <USBD_LL_Init+0x94>)
 800b8fc:	2202      	movs	r2, #2
 800b8fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b900:	4b14      	ldr	r3, [pc, #80]	; (800b954 <USBD_LL_Init+0x94>)
 800b902:	2200      	movs	r2, #0
 800b904:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b906:	4b13      	ldr	r3, [pc, #76]	; (800b954 <USBD_LL_Init+0x94>)
 800b908:	2200      	movs	r2, #0
 800b90a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b90c:	4b11      	ldr	r3, [pc, #68]	; (800b954 <USBD_LL_Init+0x94>)
 800b90e:	2200      	movs	r2, #0
 800b910:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b912:	4b10      	ldr	r3, [pc, #64]	; (800b954 <USBD_LL_Init+0x94>)
 800b914:	2200      	movs	r2, #0
 800b916:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b918:	4b0e      	ldr	r3, [pc, #56]	; (800b954 <USBD_LL_Init+0x94>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b91e:	480d      	ldr	r0, [pc, #52]	; (800b954 <USBD_LL_Init+0x94>)
 800b920:	f7fa fc58 	bl	80061d4 <HAL_PCD_Init>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b92a:	f7f5 ff25 	bl	8001778 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b92e:	2180      	movs	r1, #128	; 0x80
 800b930:	4808      	ldr	r0, [pc, #32]	; (800b954 <USBD_LL_Init+0x94>)
 800b932:	f7fb fdb6 	bl	80074a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b936:	2240      	movs	r2, #64	; 0x40
 800b938:	2100      	movs	r1, #0
 800b93a:	4806      	ldr	r0, [pc, #24]	; (800b954 <USBD_LL_Init+0x94>)
 800b93c:	f7fb fd6a 	bl	8007414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b940:	2280      	movs	r2, #128	; 0x80
 800b942:	2101      	movs	r1, #1
 800b944:	4803      	ldr	r0, [pc, #12]	; (800b954 <USBD_LL_Init+0x94>)
 800b946:	f7fb fd65 	bl	8007414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	200019a8 	.word	0x200019a8

0800b958 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fa fd4d 	bl	800640e <HAL_PCD_Start>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b978:	7bfb      	ldrb	r3, [r7, #15]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 f92a 	bl	800bbd4 <USBD_Get_USB_Status>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b984:	7bbb      	ldrb	r3, [r7, #14]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	4608      	mov	r0, r1
 800b998:	4611      	mov	r1, r2
 800b99a:	461a      	mov	r2, r3
 800b99c:	4603      	mov	r3, r0
 800b99e:	70fb      	strb	r3, [r7, #3]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	70bb      	strb	r3, [r7, #2]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9b6:	78bb      	ldrb	r3, [r7, #2]
 800b9b8:	883a      	ldrh	r2, [r7, #0]
 800b9ba:	78f9      	ldrb	r1, [r7, #3]
 800b9bc:	f7fb f931 	bl	8006c22 <HAL_PCD_EP_Open>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 f904 	bl	800bbd4 <USBD_Get_USB_Status>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fb f97a 	bl	8006cf2 <HAL_PCD_EP_Close>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 f8e5 	bl	800bbd4 <USBD_Get_USB_Status>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba32:	78fa      	ldrb	r2, [r7, #3]
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fb fa52 	bl	8006ee0 <HAL_PCD_EP_SetStall>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba40:	7bfb      	ldrb	r3, [r7, #15]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f000 f8c6 	bl	800bbd4 <USBD_Get_USB_Status>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba70:	78fa      	ldrb	r2, [r7, #3]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fb fa97 	bl	8006fa8 <HAL_PCD_EP_ClrStall>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 f8a7 	bl	800bbd4 <USBD_Get_USB_Status>
 800ba86:	4603      	mov	r3, r0
 800ba88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800baa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800baa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da0b      	bge.n	800bac8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	4613      	mov	r3, r2
 800baba:	00db      	lsls	r3, r3, #3
 800babc:	1a9b      	subs	r3, r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	333e      	adds	r3, #62	; 0x3e
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	e00b      	b.n	800bae0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bac8:	78fb      	ldrb	r3, [r7, #3]
 800baca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	4613      	mov	r3, r2
 800bad2:	00db      	lsls	r3, r3, #3
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	440b      	add	r3, r1
 800bada:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bade:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fb f864 	bl	8006bd8 <HAL_PCD_SetAddress>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f85c 	bl	800bbd4 <USBD_Get_USB_Status>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b086      	sub	sp, #24
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
 800bb36:	460b      	mov	r3, r1
 800bb38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb48:	7af9      	ldrb	r1, [r7, #11]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	f7fb f97d 	bl	8006e4c <HAL_PCD_EP_Transmit>
 800bb52:	4603      	mov	r3, r0
 800bb54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 f83b 	bl	800bbd4 <USBD_Get_USB_Status>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb62:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3718      	adds	r7, #24
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	607a      	str	r2, [r7, #4]
 800bb76:	603b      	str	r3, [r7, #0]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb8a:	7af9      	ldrb	r1, [r7, #11]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	f7fb f8f9 	bl	8006d86 <HAL_PCD_EP_Receive>
 800bb94:	4603      	mov	r3, r0
 800bb96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f81a 	bl	800bbd4 <USBD_Get_USB_Status>
 800bba0:	4603      	mov	r3, r0
 800bba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bba4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3718      	adds	r7, #24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbc0:	78fa      	ldrb	r2, [r7, #3]
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7fb f929 	bl	8006e1c <HAL_PCD_EP_GetRxCount>
 800bbca:	4603      	mov	r3, r0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d817      	bhi.n	800bc18 <USBD_Get_USB_Status+0x44>
 800bbe8:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <USBD_Get_USB_Status+0x1c>)
 800bbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbee:	bf00      	nop
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc07 	.word	0x0800bc07
 800bbf8:	0800bc0d 	.word	0x0800bc0d
 800bbfc:	0800bc13 	.word	0x0800bc13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	e00b      	b.n	800bc1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc06:	2303      	movs	r3, #3
 800bc08:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0a:	e008      	b.n	800bc1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc10:	e005      	b.n	800bc1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc12:	2303      	movs	r3, #3
 800bc14:	73fb      	strb	r3, [r7, #15]
    break;
 800bc16:	e002      	b.n	800bc1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1c:	bf00      	nop
  }
  return usb_status;
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3714      	adds	r7, #20
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <__errno>:
 800bc2c:	4b01      	ldr	r3, [pc, #4]	; (800bc34 <__errno+0x8>)
 800bc2e:	6818      	ldr	r0, [r3, #0]
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000210 	.word	0x20000210

0800bc38 <__libc_init_array>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	4e0d      	ldr	r6, [pc, #52]	; (800bc70 <__libc_init_array+0x38>)
 800bc3c:	4c0d      	ldr	r4, [pc, #52]	; (800bc74 <__libc_init_array+0x3c>)
 800bc3e:	1ba4      	subs	r4, r4, r6
 800bc40:	10a4      	asrs	r4, r4, #2
 800bc42:	2500      	movs	r5, #0
 800bc44:	42a5      	cmp	r5, r4
 800bc46:	d109      	bne.n	800bc5c <__libc_init_array+0x24>
 800bc48:	4e0b      	ldr	r6, [pc, #44]	; (800bc78 <__libc_init_array+0x40>)
 800bc4a:	4c0c      	ldr	r4, [pc, #48]	; (800bc7c <__libc_init_array+0x44>)
 800bc4c:	f000 ffd0 	bl	800cbf0 <_init>
 800bc50:	1ba4      	subs	r4, r4, r6
 800bc52:	10a4      	asrs	r4, r4, #2
 800bc54:	2500      	movs	r5, #0
 800bc56:	42a5      	cmp	r5, r4
 800bc58:	d105      	bne.n	800bc66 <__libc_init_array+0x2e>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc60:	4798      	blx	r3
 800bc62:	3501      	adds	r5, #1
 800bc64:	e7ee      	b.n	800bc44 <__libc_init_array+0xc>
 800bc66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bc6a:	4798      	blx	r3
 800bc6c:	3501      	adds	r5, #1
 800bc6e:	e7f2      	b.n	800bc56 <__libc_init_array+0x1e>
 800bc70:	0800cd50 	.word	0x0800cd50
 800bc74:	0800cd50 	.word	0x0800cd50
 800bc78:	0800cd50 	.word	0x0800cd50
 800bc7c:	0800cd54 	.word	0x0800cd54

0800bc80 <malloc>:
 800bc80:	4b02      	ldr	r3, [pc, #8]	; (800bc8c <malloc+0xc>)
 800bc82:	4601      	mov	r1, r0
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	f000 b86d 	b.w	800bd64 <_malloc_r>
 800bc8a:	bf00      	nop
 800bc8c:	20000210 	.word	0x20000210

0800bc90 <free>:
 800bc90:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <free+0xc>)
 800bc92:	4601      	mov	r1, r0
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	f000 b817 	b.w	800bcc8 <_free_r>
 800bc9a:	bf00      	nop
 800bc9c:	20000210 	.word	0x20000210

0800bca0 <memcpy>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	1e43      	subs	r3, r0, #1
 800bca4:	440a      	add	r2, r1
 800bca6:	4291      	cmp	r1, r2
 800bca8:	d100      	bne.n	800bcac <memcpy+0xc>
 800bcaa:	bd10      	pop	{r4, pc}
 800bcac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	e7f7      	b.n	800bca6 <memcpy+0x6>

0800bcb6 <memset>:
 800bcb6:	4402      	add	r2, r0
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d100      	bne.n	800bcc0 <memset+0xa>
 800bcbe:	4770      	bx	lr
 800bcc0:	f803 1b01 	strb.w	r1, [r3], #1
 800bcc4:	e7f9      	b.n	800bcba <memset+0x4>
	...

0800bcc8 <_free_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4605      	mov	r5, r0
 800bccc:	2900      	cmp	r1, #0
 800bcce:	d045      	beq.n	800bd5c <_free_r+0x94>
 800bcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcd4:	1f0c      	subs	r4, r1, #4
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	bfb8      	it	lt
 800bcda:	18e4      	addlt	r4, r4, r3
 800bcdc:	f000 f8cc 	bl	800be78 <__malloc_lock>
 800bce0:	4a1f      	ldr	r2, [pc, #124]	; (800bd60 <_free_r+0x98>)
 800bce2:	6813      	ldr	r3, [r2, #0]
 800bce4:	4610      	mov	r0, r2
 800bce6:	b933      	cbnz	r3, 800bcf6 <_free_r+0x2e>
 800bce8:	6063      	str	r3, [r4, #4]
 800bcea:	6014      	str	r4, [r2, #0]
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf2:	f000 b8c2 	b.w	800be7a <__malloc_unlock>
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	d90c      	bls.n	800bd14 <_free_r+0x4c>
 800bcfa:	6821      	ldr	r1, [r4, #0]
 800bcfc:	1862      	adds	r2, r4, r1
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bf04      	itt	eq
 800bd02:	681a      	ldreq	r2, [r3, #0]
 800bd04:	685b      	ldreq	r3, [r3, #4]
 800bd06:	6063      	str	r3, [r4, #4]
 800bd08:	bf04      	itt	eq
 800bd0a:	1852      	addeq	r2, r2, r1
 800bd0c:	6022      	streq	r2, [r4, #0]
 800bd0e:	6004      	str	r4, [r0, #0]
 800bd10:	e7ec      	b.n	800bcec <_free_r+0x24>
 800bd12:	4613      	mov	r3, r2
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	b10a      	cbz	r2, 800bd1c <_free_r+0x54>
 800bd18:	42a2      	cmp	r2, r4
 800bd1a:	d9fa      	bls.n	800bd12 <_free_r+0x4a>
 800bd1c:	6819      	ldr	r1, [r3, #0]
 800bd1e:	1858      	adds	r0, r3, r1
 800bd20:	42a0      	cmp	r0, r4
 800bd22:	d10b      	bne.n	800bd3c <_free_r+0x74>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	4401      	add	r1, r0
 800bd28:	1858      	adds	r0, r3, r1
 800bd2a:	4282      	cmp	r2, r0
 800bd2c:	6019      	str	r1, [r3, #0]
 800bd2e:	d1dd      	bne.n	800bcec <_free_r+0x24>
 800bd30:	6810      	ldr	r0, [r2, #0]
 800bd32:	6852      	ldr	r2, [r2, #4]
 800bd34:	605a      	str	r2, [r3, #4]
 800bd36:	4401      	add	r1, r0
 800bd38:	6019      	str	r1, [r3, #0]
 800bd3a:	e7d7      	b.n	800bcec <_free_r+0x24>
 800bd3c:	d902      	bls.n	800bd44 <_free_r+0x7c>
 800bd3e:	230c      	movs	r3, #12
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	e7d3      	b.n	800bcec <_free_r+0x24>
 800bd44:	6820      	ldr	r0, [r4, #0]
 800bd46:	1821      	adds	r1, r4, r0
 800bd48:	428a      	cmp	r2, r1
 800bd4a:	bf04      	itt	eq
 800bd4c:	6811      	ldreq	r1, [r2, #0]
 800bd4e:	6852      	ldreq	r2, [r2, #4]
 800bd50:	6062      	str	r2, [r4, #4]
 800bd52:	bf04      	itt	eq
 800bd54:	1809      	addeq	r1, r1, r0
 800bd56:	6021      	streq	r1, [r4, #0]
 800bd58:	605c      	str	r4, [r3, #4]
 800bd5a:	e7c7      	b.n	800bcec <_free_r+0x24>
 800bd5c:	bd38      	pop	{r3, r4, r5, pc}
 800bd5e:	bf00      	nop
 800bd60:	200002c0 	.word	0x200002c0

0800bd64 <_malloc_r>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	1ccd      	adds	r5, r1, #3
 800bd68:	f025 0503 	bic.w	r5, r5, #3
 800bd6c:	3508      	adds	r5, #8
 800bd6e:	2d0c      	cmp	r5, #12
 800bd70:	bf38      	it	cc
 800bd72:	250c      	movcc	r5, #12
 800bd74:	2d00      	cmp	r5, #0
 800bd76:	4606      	mov	r6, r0
 800bd78:	db01      	blt.n	800bd7e <_malloc_r+0x1a>
 800bd7a:	42a9      	cmp	r1, r5
 800bd7c:	d903      	bls.n	800bd86 <_malloc_r+0x22>
 800bd7e:	230c      	movs	r3, #12
 800bd80:	6033      	str	r3, [r6, #0]
 800bd82:	2000      	movs	r0, #0
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	f000 f877 	bl	800be78 <__malloc_lock>
 800bd8a:	4a21      	ldr	r2, [pc, #132]	; (800be10 <_malloc_r+0xac>)
 800bd8c:	6814      	ldr	r4, [r2, #0]
 800bd8e:	4621      	mov	r1, r4
 800bd90:	b991      	cbnz	r1, 800bdb8 <_malloc_r+0x54>
 800bd92:	4c20      	ldr	r4, [pc, #128]	; (800be14 <_malloc_r+0xb0>)
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	b91b      	cbnz	r3, 800bda0 <_malloc_r+0x3c>
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f000 f83d 	bl	800be18 <_sbrk_r>
 800bd9e:	6020      	str	r0, [r4, #0]
 800bda0:	4629      	mov	r1, r5
 800bda2:	4630      	mov	r0, r6
 800bda4:	f000 f838 	bl	800be18 <_sbrk_r>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d124      	bne.n	800bdf6 <_malloc_r+0x92>
 800bdac:	230c      	movs	r3, #12
 800bdae:	6033      	str	r3, [r6, #0]
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 f862 	bl	800be7a <__malloc_unlock>
 800bdb6:	e7e4      	b.n	800bd82 <_malloc_r+0x1e>
 800bdb8:	680b      	ldr	r3, [r1, #0]
 800bdba:	1b5b      	subs	r3, r3, r5
 800bdbc:	d418      	bmi.n	800bdf0 <_malloc_r+0x8c>
 800bdbe:	2b0b      	cmp	r3, #11
 800bdc0:	d90f      	bls.n	800bde2 <_malloc_r+0x7e>
 800bdc2:	600b      	str	r3, [r1, #0]
 800bdc4:	50cd      	str	r5, [r1, r3]
 800bdc6:	18cc      	adds	r4, r1, r3
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f856 	bl	800be7a <__malloc_unlock>
 800bdce:	f104 000b 	add.w	r0, r4, #11
 800bdd2:	1d23      	adds	r3, r4, #4
 800bdd4:	f020 0007 	bic.w	r0, r0, #7
 800bdd8:	1ac3      	subs	r3, r0, r3
 800bdda:	d0d3      	beq.n	800bd84 <_malloc_r+0x20>
 800bddc:	425a      	negs	r2, r3
 800bdde:	50e2      	str	r2, [r4, r3]
 800bde0:	e7d0      	b.n	800bd84 <_malloc_r+0x20>
 800bde2:	428c      	cmp	r4, r1
 800bde4:	684b      	ldr	r3, [r1, #4]
 800bde6:	bf16      	itet	ne
 800bde8:	6063      	strne	r3, [r4, #4]
 800bdea:	6013      	streq	r3, [r2, #0]
 800bdec:	460c      	movne	r4, r1
 800bdee:	e7eb      	b.n	800bdc8 <_malloc_r+0x64>
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	6849      	ldr	r1, [r1, #4]
 800bdf4:	e7cc      	b.n	800bd90 <_malloc_r+0x2c>
 800bdf6:	1cc4      	adds	r4, r0, #3
 800bdf8:	f024 0403 	bic.w	r4, r4, #3
 800bdfc:	42a0      	cmp	r0, r4
 800bdfe:	d005      	beq.n	800be0c <_malloc_r+0xa8>
 800be00:	1a21      	subs	r1, r4, r0
 800be02:	4630      	mov	r0, r6
 800be04:	f000 f808 	bl	800be18 <_sbrk_r>
 800be08:	3001      	adds	r0, #1
 800be0a:	d0cf      	beq.n	800bdac <_malloc_r+0x48>
 800be0c:	6025      	str	r5, [r4, #0]
 800be0e:	e7db      	b.n	800bdc8 <_malloc_r+0x64>
 800be10:	200002c0 	.word	0x200002c0
 800be14:	200002c4 	.word	0x200002c4

0800be18 <_sbrk_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4c06      	ldr	r4, [pc, #24]	; (800be34 <_sbrk_r+0x1c>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4605      	mov	r5, r0
 800be20:	4608      	mov	r0, r1
 800be22:	6023      	str	r3, [r4, #0]
 800be24:	f7f6 f914 	bl	8002050 <_sbrk>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d102      	bne.n	800be32 <_sbrk_r+0x1a>
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	b103      	cbz	r3, 800be32 <_sbrk_r+0x1a>
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	20001db0 	.word	0x20001db0

0800be38 <siprintf>:
 800be38:	b40e      	push	{r1, r2, r3}
 800be3a:	b500      	push	{lr}
 800be3c:	b09c      	sub	sp, #112	; 0x70
 800be3e:	ab1d      	add	r3, sp, #116	; 0x74
 800be40:	9002      	str	r0, [sp, #8]
 800be42:	9006      	str	r0, [sp, #24]
 800be44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be48:	4809      	ldr	r0, [pc, #36]	; (800be70 <siprintf+0x38>)
 800be4a:	9107      	str	r1, [sp, #28]
 800be4c:	9104      	str	r1, [sp, #16]
 800be4e:	4909      	ldr	r1, [pc, #36]	; (800be74 <siprintf+0x3c>)
 800be50:	f853 2b04 	ldr.w	r2, [r3], #4
 800be54:	9105      	str	r1, [sp, #20]
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	a902      	add	r1, sp, #8
 800be5c:	f000 f868 	bl	800bf30 <_svfiprintf_r>
 800be60:	9b02      	ldr	r3, [sp, #8]
 800be62:	2200      	movs	r2, #0
 800be64:	701a      	strb	r2, [r3, #0]
 800be66:	b01c      	add	sp, #112	; 0x70
 800be68:	f85d eb04 	ldr.w	lr, [sp], #4
 800be6c:	b003      	add	sp, #12
 800be6e:	4770      	bx	lr
 800be70:	20000210 	.word	0x20000210
 800be74:	ffff0208 	.word	0xffff0208

0800be78 <__malloc_lock>:
 800be78:	4770      	bx	lr

0800be7a <__malloc_unlock>:
 800be7a:	4770      	bx	lr

0800be7c <__ssputs_r>:
 800be7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be80:	688e      	ldr	r6, [r1, #8]
 800be82:	429e      	cmp	r6, r3
 800be84:	4682      	mov	sl, r0
 800be86:	460c      	mov	r4, r1
 800be88:	4690      	mov	r8, r2
 800be8a:	4699      	mov	r9, r3
 800be8c:	d837      	bhi.n	800befe <__ssputs_r+0x82>
 800be8e:	898a      	ldrh	r2, [r1, #12]
 800be90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be94:	d031      	beq.n	800befa <__ssputs_r+0x7e>
 800be96:	6825      	ldr	r5, [r4, #0]
 800be98:	6909      	ldr	r1, [r1, #16]
 800be9a:	1a6f      	subs	r7, r5, r1
 800be9c:	6965      	ldr	r5, [r4, #20]
 800be9e:	2302      	movs	r3, #2
 800bea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bea4:	fb95 f5f3 	sdiv	r5, r5, r3
 800bea8:	f109 0301 	add.w	r3, r9, #1
 800beac:	443b      	add	r3, r7
 800beae:	429d      	cmp	r5, r3
 800beb0:	bf38      	it	cc
 800beb2:	461d      	movcc	r5, r3
 800beb4:	0553      	lsls	r3, r2, #21
 800beb6:	d530      	bpl.n	800bf1a <__ssputs_r+0x9e>
 800beb8:	4629      	mov	r1, r5
 800beba:	f7ff ff53 	bl	800bd64 <_malloc_r>
 800bebe:	4606      	mov	r6, r0
 800bec0:	b950      	cbnz	r0, 800bed8 <__ssputs_r+0x5c>
 800bec2:	230c      	movs	r3, #12
 800bec4:	f8ca 3000 	str.w	r3, [sl]
 800bec8:	89a3      	ldrh	r3, [r4, #12]
 800beca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed8:	463a      	mov	r2, r7
 800beda:	6921      	ldr	r1, [r4, #16]
 800bedc:	f7ff fee0 	bl	800bca0 <memcpy>
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beea:	81a3      	strh	r3, [r4, #12]
 800beec:	6126      	str	r6, [r4, #16]
 800beee:	6165      	str	r5, [r4, #20]
 800bef0:	443e      	add	r6, r7
 800bef2:	1bed      	subs	r5, r5, r7
 800bef4:	6026      	str	r6, [r4, #0]
 800bef6:	60a5      	str	r5, [r4, #8]
 800bef8:	464e      	mov	r6, r9
 800befa:	454e      	cmp	r6, r9
 800befc:	d900      	bls.n	800bf00 <__ssputs_r+0x84>
 800befe:	464e      	mov	r6, r9
 800bf00:	4632      	mov	r2, r6
 800bf02:	4641      	mov	r1, r8
 800bf04:	6820      	ldr	r0, [r4, #0]
 800bf06:	f000 fa93 	bl	800c430 <memmove>
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	1b9b      	subs	r3, r3, r6
 800bf0e:	60a3      	str	r3, [r4, #8]
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	441e      	add	r6, r3
 800bf14:	6026      	str	r6, [r4, #0]
 800bf16:	2000      	movs	r0, #0
 800bf18:	e7dc      	b.n	800bed4 <__ssputs_r+0x58>
 800bf1a:	462a      	mov	r2, r5
 800bf1c:	f000 faa1 	bl	800c462 <_realloc_r>
 800bf20:	4606      	mov	r6, r0
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d1e2      	bne.n	800beec <__ssputs_r+0x70>
 800bf26:	6921      	ldr	r1, [r4, #16]
 800bf28:	4650      	mov	r0, sl
 800bf2a:	f7ff fecd 	bl	800bcc8 <_free_r>
 800bf2e:	e7c8      	b.n	800bec2 <__ssputs_r+0x46>

0800bf30 <_svfiprintf_r>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	461d      	mov	r5, r3
 800bf36:	898b      	ldrh	r3, [r1, #12]
 800bf38:	061f      	lsls	r7, r3, #24
 800bf3a:	b09d      	sub	sp, #116	; 0x74
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	4616      	mov	r6, r2
 800bf42:	d50f      	bpl.n	800bf64 <_svfiprintf_r+0x34>
 800bf44:	690b      	ldr	r3, [r1, #16]
 800bf46:	b96b      	cbnz	r3, 800bf64 <_svfiprintf_r+0x34>
 800bf48:	2140      	movs	r1, #64	; 0x40
 800bf4a:	f7ff ff0b 	bl	800bd64 <_malloc_r>
 800bf4e:	6020      	str	r0, [r4, #0]
 800bf50:	6120      	str	r0, [r4, #16]
 800bf52:	b928      	cbnz	r0, 800bf60 <_svfiprintf_r+0x30>
 800bf54:	230c      	movs	r3, #12
 800bf56:	f8c8 3000 	str.w	r3, [r8]
 800bf5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf5e:	e0c8      	b.n	800c0f2 <_svfiprintf_r+0x1c2>
 800bf60:	2340      	movs	r3, #64	; 0x40
 800bf62:	6163      	str	r3, [r4, #20]
 800bf64:	2300      	movs	r3, #0
 800bf66:	9309      	str	r3, [sp, #36]	; 0x24
 800bf68:	2320      	movs	r3, #32
 800bf6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf6e:	2330      	movs	r3, #48	; 0x30
 800bf70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf74:	9503      	str	r5, [sp, #12]
 800bf76:	f04f 0b01 	mov.w	fp, #1
 800bf7a:	4637      	mov	r7, r6
 800bf7c:	463d      	mov	r5, r7
 800bf7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf82:	b10b      	cbz	r3, 800bf88 <_svfiprintf_r+0x58>
 800bf84:	2b25      	cmp	r3, #37	; 0x25
 800bf86:	d13e      	bne.n	800c006 <_svfiprintf_r+0xd6>
 800bf88:	ebb7 0a06 	subs.w	sl, r7, r6
 800bf8c:	d00b      	beq.n	800bfa6 <_svfiprintf_r+0x76>
 800bf8e:	4653      	mov	r3, sl
 800bf90:	4632      	mov	r2, r6
 800bf92:	4621      	mov	r1, r4
 800bf94:	4640      	mov	r0, r8
 800bf96:	f7ff ff71 	bl	800be7c <__ssputs_r>
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	f000 80a4 	beq.w	800c0e8 <_svfiprintf_r+0x1b8>
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	4453      	add	r3, sl
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	783b      	ldrb	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 809d 	beq.w	800c0e8 <_svfiprintf_r+0x1b8>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	9307      	str	r3, [sp, #28]
 800bfbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bfc2:	462f      	mov	r7, r5
 800bfc4:	2205      	movs	r2, #5
 800bfc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bfca:	4850      	ldr	r0, [pc, #320]	; (800c10c <_svfiprintf_r+0x1dc>)
 800bfcc:	f7f4 f908 	bl	80001e0 <memchr>
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	b9d0      	cbnz	r0, 800c00a <_svfiprintf_r+0xda>
 800bfd4:	06d9      	lsls	r1, r3, #27
 800bfd6:	bf44      	itt	mi
 800bfd8:	2220      	movmi	r2, #32
 800bfda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfde:	071a      	lsls	r2, r3, #28
 800bfe0:	bf44      	itt	mi
 800bfe2:	222b      	movmi	r2, #43	; 0x2b
 800bfe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bfe8:	782a      	ldrb	r2, [r5, #0]
 800bfea:	2a2a      	cmp	r2, #42	; 0x2a
 800bfec:	d015      	beq.n	800c01a <_svfiprintf_r+0xea>
 800bfee:	9a07      	ldr	r2, [sp, #28]
 800bff0:	462f      	mov	r7, r5
 800bff2:	2000      	movs	r0, #0
 800bff4:	250a      	movs	r5, #10
 800bff6:	4639      	mov	r1, r7
 800bff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffc:	3b30      	subs	r3, #48	; 0x30
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d94d      	bls.n	800c09e <_svfiprintf_r+0x16e>
 800c002:	b1b8      	cbz	r0, 800c034 <_svfiprintf_r+0x104>
 800c004:	e00f      	b.n	800c026 <_svfiprintf_r+0xf6>
 800c006:	462f      	mov	r7, r5
 800c008:	e7b8      	b.n	800bf7c <_svfiprintf_r+0x4c>
 800c00a:	4a40      	ldr	r2, [pc, #256]	; (800c10c <_svfiprintf_r+0x1dc>)
 800c00c:	1a80      	subs	r0, r0, r2
 800c00e:	fa0b f000 	lsl.w	r0, fp, r0
 800c012:	4318      	orrs	r0, r3
 800c014:	9004      	str	r0, [sp, #16]
 800c016:	463d      	mov	r5, r7
 800c018:	e7d3      	b.n	800bfc2 <_svfiprintf_r+0x92>
 800c01a:	9a03      	ldr	r2, [sp, #12]
 800c01c:	1d11      	adds	r1, r2, #4
 800c01e:	6812      	ldr	r2, [r2, #0]
 800c020:	9103      	str	r1, [sp, #12]
 800c022:	2a00      	cmp	r2, #0
 800c024:	db01      	blt.n	800c02a <_svfiprintf_r+0xfa>
 800c026:	9207      	str	r2, [sp, #28]
 800c028:	e004      	b.n	800c034 <_svfiprintf_r+0x104>
 800c02a:	4252      	negs	r2, r2
 800c02c:	f043 0302 	orr.w	r3, r3, #2
 800c030:	9207      	str	r2, [sp, #28]
 800c032:	9304      	str	r3, [sp, #16]
 800c034:	783b      	ldrb	r3, [r7, #0]
 800c036:	2b2e      	cmp	r3, #46	; 0x2e
 800c038:	d10c      	bne.n	800c054 <_svfiprintf_r+0x124>
 800c03a:	787b      	ldrb	r3, [r7, #1]
 800c03c:	2b2a      	cmp	r3, #42	; 0x2a
 800c03e:	d133      	bne.n	800c0a8 <_svfiprintf_r+0x178>
 800c040:	9b03      	ldr	r3, [sp, #12]
 800c042:	1d1a      	adds	r2, r3, #4
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	9203      	str	r2, [sp, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bfb8      	it	lt
 800c04c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c050:	3702      	adds	r7, #2
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	4d2e      	ldr	r5, [pc, #184]	; (800c110 <_svfiprintf_r+0x1e0>)
 800c056:	7839      	ldrb	r1, [r7, #0]
 800c058:	2203      	movs	r2, #3
 800c05a:	4628      	mov	r0, r5
 800c05c:	f7f4 f8c0 	bl	80001e0 <memchr>
 800c060:	b138      	cbz	r0, 800c072 <_svfiprintf_r+0x142>
 800c062:	2340      	movs	r3, #64	; 0x40
 800c064:	1b40      	subs	r0, r0, r5
 800c066:	fa03 f000 	lsl.w	r0, r3, r0
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	4303      	orrs	r3, r0
 800c06e:	3701      	adds	r7, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	7839      	ldrb	r1, [r7, #0]
 800c074:	4827      	ldr	r0, [pc, #156]	; (800c114 <_svfiprintf_r+0x1e4>)
 800c076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c07a:	2206      	movs	r2, #6
 800c07c:	1c7e      	adds	r6, r7, #1
 800c07e:	f7f4 f8af 	bl	80001e0 <memchr>
 800c082:	2800      	cmp	r0, #0
 800c084:	d038      	beq.n	800c0f8 <_svfiprintf_r+0x1c8>
 800c086:	4b24      	ldr	r3, [pc, #144]	; (800c118 <_svfiprintf_r+0x1e8>)
 800c088:	bb13      	cbnz	r3, 800c0d0 <_svfiprintf_r+0x1a0>
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	3307      	adds	r3, #7
 800c08e:	f023 0307 	bic.w	r3, r3, #7
 800c092:	3308      	adds	r3, #8
 800c094:	9303      	str	r3, [sp, #12]
 800c096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c098:	444b      	add	r3, r9
 800c09a:	9309      	str	r3, [sp, #36]	; 0x24
 800c09c:	e76d      	b.n	800bf7a <_svfiprintf_r+0x4a>
 800c09e:	fb05 3202 	mla	r2, r5, r2, r3
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	e7a6      	b.n	800bff6 <_svfiprintf_r+0xc6>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	3701      	adds	r7, #1
 800c0ac:	9305      	str	r3, [sp, #20]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	250a      	movs	r5, #10
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b8:	3a30      	subs	r2, #48	; 0x30
 800c0ba:	2a09      	cmp	r2, #9
 800c0bc:	d903      	bls.n	800c0c6 <_svfiprintf_r+0x196>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0c8      	beq.n	800c054 <_svfiprintf_r+0x124>
 800c0c2:	9105      	str	r1, [sp, #20]
 800c0c4:	e7c6      	b.n	800c054 <_svfiprintf_r+0x124>
 800c0c6:	fb05 2101 	mla	r1, r5, r1, r2
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	e7f0      	b.n	800c0b2 <_svfiprintf_r+0x182>
 800c0d0:	ab03      	add	r3, sp, #12
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	4b11      	ldr	r3, [pc, #68]	; (800c11c <_svfiprintf_r+0x1ec>)
 800c0d8:	a904      	add	r1, sp, #16
 800c0da:	4640      	mov	r0, r8
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c0e4:	4681      	mov	r9, r0
 800c0e6:	d1d6      	bne.n	800c096 <_svfiprintf_r+0x166>
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	065b      	lsls	r3, r3, #25
 800c0ec:	f53f af35 	bmi.w	800bf5a <_svfiprintf_r+0x2a>
 800c0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0f2:	b01d      	add	sp, #116	; 0x74
 800c0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f8:	ab03      	add	r3, sp, #12
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	4b07      	ldr	r3, [pc, #28]	; (800c11c <_svfiprintf_r+0x1ec>)
 800c100:	a904      	add	r1, sp, #16
 800c102:	4640      	mov	r0, r8
 800c104:	f000 f882 	bl	800c20c <_printf_i>
 800c108:	e7ea      	b.n	800c0e0 <_svfiprintf_r+0x1b0>
 800c10a:	bf00      	nop
 800c10c:	0800ccc8 	.word	0x0800ccc8
 800c110:	0800ccce 	.word	0x0800ccce
 800c114:	0800ccd2 	.word	0x0800ccd2
 800c118:	00000000 	.word	0x00000000
 800c11c:	0800be7d 	.word	0x0800be7d

0800c120 <_printf_common>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	4691      	mov	r9, r2
 800c126:	461f      	mov	r7, r3
 800c128:	688a      	ldr	r2, [r1, #8]
 800c12a:	690b      	ldr	r3, [r1, #16]
 800c12c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c130:	4293      	cmp	r3, r2
 800c132:	bfb8      	it	lt
 800c134:	4613      	movlt	r3, r2
 800c136:	f8c9 3000 	str.w	r3, [r9]
 800c13a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c13e:	4606      	mov	r6, r0
 800c140:	460c      	mov	r4, r1
 800c142:	b112      	cbz	r2, 800c14a <_printf_common+0x2a>
 800c144:	3301      	adds	r3, #1
 800c146:	f8c9 3000 	str.w	r3, [r9]
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	0699      	lsls	r1, r3, #26
 800c14e:	bf42      	ittt	mi
 800c150:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c154:	3302      	addmi	r3, #2
 800c156:	f8c9 3000 	strmi.w	r3, [r9]
 800c15a:	6825      	ldr	r5, [r4, #0]
 800c15c:	f015 0506 	ands.w	r5, r5, #6
 800c160:	d107      	bne.n	800c172 <_printf_common+0x52>
 800c162:	f104 0a19 	add.w	sl, r4, #25
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	f8d9 2000 	ldr.w	r2, [r9]
 800c16c:	1a9b      	subs	r3, r3, r2
 800c16e:	42ab      	cmp	r3, r5
 800c170:	dc28      	bgt.n	800c1c4 <_printf_common+0xa4>
 800c172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c176:	6822      	ldr	r2, [r4, #0]
 800c178:	3300      	adds	r3, #0
 800c17a:	bf18      	it	ne
 800c17c:	2301      	movne	r3, #1
 800c17e:	0692      	lsls	r2, r2, #26
 800c180:	d42d      	bmi.n	800c1de <_printf_common+0xbe>
 800c182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c186:	4639      	mov	r1, r7
 800c188:	4630      	mov	r0, r6
 800c18a:	47c0      	blx	r8
 800c18c:	3001      	adds	r0, #1
 800c18e:	d020      	beq.n	800c1d2 <_printf_common+0xb2>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	68e5      	ldr	r5, [r4, #12]
 800c194:	f8d9 2000 	ldr.w	r2, [r9]
 800c198:	f003 0306 	and.w	r3, r3, #6
 800c19c:	2b04      	cmp	r3, #4
 800c19e:	bf08      	it	eq
 800c1a0:	1aad      	subeq	r5, r5, r2
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	6922      	ldr	r2, [r4, #16]
 800c1a6:	bf0c      	ite	eq
 800c1a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1ac:	2500      	movne	r5, #0
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	bfc4      	itt	gt
 800c1b2:	1a9b      	subgt	r3, r3, r2
 800c1b4:	18ed      	addgt	r5, r5, r3
 800c1b6:	f04f 0900 	mov.w	r9, #0
 800c1ba:	341a      	adds	r4, #26
 800c1bc:	454d      	cmp	r5, r9
 800c1be:	d11a      	bne.n	800c1f6 <_printf_common+0xd6>
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	e008      	b.n	800c1d6 <_printf_common+0xb6>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	4652      	mov	r2, sl
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	47c0      	blx	r8
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d103      	bne.n	800c1da <_printf_common+0xba>
 800c1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	3501      	adds	r5, #1
 800c1dc:	e7c3      	b.n	800c166 <_printf_common+0x46>
 800c1de:	18e1      	adds	r1, r4, r3
 800c1e0:	1c5a      	adds	r2, r3, #1
 800c1e2:	2030      	movs	r0, #48	; 0x30
 800c1e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1e8:	4422      	add	r2, r4
 800c1ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1f2:	3302      	adds	r3, #2
 800c1f4:	e7c5      	b.n	800c182 <_printf_common+0x62>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	47c0      	blx	r8
 800c200:	3001      	adds	r0, #1
 800c202:	d0e6      	beq.n	800c1d2 <_printf_common+0xb2>
 800c204:	f109 0901 	add.w	r9, r9, #1
 800c208:	e7d8      	b.n	800c1bc <_printf_common+0x9c>
	...

0800c20c <_printf_i>:
 800c20c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c210:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c214:	460c      	mov	r4, r1
 800c216:	7e09      	ldrb	r1, [r1, #24]
 800c218:	b085      	sub	sp, #20
 800c21a:	296e      	cmp	r1, #110	; 0x6e
 800c21c:	4617      	mov	r7, r2
 800c21e:	4606      	mov	r6, r0
 800c220:	4698      	mov	r8, r3
 800c222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c224:	f000 80b3 	beq.w	800c38e <_printf_i+0x182>
 800c228:	d822      	bhi.n	800c270 <_printf_i+0x64>
 800c22a:	2963      	cmp	r1, #99	; 0x63
 800c22c:	d036      	beq.n	800c29c <_printf_i+0x90>
 800c22e:	d80a      	bhi.n	800c246 <_printf_i+0x3a>
 800c230:	2900      	cmp	r1, #0
 800c232:	f000 80b9 	beq.w	800c3a8 <_printf_i+0x19c>
 800c236:	2958      	cmp	r1, #88	; 0x58
 800c238:	f000 8083 	beq.w	800c342 <_printf_i+0x136>
 800c23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c244:	e032      	b.n	800c2ac <_printf_i+0xa0>
 800c246:	2964      	cmp	r1, #100	; 0x64
 800c248:	d001      	beq.n	800c24e <_printf_i+0x42>
 800c24a:	2969      	cmp	r1, #105	; 0x69
 800c24c:	d1f6      	bne.n	800c23c <_printf_i+0x30>
 800c24e:	6820      	ldr	r0, [r4, #0]
 800c250:	6813      	ldr	r3, [r2, #0]
 800c252:	0605      	lsls	r5, r0, #24
 800c254:	f103 0104 	add.w	r1, r3, #4
 800c258:	d52a      	bpl.n	800c2b0 <_printf_i+0xa4>
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	6011      	str	r1, [r2, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	da03      	bge.n	800c26a <_printf_i+0x5e>
 800c262:	222d      	movs	r2, #45	; 0x2d
 800c264:	425b      	negs	r3, r3
 800c266:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c26a:	486f      	ldr	r0, [pc, #444]	; (800c428 <_printf_i+0x21c>)
 800c26c:	220a      	movs	r2, #10
 800c26e:	e039      	b.n	800c2e4 <_printf_i+0xd8>
 800c270:	2973      	cmp	r1, #115	; 0x73
 800c272:	f000 809d 	beq.w	800c3b0 <_printf_i+0x1a4>
 800c276:	d808      	bhi.n	800c28a <_printf_i+0x7e>
 800c278:	296f      	cmp	r1, #111	; 0x6f
 800c27a:	d020      	beq.n	800c2be <_printf_i+0xb2>
 800c27c:	2970      	cmp	r1, #112	; 0x70
 800c27e:	d1dd      	bne.n	800c23c <_printf_i+0x30>
 800c280:	6823      	ldr	r3, [r4, #0]
 800c282:	f043 0320 	orr.w	r3, r3, #32
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	e003      	b.n	800c292 <_printf_i+0x86>
 800c28a:	2975      	cmp	r1, #117	; 0x75
 800c28c:	d017      	beq.n	800c2be <_printf_i+0xb2>
 800c28e:	2978      	cmp	r1, #120	; 0x78
 800c290:	d1d4      	bne.n	800c23c <_printf_i+0x30>
 800c292:	2378      	movs	r3, #120	; 0x78
 800c294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c298:	4864      	ldr	r0, [pc, #400]	; (800c42c <_printf_i+0x220>)
 800c29a:	e055      	b.n	800c348 <_printf_i+0x13c>
 800c29c:	6813      	ldr	r3, [r2, #0]
 800c29e:	1d19      	adds	r1, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6011      	str	r1, [r2, #0]
 800c2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e08c      	b.n	800c3ca <_printf_i+0x1be>
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6011      	str	r1, [r2, #0]
 800c2b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c2b8:	bf18      	it	ne
 800c2ba:	b21b      	sxthne	r3, r3
 800c2bc:	e7cf      	b.n	800c25e <_printf_i+0x52>
 800c2be:	6813      	ldr	r3, [r2, #0]
 800c2c0:	6825      	ldr	r5, [r4, #0]
 800c2c2:	1d18      	adds	r0, r3, #4
 800c2c4:	6010      	str	r0, [r2, #0]
 800c2c6:	0628      	lsls	r0, r5, #24
 800c2c8:	d501      	bpl.n	800c2ce <_printf_i+0xc2>
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	e002      	b.n	800c2d4 <_printf_i+0xc8>
 800c2ce:	0668      	lsls	r0, r5, #25
 800c2d0:	d5fb      	bpl.n	800c2ca <_printf_i+0xbe>
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	4854      	ldr	r0, [pc, #336]	; (800c428 <_printf_i+0x21c>)
 800c2d6:	296f      	cmp	r1, #111	; 0x6f
 800c2d8:	bf14      	ite	ne
 800c2da:	220a      	movne	r2, #10
 800c2dc:	2208      	moveq	r2, #8
 800c2de:	2100      	movs	r1, #0
 800c2e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2e4:	6865      	ldr	r5, [r4, #4]
 800c2e6:	60a5      	str	r5, [r4, #8]
 800c2e8:	2d00      	cmp	r5, #0
 800c2ea:	f2c0 8095 	blt.w	800c418 <_printf_i+0x20c>
 800c2ee:	6821      	ldr	r1, [r4, #0]
 800c2f0:	f021 0104 	bic.w	r1, r1, #4
 800c2f4:	6021      	str	r1, [r4, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d13d      	bne.n	800c376 <_printf_i+0x16a>
 800c2fa:	2d00      	cmp	r5, #0
 800c2fc:	f040 808e 	bne.w	800c41c <_printf_i+0x210>
 800c300:	4665      	mov	r5, ip
 800c302:	2a08      	cmp	r2, #8
 800c304:	d10b      	bne.n	800c31e <_printf_i+0x112>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	07db      	lsls	r3, r3, #31
 800c30a:	d508      	bpl.n	800c31e <_printf_i+0x112>
 800c30c:	6923      	ldr	r3, [r4, #16]
 800c30e:	6862      	ldr	r2, [r4, #4]
 800c310:	429a      	cmp	r2, r3
 800c312:	bfde      	ittt	le
 800c314:	2330      	movle	r3, #48	; 0x30
 800c316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c31a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c31e:	ebac 0305 	sub.w	r3, ip, r5
 800c322:	6123      	str	r3, [r4, #16]
 800c324:	f8cd 8000 	str.w	r8, [sp]
 800c328:	463b      	mov	r3, r7
 800c32a:	aa03      	add	r2, sp, #12
 800c32c:	4621      	mov	r1, r4
 800c32e:	4630      	mov	r0, r6
 800c330:	f7ff fef6 	bl	800c120 <_printf_common>
 800c334:	3001      	adds	r0, #1
 800c336:	d14d      	bne.n	800c3d4 <_printf_i+0x1c8>
 800c338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c33c:	b005      	add	sp, #20
 800c33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c342:	4839      	ldr	r0, [pc, #228]	; (800c428 <_printf_i+0x21c>)
 800c344:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c348:	6813      	ldr	r3, [r2, #0]
 800c34a:	6821      	ldr	r1, [r4, #0]
 800c34c:	1d1d      	adds	r5, r3, #4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6015      	str	r5, [r2, #0]
 800c352:	060a      	lsls	r2, r1, #24
 800c354:	d50b      	bpl.n	800c36e <_printf_i+0x162>
 800c356:	07ca      	lsls	r2, r1, #31
 800c358:	bf44      	itt	mi
 800c35a:	f041 0120 	orrmi.w	r1, r1, #32
 800c35e:	6021      	strmi	r1, [r4, #0]
 800c360:	b91b      	cbnz	r3, 800c36a <_printf_i+0x15e>
 800c362:	6822      	ldr	r2, [r4, #0]
 800c364:	f022 0220 	bic.w	r2, r2, #32
 800c368:	6022      	str	r2, [r4, #0]
 800c36a:	2210      	movs	r2, #16
 800c36c:	e7b7      	b.n	800c2de <_printf_i+0xd2>
 800c36e:	064d      	lsls	r5, r1, #25
 800c370:	bf48      	it	mi
 800c372:	b29b      	uxthmi	r3, r3
 800c374:	e7ef      	b.n	800c356 <_printf_i+0x14a>
 800c376:	4665      	mov	r5, ip
 800c378:	fbb3 f1f2 	udiv	r1, r3, r2
 800c37c:	fb02 3311 	mls	r3, r2, r1, r3
 800c380:	5cc3      	ldrb	r3, [r0, r3]
 800c382:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c386:	460b      	mov	r3, r1
 800c388:	2900      	cmp	r1, #0
 800c38a:	d1f5      	bne.n	800c378 <_printf_i+0x16c>
 800c38c:	e7b9      	b.n	800c302 <_printf_i+0xf6>
 800c38e:	6813      	ldr	r3, [r2, #0]
 800c390:	6825      	ldr	r5, [r4, #0]
 800c392:	6961      	ldr	r1, [r4, #20]
 800c394:	1d18      	adds	r0, r3, #4
 800c396:	6010      	str	r0, [r2, #0]
 800c398:	0628      	lsls	r0, r5, #24
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	d501      	bpl.n	800c3a2 <_printf_i+0x196>
 800c39e:	6019      	str	r1, [r3, #0]
 800c3a0:	e002      	b.n	800c3a8 <_printf_i+0x19c>
 800c3a2:	066a      	lsls	r2, r5, #25
 800c3a4:	d5fb      	bpl.n	800c39e <_printf_i+0x192>
 800c3a6:	8019      	strh	r1, [r3, #0]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	4665      	mov	r5, ip
 800c3ae:	e7b9      	b.n	800c324 <_printf_i+0x118>
 800c3b0:	6813      	ldr	r3, [r2, #0]
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	6011      	str	r1, [r2, #0]
 800c3b6:	681d      	ldr	r5, [r3, #0]
 800c3b8:	6862      	ldr	r2, [r4, #4]
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f7f3 ff0f 	bl	80001e0 <memchr>
 800c3c2:	b108      	cbz	r0, 800c3c8 <_printf_i+0x1bc>
 800c3c4:	1b40      	subs	r0, r0, r5
 800c3c6:	6060      	str	r0, [r4, #4]
 800c3c8:	6863      	ldr	r3, [r4, #4]
 800c3ca:	6123      	str	r3, [r4, #16]
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3d2:	e7a7      	b.n	800c324 <_printf_i+0x118>
 800c3d4:	6923      	ldr	r3, [r4, #16]
 800c3d6:	462a      	mov	r2, r5
 800c3d8:	4639      	mov	r1, r7
 800c3da:	4630      	mov	r0, r6
 800c3dc:	47c0      	blx	r8
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d0aa      	beq.n	800c338 <_printf_i+0x12c>
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	079b      	lsls	r3, r3, #30
 800c3e6:	d413      	bmi.n	800c410 <_printf_i+0x204>
 800c3e8:	68e0      	ldr	r0, [r4, #12]
 800c3ea:	9b03      	ldr	r3, [sp, #12]
 800c3ec:	4298      	cmp	r0, r3
 800c3ee:	bfb8      	it	lt
 800c3f0:	4618      	movlt	r0, r3
 800c3f2:	e7a3      	b.n	800c33c <_printf_i+0x130>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	464a      	mov	r2, r9
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	47c0      	blx	r8
 800c3fe:	3001      	adds	r0, #1
 800c400:	d09a      	beq.n	800c338 <_printf_i+0x12c>
 800c402:	3501      	adds	r5, #1
 800c404:	68e3      	ldr	r3, [r4, #12]
 800c406:	9a03      	ldr	r2, [sp, #12]
 800c408:	1a9b      	subs	r3, r3, r2
 800c40a:	42ab      	cmp	r3, r5
 800c40c:	dcf2      	bgt.n	800c3f4 <_printf_i+0x1e8>
 800c40e:	e7eb      	b.n	800c3e8 <_printf_i+0x1dc>
 800c410:	2500      	movs	r5, #0
 800c412:	f104 0919 	add.w	r9, r4, #25
 800c416:	e7f5      	b.n	800c404 <_printf_i+0x1f8>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1ac      	bne.n	800c376 <_printf_i+0x16a>
 800c41c:	7803      	ldrb	r3, [r0, #0]
 800c41e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c422:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c426:	e76c      	b.n	800c302 <_printf_i+0xf6>
 800c428:	0800ccd9 	.word	0x0800ccd9
 800c42c:	0800ccea 	.word	0x0800ccea

0800c430 <memmove>:
 800c430:	4288      	cmp	r0, r1
 800c432:	b510      	push	{r4, lr}
 800c434:	eb01 0302 	add.w	r3, r1, r2
 800c438:	d807      	bhi.n	800c44a <memmove+0x1a>
 800c43a:	1e42      	subs	r2, r0, #1
 800c43c:	4299      	cmp	r1, r3
 800c43e:	d00a      	beq.n	800c456 <memmove+0x26>
 800c440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c444:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c448:	e7f8      	b.n	800c43c <memmove+0xc>
 800c44a:	4283      	cmp	r3, r0
 800c44c:	d9f5      	bls.n	800c43a <memmove+0xa>
 800c44e:	1881      	adds	r1, r0, r2
 800c450:	1ad2      	subs	r2, r2, r3
 800c452:	42d3      	cmn	r3, r2
 800c454:	d100      	bne.n	800c458 <memmove+0x28>
 800c456:	bd10      	pop	{r4, pc}
 800c458:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c45c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c460:	e7f7      	b.n	800c452 <memmove+0x22>

0800c462 <_realloc_r>:
 800c462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c464:	4607      	mov	r7, r0
 800c466:	4614      	mov	r4, r2
 800c468:	460e      	mov	r6, r1
 800c46a:	b921      	cbnz	r1, 800c476 <_realloc_r+0x14>
 800c46c:	4611      	mov	r1, r2
 800c46e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c472:	f7ff bc77 	b.w	800bd64 <_malloc_r>
 800c476:	b922      	cbnz	r2, 800c482 <_realloc_r+0x20>
 800c478:	f7ff fc26 	bl	800bcc8 <_free_r>
 800c47c:	4625      	mov	r5, r4
 800c47e:	4628      	mov	r0, r5
 800c480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c482:	f000 f814 	bl	800c4ae <_malloc_usable_size_r>
 800c486:	42a0      	cmp	r0, r4
 800c488:	d20f      	bcs.n	800c4aa <_realloc_r+0x48>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff fc69 	bl	800bd64 <_malloc_r>
 800c492:	4605      	mov	r5, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	d0f2      	beq.n	800c47e <_realloc_r+0x1c>
 800c498:	4631      	mov	r1, r6
 800c49a:	4622      	mov	r2, r4
 800c49c:	f7ff fc00 	bl	800bca0 <memcpy>
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	f7ff fc10 	bl	800bcc8 <_free_r>
 800c4a8:	e7e9      	b.n	800c47e <_realloc_r+0x1c>
 800c4aa:	4635      	mov	r5, r6
 800c4ac:	e7e7      	b.n	800c47e <_realloc_r+0x1c>

0800c4ae <_malloc_usable_size_r>:
 800c4ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b2:	1f18      	subs	r0, r3, #4
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfbc      	itt	lt
 800c4b8:	580b      	ldrlt	r3, [r1, r0]
 800c4ba:	18c0      	addlt	r0, r0, r3
 800c4bc:	4770      	bx	lr
	...

0800c4c0 <atan>:
 800c4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	ec55 4b10 	vmov	r4, r5, d0
 800c4c8:	4bc3      	ldr	r3, [pc, #780]	; (800c7d8 <atan+0x318>)
 800c4ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c4ce:	429e      	cmp	r6, r3
 800c4d0:	46ab      	mov	fp, r5
 800c4d2:	dd18      	ble.n	800c506 <atan+0x46>
 800c4d4:	4bc1      	ldr	r3, [pc, #772]	; (800c7dc <atan+0x31c>)
 800c4d6:	429e      	cmp	r6, r3
 800c4d8:	dc01      	bgt.n	800c4de <atan+0x1e>
 800c4da:	d109      	bne.n	800c4f0 <atan+0x30>
 800c4dc:	b144      	cbz	r4, 800c4f0 <atan+0x30>
 800c4de:	4622      	mov	r2, r4
 800c4e0:	462b      	mov	r3, r5
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	f7f3 fed1 	bl	800028c <__adddf3>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	e006      	b.n	800c4fe <atan+0x3e>
 800c4f0:	f1bb 0f00 	cmp.w	fp, #0
 800c4f4:	f340 8131 	ble.w	800c75a <atan+0x29a>
 800c4f8:	a59b      	add	r5, pc, #620	; (adr r5, 800c768 <atan+0x2a8>)
 800c4fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4fe:	ec45 4b10 	vmov	d0, r4, r5
 800c502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c506:	4bb6      	ldr	r3, [pc, #728]	; (800c7e0 <atan+0x320>)
 800c508:	429e      	cmp	r6, r3
 800c50a:	dc14      	bgt.n	800c536 <atan+0x76>
 800c50c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c510:	429e      	cmp	r6, r3
 800c512:	dc0d      	bgt.n	800c530 <atan+0x70>
 800c514:	a396      	add	r3, pc, #600	; (adr r3, 800c770 <atan+0x2b0>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	ee10 0a10 	vmov	r0, s0
 800c51e:	4629      	mov	r1, r5
 800c520:	f7f3 feb4 	bl	800028c <__adddf3>
 800c524:	2200      	movs	r2, #0
 800c526:	4baf      	ldr	r3, [pc, #700]	; (800c7e4 <atan+0x324>)
 800c528:	f7f4 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1e6      	bne.n	800c4fe <atan+0x3e>
 800c530:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c534:	e02b      	b.n	800c58e <atan+0xce>
 800c536:	f000 f963 	bl	800c800 <fabs>
 800c53a:	4bab      	ldr	r3, [pc, #684]	; (800c7e8 <atan+0x328>)
 800c53c:	429e      	cmp	r6, r3
 800c53e:	ec55 4b10 	vmov	r4, r5, d0
 800c542:	f300 80bf 	bgt.w	800c6c4 <atan+0x204>
 800c546:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c54a:	429e      	cmp	r6, r3
 800c54c:	f300 80a0 	bgt.w	800c690 <atan+0x1d0>
 800c550:	ee10 2a10 	vmov	r2, s0
 800c554:	ee10 0a10 	vmov	r0, s0
 800c558:	462b      	mov	r3, r5
 800c55a:	4629      	mov	r1, r5
 800c55c:	f7f3 fe96 	bl	800028c <__adddf3>
 800c560:	2200      	movs	r2, #0
 800c562:	4ba0      	ldr	r3, [pc, #640]	; (800c7e4 <atan+0x324>)
 800c564:	f7f3 fe90 	bl	8000288 <__aeabi_dsub>
 800c568:	2200      	movs	r2, #0
 800c56a:	4606      	mov	r6, r0
 800c56c:	460f      	mov	r7, r1
 800c56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c572:	4620      	mov	r0, r4
 800c574:	4629      	mov	r1, r5
 800c576:	f7f3 fe89 	bl	800028c <__adddf3>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4630      	mov	r0, r6
 800c580:	4639      	mov	r1, r7
 800c582:	f7f4 f963 	bl	800084c <__aeabi_ddiv>
 800c586:	f04f 0a00 	mov.w	sl, #0
 800c58a:	4604      	mov	r4, r0
 800c58c:	460d      	mov	r5, r1
 800c58e:	4622      	mov	r2, r4
 800c590:	462b      	mov	r3, r5
 800c592:	4620      	mov	r0, r4
 800c594:	4629      	mov	r1, r5
 800c596:	f7f4 f82f 	bl	80005f8 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4680      	mov	r8, r0
 800c5a0:	4689      	mov	r9, r1
 800c5a2:	f7f4 f829 	bl	80005f8 <__aeabi_dmul>
 800c5a6:	a374      	add	r3, pc, #464	; (adr r3, 800c778 <atan+0x2b8>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	460f      	mov	r7, r1
 800c5b0:	f7f4 f822 	bl	80005f8 <__aeabi_dmul>
 800c5b4:	a372      	add	r3, pc, #456	; (adr r3, 800c780 <atan+0x2c0>)
 800c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ba:	f7f3 fe67 	bl	800028c <__adddf3>
 800c5be:	4632      	mov	r2, r6
 800c5c0:	463b      	mov	r3, r7
 800c5c2:	f7f4 f819 	bl	80005f8 <__aeabi_dmul>
 800c5c6:	a370      	add	r3, pc, #448	; (adr r3, 800c788 <atan+0x2c8>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe5e 	bl	800028c <__adddf3>
 800c5d0:	4632      	mov	r2, r6
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	f7f4 f810 	bl	80005f8 <__aeabi_dmul>
 800c5d8:	a36d      	add	r3, pc, #436	; (adr r3, 800c790 <atan+0x2d0>)
 800c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5de:	f7f3 fe55 	bl	800028c <__adddf3>
 800c5e2:	4632      	mov	r2, r6
 800c5e4:	463b      	mov	r3, r7
 800c5e6:	f7f4 f807 	bl	80005f8 <__aeabi_dmul>
 800c5ea:	a36b      	add	r3, pc, #428	; (adr r3, 800c798 <atan+0x2d8>)
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	f7f3 fe4c 	bl	800028c <__adddf3>
 800c5f4:	4632      	mov	r2, r6
 800c5f6:	463b      	mov	r3, r7
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	a368      	add	r3, pc, #416	; (adr r3, 800c7a0 <atan+0x2e0>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	f7f3 fe43 	bl	800028c <__adddf3>
 800c606:	4642      	mov	r2, r8
 800c608:	464b      	mov	r3, r9
 800c60a:	f7f3 fff5 	bl	80005f8 <__aeabi_dmul>
 800c60e:	a366      	add	r3, pc, #408	; (adr r3, 800c7a8 <atan+0x2e8>)
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	4680      	mov	r8, r0
 800c616:	4689      	mov	r9, r1
 800c618:	4630      	mov	r0, r6
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f3 ffec 	bl	80005f8 <__aeabi_dmul>
 800c620:	a363      	add	r3, pc, #396	; (adr r3, 800c7b0 <atan+0x2f0>)
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f7f3 fe2f 	bl	8000288 <__aeabi_dsub>
 800c62a:	4632      	mov	r2, r6
 800c62c:	463b      	mov	r3, r7
 800c62e:	f7f3 ffe3 	bl	80005f8 <__aeabi_dmul>
 800c632:	a361      	add	r3, pc, #388	; (adr r3, 800c7b8 <atan+0x2f8>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fe26 	bl	8000288 <__aeabi_dsub>
 800c63c:	4632      	mov	r2, r6
 800c63e:	463b      	mov	r3, r7
 800c640:	f7f3 ffda 	bl	80005f8 <__aeabi_dmul>
 800c644:	a35e      	add	r3, pc, #376	; (adr r3, 800c7c0 <atan+0x300>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f7f3 fe1d 	bl	8000288 <__aeabi_dsub>
 800c64e:	4632      	mov	r2, r6
 800c650:	463b      	mov	r3, r7
 800c652:	f7f3 ffd1 	bl	80005f8 <__aeabi_dmul>
 800c656:	a35c      	add	r3, pc, #368	; (adr r3, 800c7c8 <atan+0x308>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	f7f3 fe14 	bl	8000288 <__aeabi_dsub>
 800c660:	4632      	mov	r2, r6
 800c662:	463b      	mov	r3, r7
 800c664:	f7f3 ffc8 	bl	80005f8 <__aeabi_dmul>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4640      	mov	r0, r8
 800c66e:	4649      	mov	r1, r9
 800c670:	f7f3 fe0c 	bl	800028c <__adddf3>
 800c674:	4622      	mov	r2, r4
 800c676:	462b      	mov	r3, r5
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	d14b      	bne.n	800c71e <atan+0x25e>
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f3 fdfd 	bl	8000288 <__aeabi_dsub>
 800c68e:	e72c      	b.n	800c4ea <atan+0x2a>
 800c690:	ee10 0a10 	vmov	r0, s0
 800c694:	2200      	movs	r2, #0
 800c696:	4b53      	ldr	r3, [pc, #332]	; (800c7e4 <atan+0x324>)
 800c698:	4629      	mov	r1, r5
 800c69a:	f7f3 fdf5 	bl	8000288 <__aeabi_dsub>
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	4b4f      	ldr	r3, [pc, #316]	; (800c7e4 <atan+0x324>)
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f7f3 fdef 	bl	800028c <__adddf3>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	4639      	mov	r1, r7
 800c6b6:	f7f4 f8c9 	bl	800084c <__aeabi_ddiv>
 800c6ba:	f04f 0a01 	mov.w	sl, #1
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	e764      	b.n	800c58e <atan+0xce>
 800c6c4:	4b49      	ldr	r3, [pc, #292]	; (800c7ec <atan+0x32c>)
 800c6c6:	429e      	cmp	r6, r3
 800c6c8:	dc1d      	bgt.n	800c706 <atan+0x246>
 800c6ca:	ee10 0a10 	vmov	r0, s0
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4b47      	ldr	r3, [pc, #284]	; (800c7f0 <atan+0x330>)
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	f7f3 fdd8 	bl	8000288 <__aeabi_dsub>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	4606      	mov	r6, r0
 800c6dc:	460f      	mov	r7, r1
 800c6de:	4b44      	ldr	r3, [pc, #272]	; (800c7f0 <atan+0x330>)
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	f7f3 ff88 	bl	80005f8 <__aeabi_dmul>
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4b3e      	ldr	r3, [pc, #248]	; (800c7e4 <atan+0x324>)
 800c6ec:	f7f3 fdce 	bl	800028c <__adddf3>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	4639      	mov	r1, r7
 800c6f8:	f7f4 f8a8 	bl	800084c <__aeabi_ddiv>
 800c6fc:	f04f 0a02 	mov.w	sl, #2
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	e743      	b.n	800c58e <atan+0xce>
 800c706:	462b      	mov	r3, r5
 800c708:	ee10 2a10 	vmov	r2, s0
 800c70c:	2000      	movs	r0, #0
 800c70e:	4939      	ldr	r1, [pc, #228]	; (800c7f4 <atan+0x334>)
 800c710:	f7f4 f89c 	bl	800084c <__aeabi_ddiv>
 800c714:	f04f 0a03 	mov.w	sl, #3
 800c718:	4604      	mov	r4, r0
 800c71a:	460d      	mov	r5, r1
 800c71c:	e737      	b.n	800c58e <atan+0xce>
 800c71e:	4b36      	ldr	r3, [pc, #216]	; (800c7f8 <atan+0x338>)
 800c720:	4e36      	ldr	r6, [pc, #216]	; (800c7fc <atan+0x33c>)
 800c722:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c726:	4456      	add	r6, sl
 800c728:	449a      	add	sl, r3
 800c72a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c72e:	f7f3 fdab 	bl	8000288 <__aeabi_dsub>
 800c732:	4622      	mov	r2, r4
 800c734:	462b      	mov	r3, r5
 800c736:	f7f3 fda7 	bl	8000288 <__aeabi_dsub>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c742:	f7f3 fda1 	bl	8000288 <__aeabi_dsub>
 800c746:	f1bb 0f00 	cmp.w	fp, #0
 800c74a:	4604      	mov	r4, r0
 800c74c:	460d      	mov	r5, r1
 800c74e:	f6bf aed6 	bge.w	800c4fe <atan+0x3e>
 800c752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c756:	461d      	mov	r5, r3
 800c758:	e6d1      	b.n	800c4fe <atan+0x3e>
 800c75a:	a51d      	add	r5, pc, #116	; (adr r5, 800c7d0 <atan+0x310>)
 800c75c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c760:	e6cd      	b.n	800c4fe <atan+0x3e>
 800c762:	bf00      	nop
 800c764:	f3af 8000 	nop.w
 800c768:	54442d18 	.word	0x54442d18
 800c76c:	3ff921fb 	.word	0x3ff921fb
 800c770:	8800759c 	.word	0x8800759c
 800c774:	7e37e43c 	.word	0x7e37e43c
 800c778:	e322da11 	.word	0xe322da11
 800c77c:	3f90ad3a 	.word	0x3f90ad3a
 800c780:	24760deb 	.word	0x24760deb
 800c784:	3fa97b4b 	.word	0x3fa97b4b
 800c788:	a0d03d51 	.word	0xa0d03d51
 800c78c:	3fb10d66 	.word	0x3fb10d66
 800c790:	c54c206e 	.word	0xc54c206e
 800c794:	3fb745cd 	.word	0x3fb745cd
 800c798:	920083ff 	.word	0x920083ff
 800c79c:	3fc24924 	.word	0x3fc24924
 800c7a0:	5555550d 	.word	0x5555550d
 800c7a4:	3fd55555 	.word	0x3fd55555
 800c7a8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c7ac:	bfa2b444 	.word	0xbfa2b444
 800c7b0:	52defd9a 	.word	0x52defd9a
 800c7b4:	3fadde2d 	.word	0x3fadde2d
 800c7b8:	af749a6d 	.word	0xaf749a6d
 800c7bc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c7c0:	fe231671 	.word	0xfe231671
 800c7c4:	3fbc71c6 	.word	0x3fbc71c6
 800c7c8:	9998ebc4 	.word	0x9998ebc4
 800c7cc:	3fc99999 	.word	0x3fc99999
 800c7d0:	54442d18 	.word	0x54442d18
 800c7d4:	bff921fb 	.word	0xbff921fb
 800c7d8:	440fffff 	.word	0x440fffff
 800c7dc:	7ff00000 	.word	0x7ff00000
 800c7e0:	3fdbffff 	.word	0x3fdbffff
 800c7e4:	3ff00000 	.word	0x3ff00000
 800c7e8:	3ff2ffff 	.word	0x3ff2ffff
 800c7ec:	40037fff 	.word	0x40037fff
 800c7f0:	3ff80000 	.word	0x3ff80000
 800c7f4:	bff00000 	.word	0xbff00000
 800c7f8:	0800cd20 	.word	0x0800cd20
 800c7fc:	0800cd00 	.word	0x0800cd00

0800c800 <fabs>:
 800c800:	ec51 0b10 	vmov	r0, r1, d0
 800c804:	ee10 2a10 	vmov	r2, s0
 800c808:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c80c:	ec43 2b10 	vmov	d0, r2, r3
 800c810:	4770      	bx	lr

0800c812 <atan2>:
 800c812:	f000 b85d 	b.w	800c8d0 <__ieee754_atan2>
	...

0800c818 <sqrt>:
 800c818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c81c:	ed2d 8b02 	vpush	{d8}
 800c820:	b08b      	sub	sp, #44	; 0x2c
 800c822:	ec55 4b10 	vmov	r4, r5, d0
 800c826:	f000 f931 	bl	800ca8c <__ieee754_sqrt>
 800c82a:	4b26      	ldr	r3, [pc, #152]	; (800c8c4 <sqrt+0xac>)
 800c82c:	eeb0 8a40 	vmov.f32	s16, s0
 800c830:	eef0 8a60 	vmov.f32	s17, s1
 800c834:	f993 6000 	ldrsb.w	r6, [r3]
 800c838:	1c73      	adds	r3, r6, #1
 800c83a:	d02a      	beq.n	800c892 <sqrt+0x7a>
 800c83c:	4622      	mov	r2, r4
 800c83e:	462b      	mov	r3, r5
 800c840:	4620      	mov	r0, r4
 800c842:	4629      	mov	r1, r5
 800c844:	f7f4 f972 	bl	8000b2c <__aeabi_dcmpun>
 800c848:	4607      	mov	r7, r0
 800c84a:	bb10      	cbnz	r0, 800c892 <sqrt+0x7a>
 800c84c:	f04f 0800 	mov.w	r8, #0
 800c850:	f04f 0900 	mov.w	r9, #0
 800c854:	4642      	mov	r2, r8
 800c856:	464b      	mov	r3, r9
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7f4 f93e 	bl	8000adc <__aeabi_dcmplt>
 800c860:	b1b8      	cbz	r0, 800c892 <sqrt+0x7a>
 800c862:	2301      	movs	r3, #1
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	4b18      	ldr	r3, [pc, #96]	; (800c8c8 <sqrt+0xb0>)
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	9708      	str	r7, [sp, #32]
 800c86c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c870:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c874:	b9b6      	cbnz	r6, 800c8a4 <sqrt+0x8c>
 800c876:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c87a:	4668      	mov	r0, sp
 800c87c:	f000 f9b6 	bl	800cbec <matherr>
 800c880:	b1d0      	cbz	r0, 800c8b8 <sqrt+0xa0>
 800c882:	9b08      	ldr	r3, [sp, #32]
 800c884:	b11b      	cbz	r3, 800c88e <sqrt+0x76>
 800c886:	f7ff f9d1 	bl	800bc2c <__errno>
 800c88a:	9b08      	ldr	r3, [sp, #32]
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c892:	eeb0 0a48 	vmov.f32	s0, s16
 800c896:	eef0 0a68 	vmov.f32	s1, s17
 800c89a:	b00b      	add	sp, #44	; 0x2c
 800c89c:	ecbd 8b02 	vpop	{d8}
 800c8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a4:	4642      	mov	r2, r8
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 ffce 	bl	800084c <__aeabi_ddiv>
 800c8b0:	2e02      	cmp	r6, #2
 800c8b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c8b6:	d1e0      	bne.n	800c87a <sqrt+0x62>
 800c8b8:	f7ff f9b8 	bl	800bc2c <__errno>
 800c8bc:	2321      	movs	r3, #33	; 0x21
 800c8be:	6003      	str	r3, [r0, #0]
 800c8c0:	e7df      	b.n	800c882 <sqrt+0x6a>
 800c8c2:	bf00      	nop
 800c8c4:	20000274 	.word	0x20000274
 800c8c8:	0800cd40 	.word	0x0800cd40
 800c8cc:	00000000 	.word	0x00000000

0800c8d0 <__ieee754_atan2>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	ec57 6b11 	vmov	r6, r7, d1
 800c8d8:	4273      	negs	r3, r6
 800c8da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c8de:	4333      	orrs	r3, r6
 800c8e0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800ca88 <__ieee754_atan2+0x1b8>
 800c8e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c8e8:	4573      	cmp	r3, lr
 800c8ea:	ec51 0b10 	vmov	r0, r1, d0
 800c8ee:	ee11 8a10 	vmov	r8, s2
 800c8f2:	d80a      	bhi.n	800c90a <__ieee754_atan2+0x3a>
 800c8f4:	4244      	negs	r4, r0
 800c8f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8fa:	4304      	orrs	r4, r0
 800c8fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c900:	4574      	cmp	r4, lr
 800c902:	468c      	mov	ip, r1
 800c904:	ee10 9a10 	vmov	r9, s0
 800c908:	d907      	bls.n	800c91a <__ieee754_atan2+0x4a>
 800c90a:	4632      	mov	r2, r6
 800c90c:	463b      	mov	r3, r7
 800c90e:	f7f3 fcbd 	bl	800028c <__adddf3>
 800c912:	ec41 0b10 	vmov	d0, r0, r1
 800c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c91e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c922:	4334      	orrs	r4, r6
 800c924:	d103      	bne.n	800c92e <__ieee754_atan2+0x5e>
 800c926:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c92a:	f7ff bdc9 	b.w	800c4c0 <atan>
 800c92e:	17bc      	asrs	r4, r7, #30
 800c930:	f004 0402 	and.w	r4, r4, #2
 800c934:	ea53 0909 	orrs.w	r9, r3, r9
 800c938:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c93c:	d107      	bne.n	800c94e <__ieee754_atan2+0x7e>
 800c93e:	2c02      	cmp	r4, #2
 800c940:	d073      	beq.n	800ca2a <__ieee754_atan2+0x15a>
 800c942:	2c03      	cmp	r4, #3
 800c944:	d1e5      	bne.n	800c912 <__ieee754_atan2+0x42>
 800c946:	a13e      	add	r1, pc, #248	; (adr r1, 800ca40 <__ieee754_atan2+0x170>)
 800c948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94c:	e7e1      	b.n	800c912 <__ieee754_atan2+0x42>
 800c94e:	ea52 0808 	orrs.w	r8, r2, r8
 800c952:	d106      	bne.n	800c962 <__ieee754_atan2+0x92>
 800c954:	f1bc 0f00 	cmp.w	ip, #0
 800c958:	da6b      	bge.n	800ca32 <__ieee754_atan2+0x162>
 800c95a:	a13b      	add	r1, pc, #236	; (adr r1, 800ca48 <__ieee754_atan2+0x178>)
 800c95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c960:	e7d7      	b.n	800c912 <__ieee754_atan2+0x42>
 800c962:	4572      	cmp	r2, lr
 800c964:	d120      	bne.n	800c9a8 <__ieee754_atan2+0xd8>
 800c966:	4293      	cmp	r3, r2
 800c968:	d111      	bne.n	800c98e <__ieee754_atan2+0xbe>
 800c96a:	2c02      	cmp	r4, #2
 800c96c:	d007      	beq.n	800c97e <__ieee754_atan2+0xae>
 800c96e:	2c03      	cmp	r4, #3
 800c970:	d009      	beq.n	800c986 <__ieee754_atan2+0xb6>
 800c972:	2c01      	cmp	r4, #1
 800c974:	d155      	bne.n	800ca22 <__ieee754_atan2+0x152>
 800c976:	a136      	add	r1, pc, #216	; (adr r1, 800ca50 <__ieee754_atan2+0x180>)
 800c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97c:	e7c9      	b.n	800c912 <__ieee754_atan2+0x42>
 800c97e:	a136      	add	r1, pc, #216	; (adr r1, 800ca58 <__ieee754_atan2+0x188>)
 800c980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c984:	e7c5      	b.n	800c912 <__ieee754_atan2+0x42>
 800c986:	a136      	add	r1, pc, #216	; (adr r1, 800ca60 <__ieee754_atan2+0x190>)
 800c988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c98c:	e7c1      	b.n	800c912 <__ieee754_atan2+0x42>
 800c98e:	2c02      	cmp	r4, #2
 800c990:	d04b      	beq.n	800ca2a <__ieee754_atan2+0x15a>
 800c992:	2c03      	cmp	r4, #3
 800c994:	d0d7      	beq.n	800c946 <__ieee754_atan2+0x76>
 800c996:	2c01      	cmp	r4, #1
 800c998:	f04f 0000 	mov.w	r0, #0
 800c99c:	d102      	bne.n	800c9a4 <__ieee754_atan2+0xd4>
 800c99e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c9a2:	e7b6      	b.n	800c912 <__ieee754_atan2+0x42>
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	e7b4      	b.n	800c912 <__ieee754_atan2+0x42>
 800c9a8:	4573      	cmp	r3, lr
 800c9aa:	d0d3      	beq.n	800c954 <__ieee754_atan2+0x84>
 800c9ac:	1a9b      	subs	r3, r3, r2
 800c9ae:	151b      	asrs	r3, r3, #20
 800c9b0:	2b3c      	cmp	r3, #60	; 0x3c
 800c9b2:	dc1e      	bgt.n	800c9f2 <__ieee754_atan2+0x122>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	da01      	bge.n	800c9bc <__ieee754_atan2+0xec>
 800c9b8:	333c      	adds	r3, #60	; 0x3c
 800c9ba:	db1e      	blt.n	800c9fa <__ieee754_atan2+0x12a>
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	f7f3 ff44 	bl	800084c <__aeabi_ddiv>
 800c9c4:	ec41 0b10 	vmov	d0, r0, r1
 800c9c8:	f7ff ff1a 	bl	800c800 <fabs>
 800c9cc:	f7ff fd78 	bl	800c4c0 <atan>
 800c9d0:	ec51 0b10 	vmov	r0, r1, d0
 800c9d4:	2c01      	cmp	r4, #1
 800c9d6:	d013      	beq.n	800ca00 <__ieee754_atan2+0x130>
 800c9d8:	2c02      	cmp	r4, #2
 800c9da:	d015      	beq.n	800ca08 <__ieee754_atan2+0x138>
 800c9dc:	2c00      	cmp	r4, #0
 800c9de:	d098      	beq.n	800c912 <__ieee754_atan2+0x42>
 800c9e0:	a321      	add	r3, pc, #132	; (adr r3, 800ca68 <__ieee754_atan2+0x198>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fc4f 	bl	8000288 <__aeabi_dsub>
 800c9ea:	a321      	add	r3, pc, #132	; (adr r3, 800ca70 <__ieee754_atan2+0x1a0>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	e014      	b.n	800ca1c <__ieee754_atan2+0x14c>
 800c9f2:	a121      	add	r1, pc, #132	; (adr r1, 800ca78 <__ieee754_atan2+0x1a8>)
 800c9f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9f8:	e7ec      	b.n	800c9d4 <__ieee754_atan2+0x104>
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	e7e9      	b.n	800c9d4 <__ieee754_atan2+0x104>
 800ca00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca04:	4619      	mov	r1, r3
 800ca06:	e784      	b.n	800c912 <__ieee754_atan2+0x42>
 800ca08:	a317      	add	r3, pc, #92	; (adr r3, 800ca68 <__ieee754_atan2+0x198>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	f7f3 fc3b 	bl	8000288 <__aeabi_dsub>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	a116      	add	r1, pc, #88	; (adr r1, 800ca70 <__ieee754_atan2+0x1a0>)
 800ca18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca1c:	f7f3 fc34 	bl	8000288 <__aeabi_dsub>
 800ca20:	e777      	b.n	800c912 <__ieee754_atan2+0x42>
 800ca22:	a117      	add	r1, pc, #92	; (adr r1, 800ca80 <__ieee754_atan2+0x1b0>)
 800ca24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca28:	e773      	b.n	800c912 <__ieee754_atan2+0x42>
 800ca2a:	a111      	add	r1, pc, #68	; (adr r1, 800ca70 <__ieee754_atan2+0x1a0>)
 800ca2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca30:	e76f      	b.n	800c912 <__ieee754_atan2+0x42>
 800ca32:	a111      	add	r1, pc, #68	; (adr r1, 800ca78 <__ieee754_atan2+0x1a8>)
 800ca34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca38:	e76b      	b.n	800c912 <__ieee754_atan2+0x42>
 800ca3a:	bf00      	nop
 800ca3c:	f3af 8000 	nop.w
 800ca40:	54442d18 	.word	0x54442d18
 800ca44:	c00921fb 	.word	0xc00921fb
 800ca48:	54442d18 	.word	0x54442d18
 800ca4c:	bff921fb 	.word	0xbff921fb
 800ca50:	54442d18 	.word	0x54442d18
 800ca54:	bfe921fb 	.word	0xbfe921fb
 800ca58:	7f3321d2 	.word	0x7f3321d2
 800ca5c:	4002d97c 	.word	0x4002d97c
 800ca60:	7f3321d2 	.word	0x7f3321d2
 800ca64:	c002d97c 	.word	0xc002d97c
 800ca68:	33145c07 	.word	0x33145c07
 800ca6c:	3ca1a626 	.word	0x3ca1a626
 800ca70:	54442d18 	.word	0x54442d18
 800ca74:	400921fb 	.word	0x400921fb
 800ca78:	54442d18 	.word	0x54442d18
 800ca7c:	3ff921fb 	.word	0x3ff921fb
 800ca80:	54442d18 	.word	0x54442d18
 800ca84:	3fe921fb 	.word	0x3fe921fb
 800ca88:	7ff00000 	.word	0x7ff00000

0800ca8c <__ieee754_sqrt>:
 800ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca90:	4955      	ldr	r1, [pc, #340]	; (800cbe8 <__ieee754_sqrt+0x15c>)
 800ca92:	ec55 4b10 	vmov	r4, r5, d0
 800ca96:	43a9      	bics	r1, r5
 800ca98:	462b      	mov	r3, r5
 800ca9a:	462a      	mov	r2, r5
 800ca9c:	d112      	bne.n	800cac4 <__ieee754_sqrt+0x38>
 800ca9e:	ee10 2a10 	vmov	r2, s0
 800caa2:	ee10 0a10 	vmov	r0, s0
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f3 fda6 	bl	80005f8 <__aeabi_dmul>
 800caac:	4602      	mov	r2, r0
 800caae:	460b      	mov	r3, r1
 800cab0:	4620      	mov	r0, r4
 800cab2:	4629      	mov	r1, r5
 800cab4:	f7f3 fbea 	bl	800028c <__adddf3>
 800cab8:	4604      	mov	r4, r0
 800caba:	460d      	mov	r5, r1
 800cabc:	ec45 4b10 	vmov	d0, r4, r5
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	2d00      	cmp	r5, #0
 800cac6:	ee10 0a10 	vmov	r0, s0
 800caca:	4621      	mov	r1, r4
 800cacc:	dc0f      	bgt.n	800caee <__ieee754_sqrt+0x62>
 800cace:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cad2:	4330      	orrs	r0, r6
 800cad4:	d0f2      	beq.n	800cabc <__ieee754_sqrt+0x30>
 800cad6:	b155      	cbz	r5, 800caee <__ieee754_sqrt+0x62>
 800cad8:	ee10 2a10 	vmov	r2, s0
 800cadc:	4620      	mov	r0, r4
 800cade:	4629      	mov	r1, r5
 800cae0:	f7f3 fbd2 	bl	8000288 <__aeabi_dsub>
 800cae4:	4602      	mov	r2, r0
 800cae6:	460b      	mov	r3, r1
 800cae8:	f7f3 feb0 	bl	800084c <__aeabi_ddiv>
 800caec:	e7e4      	b.n	800cab8 <__ieee754_sqrt+0x2c>
 800caee:	151b      	asrs	r3, r3, #20
 800caf0:	d073      	beq.n	800cbda <__ieee754_sqrt+0x14e>
 800caf2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800caf6:	07dd      	lsls	r5, r3, #31
 800caf8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cafc:	bf48      	it	mi
 800cafe:	0fc8      	lsrmi	r0, r1, #31
 800cb00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cb04:	bf44      	itt	mi
 800cb06:	0049      	lslmi	r1, r1, #1
 800cb08:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800cb0c:	2500      	movs	r5, #0
 800cb0e:	1058      	asrs	r0, r3, #1
 800cb10:	0fcb      	lsrs	r3, r1, #31
 800cb12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800cb16:	0049      	lsls	r1, r1, #1
 800cb18:	2316      	movs	r3, #22
 800cb1a:	462c      	mov	r4, r5
 800cb1c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cb20:	19a7      	adds	r7, r4, r6
 800cb22:	4297      	cmp	r7, r2
 800cb24:	bfde      	ittt	le
 800cb26:	19bc      	addle	r4, r7, r6
 800cb28:	1bd2      	suble	r2, r2, r7
 800cb2a:	19ad      	addle	r5, r5, r6
 800cb2c:	0fcf      	lsrs	r7, r1, #31
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800cb34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cb3c:	d1f0      	bne.n	800cb20 <__ieee754_sqrt+0x94>
 800cb3e:	f04f 0c20 	mov.w	ip, #32
 800cb42:	469e      	mov	lr, r3
 800cb44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cb48:	42a2      	cmp	r2, r4
 800cb4a:	eb06 070e 	add.w	r7, r6, lr
 800cb4e:	dc02      	bgt.n	800cb56 <__ieee754_sqrt+0xca>
 800cb50:	d112      	bne.n	800cb78 <__ieee754_sqrt+0xec>
 800cb52:	428f      	cmp	r7, r1
 800cb54:	d810      	bhi.n	800cb78 <__ieee754_sqrt+0xec>
 800cb56:	2f00      	cmp	r7, #0
 800cb58:	eb07 0e06 	add.w	lr, r7, r6
 800cb5c:	da42      	bge.n	800cbe4 <__ieee754_sqrt+0x158>
 800cb5e:	f1be 0f00 	cmp.w	lr, #0
 800cb62:	db3f      	blt.n	800cbe4 <__ieee754_sqrt+0x158>
 800cb64:	f104 0801 	add.w	r8, r4, #1
 800cb68:	1b12      	subs	r2, r2, r4
 800cb6a:	428f      	cmp	r7, r1
 800cb6c:	bf88      	it	hi
 800cb6e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cb72:	1bc9      	subs	r1, r1, r7
 800cb74:	4433      	add	r3, r6
 800cb76:	4644      	mov	r4, r8
 800cb78:	0052      	lsls	r2, r2, #1
 800cb7a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cb7e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800cb82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cb86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb8a:	d1dd      	bne.n	800cb48 <__ieee754_sqrt+0xbc>
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	d006      	beq.n	800cb9e <__ieee754_sqrt+0x112>
 800cb90:	1c5c      	adds	r4, r3, #1
 800cb92:	bf13      	iteet	ne
 800cb94:	3301      	addne	r3, #1
 800cb96:	3501      	addeq	r5, #1
 800cb98:	4663      	moveq	r3, ip
 800cb9a:	f023 0301 	bicne.w	r3, r3, #1
 800cb9e:	106a      	asrs	r2, r5, #1
 800cba0:	085b      	lsrs	r3, r3, #1
 800cba2:	07e9      	lsls	r1, r5, #31
 800cba4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800cba8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800cbac:	bf48      	it	mi
 800cbae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800cbb2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800cbb6:	461c      	mov	r4, r3
 800cbb8:	e780      	b.n	800cabc <__ieee754_sqrt+0x30>
 800cbba:	0aca      	lsrs	r2, r1, #11
 800cbbc:	3815      	subs	r0, #21
 800cbbe:	0549      	lsls	r1, r1, #21
 800cbc0:	2a00      	cmp	r2, #0
 800cbc2:	d0fa      	beq.n	800cbba <__ieee754_sqrt+0x12e>
 800cbc4:	02d6      	lsls	r6, r2, #11
 800cbc6:	d50a      	bpl.n	800cbde <__ieee754_sqrt+0x152>
 800cbc8:	f1c3 0420 	rsb	r4, r3, #32
 800cbcc:	fa21 f404 	lsr.w	r4, r1, r4
 800cbd0:	1e5d      	subs	r5, r3, #1
 800cbd2:	4099      	lsls	r1, r3
 800cbd4:	4322      	orrs	r2, r4
 800cbd6:	1b43      	subs	r3, r0, r5
 800cbd8:	e78b      	b.n	800caf2 <__ieee754_sqrt+0x66>
 800cbda:	4618      	mov	r0, r3
 800cbdc:	e7f0      	b.n	800cbc0 <__ieee754_sqrt+0x134>
 800cbde:	0052      	lsls	r2, r2, #1
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	e7ef      	b.n	800cbc4 <__ieee754_sqrt+0x138>
 800cbe4:	46a0      	mov	r8, r4
 800cbe6:	e7bf      	b.n	800cb68 <__ieee754_sqrt+0xdc>
 800cbe8:	7ff00000 	.word	0x7ff00000

0800cbec <matherr>:
 800cbec:	2000      	movs	r0, #0
 800cbee:	4770      	bx	lr

0800cbf0 <_init>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr

0800cbfc <_fini>:
 800cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfe:	bf00      	nop
 800cc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc02:	bc08      	pop	{r3}
 800cc04:	469e      	mov	lr, r3
 800cc06:	4770      	bx	lr
